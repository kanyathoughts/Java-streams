
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package appmodels;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.web.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.53
public class ApplicationBuilderApplicationModel extends AppModelBase {		private MainWindow MainWindow;
	private maxensoWindow maxensoWindow;
	private googleChromeWindow googleChromeWindow;
	private VaadinExamplePage VaadinExamplePage;

	public ApplicationBuilderApplicationModel() throws GeneralLeanFtException 
	{
		setName("ApplicationBuilderApplicationModel");
			MainWindow = new MainWindow(this);
	maxensoWindow = new maxensoWindow(this);
	googleChromeWindow = new googleChromeWindow(this);
		rebuildDescriptions();
	}
	
	public ApplicationBuilderApplicationModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("ApplicationBuilderApplicationModel");
				MainWindow = new MainWindow(contextTestObject, this);
		maxensoWindow = new maxensoWindow(contextTestObject, this);
		googleChromeWindow = new googleChromeWindow(contextTestObject, this);
		VaadinExamplePage = new VaadinExamplePage(contextTestObject, this);
		rebuildDescriptions();
	}	

			public MainWindow MainWindow() { return MainWindow; }
		public maxensoWindow maxensoWindow() { return maxensoWindow; }
		public googleChromeWindow googleChromeWindow() { return googleChromeWindow; }
		public VaadinExamplePage VaadinExamplePage() { return VaadinExamplePage; }

		public class MainWindow extends JavaWindowNodeBase
	{

		
			private NewProjectWindowPart1 NewProjectWindowPart1;
	private NavigationTabControl NavigationTabControl;
	private NewProjectWindowPart2 NewProjectWindowPart2;
	private OpenPerspectiveWindow OpenPerspectiveWindow;
	private BottomTabControl BottomTabControl;
	private preferencesWindow preferencesWindow;
	private WindowMenu WindowMenu;
	private showViewWindow showViewWindow;
	private ProblemsTreeView ProblemsTreeView;
	private TreeNodeInspectorForlder TreeNodeInspectorForlder;
	private selectElementWindow selectElementWindow;
	private DataItemGroup DataItemGroup;
	private maxensoApplicationBuilderError maxensoApplicationBuilderError;
	private FileMenu FileMenu;
	private textEditor textEditor;
	private EditorTabControl EditorTabControl;
	private SaveAs SaveAs;
	private styledTextEditor styledTextEditor;
	private compositeUiObject compositeUiObject;
	private toolBar toolBar;
	private treeTreeView treeTreeView;
	private treeTreeView1 treeTreeView1;
	private newWindow newWindow;
	private shellWindow shellWindow;
	private compositeUiObject1 compositeUiObject1;
	private compositeUiObject2 compositeUiObject2;
	private formTextUiObject formTextUiObject;
	private enterAllBasicServiceInformationHereEditor enterAllBasicServiceInformationHereEditor;
	private packageEditor packageEditor;
	private toolBar1 toolBar1;
	private compositeUiObject3 compositeUiObject3;
	private compositeUiObject4 compositeUiObject4;
	private scrolledFormUiObject scrolledFormUiObject;
	private cTabFolderTabControl1 cTabFolderTabControl1;
	private layoutCompositeUiObject layoutCompositeUiObject;
	private nameEditor nameEditor;
	private layoutCompositeUiObject1 layoutCompositeUiObject1;
	private layoutCompositeUiObject2 layoutCompositeUiObject2;
	private donTShowThisWarningAgainCheckBox donTShowThisWarningAgainCheckBox;
	private saveResourceWindow saveResourceWindow;
	private automaticMeeclipseWorkspaceSettingsWindow automaticMeeclipseWorkspaceSettingsWindow;
	private innoWakeLauncherWindow innoWakeLauncherWindow;
	private TreeNodeInspectorTabControl TreeNodeInspectorTabControl;
	private PropertiesForMaxensoExampleVaadinWindow PropertiesForMaxensoExampleVaadinWindow;
	private PropertiesWindow PropertiesWindow;
	private ProgressInformationWindow ProgressInformationWindow;
	private RunConfigurationWindow RunConfigurationWindow;
	private saveAndLaunchWindow saveAndLaunchWindow;
	private PackageExplorerTabControl PackageExplorerTabControl;
	private NewFolderWindow NewFolderWindow;
	private NewNaturalObjectWindow NewNaturalObjectWindow;
	private NewTargetWindow NewTargetWindow;
	private KeepTargetWindow KeepTargetWindow;
	private SettingsChangedWindow SettingsChangedWindow;
	private ConfirmRemoveWindow ConfirmRemoveWindow;
	private SelectAWizardWindow SelectAWizardWindow;
	private CTabFolderTabControl CTabFolderTabControl;
	private NavTabControlToolBar NavTabControlToolBar;
	private DeleteWindow DeleteWindow;
						public MainWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewProjectWindowPart1 = new NewProjectWindowPart1(this, applicationModel);
		NavigationTabControl = new NavigationTabControl(this, applicationModel);
		NewProjectWindowPart2 = new NewProjectWindowPart2(this, applicationModel);
		OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		preferencesWindow = new preferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		showViewWindow = new showViewWindow(this, applicationModel);
		ProblemsTreeView = new ProblemsTreeView(this, applicationModel);
		TreeNodeInspectorForlder = new TreeNodeInspectorForlder(this, applicationModel);
		selectElementWindow = new selectElementWindow(this, applicationModel);
		DataItemGroup = new DataItemGroup(this, applicationModel);
		maxensoApplicationBuilderError = new maxensoApplicationBuilderError(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		textEditor = new textEditor(this, applicationModel);
		EditorTabControl = new EditorTabControl(this, applicationModel);
		SaveAs = new SaveAs(this, applicationModel);
		styledTextEditor = new styledTextEditor(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		toolBar = new toolBar(this, applicationModel);
		treeTreeView = new treeTreeView(this, applicationModel);
		treeTreeView1 = new treeTreeView1(this, applicationModel);
		newWindow = new newWindow(this, applicationModel);
		shellWindow = new shellWindow(this, applicationModel);
		compositeUiObject1 = new compositeUiObject1(this, applicationModel);
		compositeUiObject2 = new compositeUiObject2(this, applicationModel);
		formTextUiObject = new formTextUiObject(this, applicationModel);
		enterAllBasicServiceInformationHereEditor = new enterAllBasicServiceInformationHereEditor(this, applicationModel);
		packageEditor = new packageEditor(this, applicationModel);
		toolBar1 = new toolBar1(this, applicationModel);
		compositeUiObject3 = new compositeUiObject3(this, applicationModel);
		compositeUiObject4 = new compositeUiObject4(this, applicationModel);
		scrolledFormUiObject = new scrolledFormUiObject(this, applicationModel);
		cTabFolderTabControl1 = new cTabFolderTabControl1(this, applicationModel);
		layoutCompositeUiObject = new layoutCompositeUiObject(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
		layoutCompositeUiObject1 = new layoutCompositeUiObject1(this, applicationModel);
		layoutCompositeUiObject2 = new layoutCompositeUiObject2(this, applicationModel);
		donTShowThisWarningAgainCheckBox = new donTShowThisWarningAgainCheckBox(this, applicationModel);
		saveResourceWindow = new saveResourceWindow(this, applicationModel);
		automaticMeeclipseWorkspaceSettingsWindow = new automaticMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		innoWakeLauncherWindow = new innoWakeLauncherWindow(this, applicationModel);
		TreeNodeInspectorTabControl = new TreeNodeInspectorTabControl(this, applicationModel);
		PropertiesForMaxensoExampleVaadinWindow = new PropertiesForMaxensoExampleVaadinWindow(this, applicationModel);
		PropertiesWindow = new PropertiesWindow(this, applicationModel);
		ProgressInformationWindow = new ProgressInformationWindow(this, applicationModel);
		RunConfigurationWindow = new RunConfigurationWindow(this, applicationModel);
		saveAndLaunchWindow = new saveAndLaunchWindow(this, applicationModel);
		PackageExplorerTabControl = new PackageExplorerTabControl(this, applicationModel);
		NewFolderWindow = new NewFolderWindow(this, applicationModel);
		NewNaturalObjectWindow = new NewNaturalObjectWindow(this, applicationModel);
		NewTargetWindow = new NewTargetWindow(this, applicationModel);
		KeepTargetWindow = new KeepTargetWindow(this, applicationModel);
		SettingsChangedWindow = new SettingsChangedWindow(this, applicationModel);
		ConfirmRemoveWindow = new ConfirmRemoveWindow(this, applicationModel);
		SelectAWizardWindow = new SelectAWizardWindow(this, applicationModel);
		CTabFolderTabControl = new CTabFolderTabControl(this, applicationModel);
		NavTabControlToolBar = new NavTabControlToolBar(this, applicationModel);
		DeleteWindow = new DeleteWindow(this, applicationModel);
			
			setDisplayName("MainWindow");
		}
				public MainWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewProjectWindowPart1 = new NewProjectWindowPart1(this, applicationModel);
		NavigationTabControl = new NavigationTabControl(this, applicationModel);
		NewProjectWindowPart2 = new NewProjectWindowPart2(this, applicationModel);
		OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		preferencesWindow = new preferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		showViewWindow = new showViewWindow(this, applicationModel);
		ProblemsTreeView = new ProblemsTreeView(this, applicationModel);
		TreeNodeInspectorForlder = new TreeNodeInspectorForlder(this, applicationModel);
		selectElementWindow = new selectElementWindow(this, applicationModel);
		DataItemGroup = new DataItemGroup(this, applicationModel);
		maxensoApplicationBuilderError = new maxensoApplicationBuilderError(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		textEditor = new textEditor(this, applicationModel);
		EditorTabControl = new EditorTabControl(this, applicationModel);
		SaveAs = new SaveAs(this, applicationModel);
		styledTextEditor = new styledTextEditor(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		toolBar = new toolBar(this, applicationModel);
		treeTreeView = new treeTreeView(this, applicationModel);
		treeTreeView1 = new treeTreeView1(this, applicationModel);
		newWindow = new newWindow(this, applicationModel);
		shellWindow = new shellWindow(this, applicationModel);
		compositeUiObject1 = new compositeUiObject1(this, applicationModel);
		compositeUiObject2 = new compositeUiObject2(this, applicationModel);
		formTextUiObject = new formTextUiObject(this, applicationModel);
		enterAllBasicServiceInformationHereEditor = new enterAllBasicServiceInformationHereEditor(this, applicationModel);
		packageEditor = new packageEditor(this, applicationModel);
		toolBar1 = new toolBar1(this, applicationModel);
		compositeUiObject3 = new compositeUiObject3(this, applicationModel);
		compositeUiObject4 = new compositeUiObject4(this, applicationModel);
		scrolledFormUiObject = new scrolledFormUiObject(this, applicationModel);
		cTabFolderTabControl1 = new cTabFolderTabControl1(this, applicationModel);
		layoutCompositeUiObject = new layoutCompositeUiObject(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
		layoutCompositeUiObject1 = new layoutCompositeUiObject1(this, applicationModel);
		layoutCompositeUiObject2 = new layoutCompositeUiObject2(this, applicationModel);
		donTShowThisWarningAgainCheckBox = new donTShowThisWarningAgainCheckBox(this, applicationModel);
		saveResourceWindow = new saveResourceWindow(this, applicationModel);
		automaticMeeclipseWorkspaceSettingsWindow = new automaticMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		innoWakeLauncherWindow = new innoWakeLauncherWindow(this, applicationModel);
		TreeNodeInspectorTabControl = new TreeNodeInspectorTabControl(this, applicationModel);
		PropertiesForMaxensoExampleVaadinWindow = new PropertiesForMaxensoExampleVaadinWindow(this, applicationModel);
		PropertiesWindow = new PropertiesWindow(this, applicationModel);
		ProgressInformationWindow = new ProgressInformationWindow(this, applicationModel);
		RunConfigurationWindow = new RunConfigurationWindow(this, applicationModel);
		saveAndLaunchWindow = new saveAndLaunchWindow(this, applicationModel);
		PackageExplorerTabControl = new PackageExplorerTabControl(this, applicationModel);
		NewFolderWindow = new NewFolderWindow(this, applicationModel);
		NewNaturalObjectWindow = new NewNaturalObjectWindow(this, applicationModel);
		NewTargetWindow = new NewTargetWindow(this, applicationModel);
		KeepTargetWindow = new KeepTargetWindow(this, applicationModel);
		SettingsChangedWindow = new SettingsChangedWindow(this, applicationModel);
		ConfirmRemoveWindow = new ConfirmRemoveWindow(this, applicationModel);
		SelectAWizardWindow = new SelectAWizardWindow(this, applicationModel);
		CTabFolderTabControl = new CTabFolderTabControl(this, applicationModel);
		NavTabControlToolBar = new NavTabControlToolBar(this, applicationModel);
		DeleteWindow = new DeleteWindow(this, applicationModel);

			setDisplayName("MainWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty(".* - (innoWake|maxenso)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewProjectWindowPart1 NewProjectWindowPart1() { return NewProjectWindowPart1; }
		public NavigationTabControl NavigationTabControl() { return NavigationTabControl; }
		public NewProjectWindowPart2 NewProjectWindowPart2() { return NewProjectWindowPart2; }
		public OpenPerspectiveWindow OpenPerspectiveWindow() { return OpenPerspectiveWindow; }
		public BottomTabControl BottomTabControl() { return BottomTabControl; }
		public preferencesWindow preferencesWindow() { return preferencesWindow; }
		public WindowMenu WindowMenu() { return WindowMenu; }
		public showViewWindow showViewWindow() { return showViewWindow; }
		public ProblemsTreeView ProblemsTreeView() { return ProblemsTreeView; }
		public TreeNodeInspectorForlder TreeNodeInspectorForlder() { return TreeNodeInspectorForlder; }
		public selectElementWindow selectElementWindow() { return selectElementWindow; }
		public DataItemGroup DataItemGroup() { return DataItemGroup; }
		public maxensoApplicationBuilderError maxensoApplicationBuilderError() { return maxensoApplicationBuilderError; }
		public FileMenu FileMenu() { return FileMenu; }
		public textEditor textEditor() { return textEditor; }
		public EditorTabControl EditorTabControl() { return EditorTabControl; }
		public SaveAs SaveAs() { return SaveAs; }
		public styledTextEditor styledTextEditor() { return styledTextEditor; }
		public compositeUiObject compositeUiObject() { return compositeUiObject; }
		public toolBar toolBar() { return toolBar; }
		public treeTreeView treeTreeView() { return treeTreeView; }
		public treeTreeView1 treeTreeView1() { return treeTreeView1; }
		public newWindow newWindow() { return newWindow; }
		public shellWindow shellWindow() { return shellWindow; }
		public compositeUiObject1 compositeUiObject1() { return compositeUiObject1; }
		public compositeUiObject2 compositeUiObject2() { return compositeUiObject2; }
		public formTextUiObject formTextUiObject() { return formTextUiObject; }
		public enterAllBasicServiceInformationHereEditor enterAllBasicServiceInformationHereEditor() { return enterAllBasicServiceInformationHereEditor; }
		public packageEditor packageEditor() { return packageEditor; }
		public toolBar1 toolBar1() { return toolBar1; }
		public compositeUiObject3 compositeUiObject3() { return compositeUiObject3; }
		public compositeUiObject4 compositeUiObject4() { return compositeUiObject4; }
		public scrolledFormUiObject scrolledFormUiObject() { return scrolledFormUiObject; }
		public cTabFolderTabControl1 cTabFolderTabControl1() { return cTabFolderTabControl1; }
		public layoutCompositeUiObject layoutCompositeUiObject() { return layoutCompositeUiObject; }
		public nameEditor nameEditor() { return nameEditor; }
		public layoutCompositeUiObject1 layoutCompositeUiObject1() { return layoutCompositeUiObject1; }
		public layoutCompositeUiObject2 layoutCompositeUiObject2() { return layoutCompositeUiObject2; }
		public donTShowThisWarningAgainCheckBox donTShowThisWarningAgainCheckBox() { return donTShowThisWarningAgainCheckBox; }
		public saveResourceWindow saveResourceWindow() { return saveResourceWindow; }
		public automaticMeeclipseWorkspaceSettingsWindow automaticMeeclipseWorkspaceSettingsWindow() { return automaticMeeclipseWorkspaceSettingsWindow; }
		public innoWakeLauncherWindow innoWakeLauncherWindow() { return innoWakeLauncherWindow; }
		public TreeNodeInspectorTabControl TreeNodeInspectorTabControl() { return TreeNodeInspectorTabControl; }
		public PropertiesForMaxensoExampleVaadinWindow PropertiesForMaxensoExampleVaadinWindow() { return PropertiesForMaxensoExampleVaadinWindow; }
		public PropertiesWindow PropertiesWindow() { return PropertiesWindow; }
		public ProgressInformationWindow ProgressInformationWindow() { return ProgressInformationWindow; }
		public RunConfigurationWindow RunConfigurationWindow() { return RunConfigurationWindow; }
		public saveAndLaunchWindow saveAndLaunchWindow() { return saveAndLaunchWindow; }
		public PackageExplorerTabControl PackageExplorerTabControl() { return PackageExplorerTabControl; }
		public NewFolderWindow NewFolderWindow() { return NewFolderWindow; }
		public NewNaturalObjectWindow NewNaturalObjectWindow() { return NewNaturalObjectWindow; }
		public NewTargetWindow NewTargetWindow() { return NewTargetWindow; }
		public KeepTargetWindow KeepTargetWindow() { return KeepTargetWindow; }
		public SettingsChangedWindow SettingsChangedWindow() { return SettingsChangedWindow; }
		public ConfirmRemoveWindow ConfirmRemoveWindow() { return ConfirmRemoveWindow; }
		public SelectAWizardWindow SelectAWizardWindow() { return SelectAWizardWindow; }
		public CTabFolderTabControl CTabFolderTabControl() { return CTabFolderTabControl; }
		public NavTabControlToolBar NavTabControlToolBar() { return NavTabControlToolBar; }
		public DeleteWindow DeleteWindow() { return DeleteWindow; }
		
			public class NewProjectWindowPart1 extends JavaWindowNodeBase
	{

		
			private SelectAWizardScreen SelectAWizardScreen;
						public NewProjectWindowPart1(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);
			
			setDisplayName("New Project Window Part 1");
		}
				public NewProjectWindowPart1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);

			setDisplayName("New Project Window Part 1");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectAWizardScreen SelectAWizardScreen() { return SelectAWizardScreen; }
		
			public class SelectAWizardScreen extends JavaUiObjectNodeBase
	{

		
			private WizardsEditor WizardsEditor;
	private NextButton NextButton;
	private WizardsTreeView WizardsTreeView;
	private finishButton finishButton;
						public SelectAWizardScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardsEditor = new WizardsEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		WizardsTreeView = new WizardsTreeView(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);

			setDisplayName("Select a wizard Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardsEditor WizardsEditor() { return WizardsEditor; }
		public NextButton NextButton() { return NextButton; }
		public WizardsTreeView WizardsTreeView() { return WizardsTreeView; }
		public finishButton finishButton() { return finishButton; }
		
			public class WizardsEditor extends JavaEditorNodeBase
	{

		
								public WizardsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WizardsTreeView extends JavaTreeViewNodeBase
	{

		
								public WizardsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NavigationTabControl extends JavaTabControlNodeBase
	{

		
			private NavigatorView NavigatorView;
	private TreeNavigationView TreeNavigationView;
	private ToolBar ToolBar;
	private InitialComposite InitialComposite;
	private moveDownMenu moveDownMenu;
	private RunAsMenu RunAsMenu;
						public NavigationTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NavigatorView = new NavigatorView(this, applicationModel);
		TreeNavigationView = new TreeNavigationView(this, applicationModel);
		ToolBar = new ToolBar(this, applicationModel);
		InitialComposite = new InitialComposite(this, applicationModel);
		moveDownMenu = new moveDownMenu(this, applicationModel);
		RunAsMenu = new RunAsMenu(this, applicationModel);

			setDisplayName("Navigation Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_SMALL__Y_SMALL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NavigatorView NavigatorView() { return NavigatorView; }
		public TreeNavigationView TreeNavigationView() { return TreeNavigationView; }
		public ToolBar ToolBar() { return ToolBar; }
		public InitialComposite InitialComposite() { return InitialComposite; }
		public moveDownMenu moveDownMenu() { return moveDownMenu; }
		public RunAsMenu RunAsMenu() { return RunAsMenu; }
		
			public class NavigatorView extends JavaTreeViewNodeBase
	{

		
			private NewMenu NewMenu;
	private moveDownMenu moveDownMenu;
	private RunAsMenu RunAsMenu;
						public NavigatorView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewMenu = new NewMenu(this, applicationModel);
		moveDownMenu = new moveDownMenu(this, applicationModel);
		RunAsMenu = new RunAsMenu(this, applicationModel);

			setDisplayName("Navigator View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewMenu NewMenu() { return NewMenu; }
		public moveDownMenu moveDownMenu() { return moveDownMenu; }
		public RunAsMenu RunAsMenu() { return RunAsMenu; }
		
			public class NewMenu extends JavaMenuNodeBase
	{

		
								public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("New").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class moveDownMenu extends JavaMenuNodeBase
	{

		
								public moveDownMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("moveDownMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Move Down").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunAsMenu extends JavaMenuNodeBase
	{

		
			private ExampleVaadin ExampleVaadin;
	private RunConfigurationMenu RunConfigurationMenu;
						public RunAsMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ExampleVaadin = new ExampleVaadin(this, applicationModel);
		RunConfigurationMenu = new RunConfigurationMenu(this, applicationModel);

			setDisplayName("RunAsMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run As").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ExampleVaadin ExampleVaadin() { return ExampleVaadin; }
		public RunConfigurationMenu RunConfigurationMenu() { return RunConfigurationMenu; }
		
			public class ExampleVaadin extends JavaMenuNodeBase
	{

		
								public ExampleVaadin(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExampleVaadin");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Example Vaadin").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationMenu extends JavaMenuNodeBase
	{

		
								public RunConfigurationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run Configurations...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class TreeNavigationView extends JavaTreeViewNodeBase
	{

		
			private NewMenu NewMenu;
	private DialogMenu DialogMenu;
	private OpenEditorMenu OpenEditorMenu;
	private ShowReferences ShowReferences;
	private Delete Delete;
	private moveDownMenu moveDownMenu;
						public TreeNavigationView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewMenu = new NewMenu(this, applicationModel);
		DialogMenu = new DialogMenu(this, applicationModel);
		OpenEditorMenu = new OpenEditorMenu(this, applicationModel);
		ShowReferences = new ShowReferences(this, applicationModel);
		Delete = new Delete(this, applicationModel);
		moveDownMenu = new moveDownMenu(this, applicationModel);

			setDisplayName("Tree Navigation View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewMenu NewMenu() { return NewMenu; }
		public DialogMenu DialogMenu() { return DialogMenu; }
		public OpenEditorMenu OpenEditorMenu() { return OpenEditorMenu; }
		public ShowReferences ShowReferences() { return ShowReferences; }
		public Delete Delete() { return Delete; }
		public moveDownMenu moveDownMenu() { return moveDownMenu; }
		
			public class NewMenu extends JavaMenuNodeBase
	{

		
			private PackageMenu PackageMenu;
	private ClassItemMenu ClassItemMenu;
	private DialogMenu DialogMenu;
	private DataItemGroup DataItemGroup;
	private Variable Variable;
	private DataItemLink DataItemLink;
	private BusinessRule BusinessRule;
	private Action Action;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageMenu = new PackageMenu(this, applicationModel);
		ClassItemMenu = new ClassItemMenu(this, applicationModel);
		DialogMenu = new DialogMenu(this, applicationModel);
		DataItemGroup = new DataItemGroup(this, applicationModel);
		Variable = new Variable(this, applicationModel);
		DataItemLink = new DataItemLink(this, applicationModel);
		BusinessRule = new BusinessRule(this, applicationModel);
		Action = new Action(this, applicationModel);

			setDisplayName("NewMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("New").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageMenu PackageMenu() { return PackageMenu; }
		public ClassItemMenu ClassItemMenu() { return ClassItemMenu; }
		public DialogMenu DialogMenu() { return DialogMenu; }
		public DataItemGroup DataItemGroup() { return DataItemGroup; }
		public Variable Variable() { return Variable; }
		public DataItemLink DataItemLink() { return DataItemLink; }
		public BusinessRule BusinessRule() { return BusinessRule; }
		public Action Action() { return Action; }
		
			public class PackageMenu extends JavaMenuNodeBase
	{

		
								public PackageMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PackageMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Package").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClassItemMenu extends JavaMenuNodeBase
	{

		
								public ClassItemMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClassItemMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Class item").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DialogMenu extends JavaMenuNodeBase
	{

		
								public DialogMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DialogMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Dialog").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataItemGroup extends JavaMenuNodeBase
	{

		
								public DataItemGroup(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Data item group");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Data item group").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Variable extends JavaMenuNodeBase
	{

		
								public Variable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Variable");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Variable").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataItemLink extends JavaMenuNodeBase
	{

		
								public DataItemLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Data item link");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Data item link").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BusinessRule extends JavaMenuNodeBase
	{

		
								public BusinessRule(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Business rule");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Business rule").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Action extends JavaMenuNodeBase
	{

		
								public Action(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Action");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Action").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DialogMenu extends JavaMenuNodeBase
	{

		
								public DialogMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DialogMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Dialog").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenEditorMenu extends JavaMenuNodeBase
	{

		
								public OpenEditorMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open Editor Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Open Editor").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowReferences extends JavaMenuNodeBase
	{

		
								public ShowReferences(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show References");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Show References").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Delete extends JavaMenuNodeBase
	{

		
								public Delete(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Delete").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class moveDownMenu extends JavaMenuNodeBase
	{

		
								public moveDownMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("moveDownMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Move Down").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ToolBar extends JavaToolBarNodeBase
	{

		
								public ToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InitialComposite extends JavaUiObjectNodeBase
	{

		
			private CreateProjectHyperlink CreateProjectHyperlink;
						public InitialComposite(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateProjectHyperlink = new CreateProjectHyperlink(this, applicationModel);

			setDisplayName("Initial composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateProjectHyperlink CreateProjectHyperlink() { return CreateProjectHyperlink; }
		
			public class CreateProjectHyperlink extends JavaUiObjectNodeBase
	{

		
								public CreateProjectHyperlink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create a project Hyperlink");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.ui.forms.widgets.Hyperlink").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class moveDownMenu extends JavaMenuNodeBase
	{

		
								public moveDownMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("moveDownMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Move Down").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunAsMenu extends JavaMenuNodeBase
	{

		
			private ExampleVaadin ExampleVaadin;
						public RunAsMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ExampleVaadin = new ExampleVaadin(this, applicationModel);

			setDisplayName("RunAsMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run As").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ExampleVaadin ExampleVaadin() { return ExampleVaadin; }
		
			public class ExampleVaadin extends JavaMenuNodeBase
	{

		
								public ExampleVaadin(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExampleVaadin");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Example Vaadin").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewProjectWindowPart2 extends JavaWindowNodeBase
	{

		
			private CreateApplicationBuilderProjectScreen CreateApplicationBuilderProjectScreen;
						public NewProjectWindowPart2(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CreateApplicationBuilderProjectScreen = new CreateApplicationBuilderProjectScreen(this, applicationModel);
			
			setDisplayName("New Project Window Part 2");
		}
				public NewProjectWindowPart2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateApplicationBuilderProjectScreen = new CreateApplicationBuilderProjectScreen(this, applicationModel);

			setDisplayName("New Project Window Part 2");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateApplicationBuilderProjectScreen CreateApplicationBuilderProjectScreen() { return CreateApplicationBuilderProjectScreen; }
		
			public class CreateApplicationBuilderProjectScreen extends JavaUiObjectNodeBase
	{

		
			private CreateTwoProjectsUiAndCore CreateTwoProjectsUiAndCore;
	private FinishButton FinishButton;
	private ProjectBasenameEditor ProjectBasenameEditor;
	private modelType modelType;
						public CreateApplicationBuilderProjectScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateTwoProjectsUiAndCore = new CreateTwoProjectsUiAndCore(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		ProjectBasenameEditor = new ProjectBasenameEditor(this, applicationModel);
		modelType = new modelType(this, applicationModel);

			setDisplayName("CreateApplicationBuilderProjectScreen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateTwoProjectsUiAndCore CreateTwoProjectsUiAndCore() { return CreateTwoProjectsUiAndCore; }
		public FinishButton FinishButton() { return FinishButton; }
		public ProjectBasenameEditor ProjectBasenameEditor() { return ProjectBasenameEditor; }
		public modelType modelType() { return modelType; }
		
			public class CreateTwoProjectsUiAndCore extends JavaCheckBoxNodeBase
	{

		
								public CreateTwoProjectsUiAndCore(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CreateTwoProjectsUiAndCore");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().label("Create two projects (ui and core)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectBasenameEditor extends JavaEditorNodeBase
	{

		
								public ProjectBasenameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project basename:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project basename:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class modelType extends JavaListNodeBase
	{

		
								public modelType(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Model Type");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class OpenPerspectiveWindow extends JavaWindowNodeBase
	{

		
			private Table Table;
	private oKButton oKButton;
	private openButton openButton;
						public OpenPerspectiveWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Table = new Table(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		openButton = new openButton(this, applicationModel);
			
			setDisplayName("Open Perspective");
		}
				public OpenPerspectiveWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Table = new Table(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		openButton = new openButton(this, applicationModel);

			setDisplayName("Open Perspective");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Open Perspective").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Table Table() { return Table; }
		public oKButton oKButton() { return oKButton; }
		public openButton openButton() { return openButton; }
		
			public class Table extends JavaTableNodeBase
	{

		
								public Table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class openButton extends JavaButtonNodeBase
	{

		
								public openButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BottomTabControl extends JavaTabControlNodeBase
	{

		
			private ConsoleEditor ConsoleEditor;
	private IntegrityViolationView IntegrityViolationView;
	private ReferenceView ReferenceView;
	private TargetViewToolBar TargetViewToolBar;
	private TargetViewTreeView TargetViewTreeView;
	private ProblemsTreeView ProblemsTreeView;
						public BottomTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ConsoleEditor = new ConsoleEditor(this, applicationModel);
		IntegrityViolationView = new IntegrityViolationView(this, applicationModel);
		ReferenceView = new ReferenceView(this, applicationModel);
		TargetViewToolBar = new TargetViewToolBar(this, applicationModel);
		TargetViewTreeView = new TargetViewTreeView(this, applicationModel);
		ProblemsTreeView = new ProblemsTreeView(this, applicationModel);

			setDisplayName("Bottom Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_BIG__Y_BIG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ConsoleEditor ConsoleEditor() { return ConsoleEditor; }
		public IntegrityViolationView IntegrityViolationView() { return IntegrityViolationView; }
		public ReferenceView ReferenceView() { return ReferenceView; }
		public TargetViewToolBar TargetViewToolBar() { return TargetViewToolBar; }
		public TargetViewTreeView TargetViewTreeView() { return TargetViewTreeView; }
		public ProblemsTreeView ProblemsTreeView() { return ProblemsTreeView; }
		
			public class ConsoleEditor extends JavaEditorNodeBase
	{

		
								public ConsoleEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Console Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("application-builder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IntegrityViolationView extends JavaTreeViewNodeBase
	{

		
								public IntegrityViolationView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Integrity Violation View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReferenceView extends JavaTreeViewNodeBase
	{

		
								public ReferenceView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReferenceView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetViewToolBar extends JavaToolBarNodeBase
	{

		
								public TargetViewToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Target View Tool Bar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetViewTreeView extends JavaTreeViewNodeBase
	{

		
			private DeleteTargetMenu DeleteTargetMenu;
						public TargetViewTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DeleteTargetMenu = new DeleteTargetMenu(this, applicationModel);

			setDisplayName("Target View Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DeleteTargetMenu DeleteTargetMenu() { return DeleteTargetMenu; }
		
			public class DeleteTargetMenu extends JavaMenuNodeBase
	{

		
								public DeleteTargetMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete Target");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Delete Target").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProblemsTreeView extends JavaTreeViewNodeBase
	{

		
								public ProblemsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Problems Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class preferencesWindow extends JavaWindowNodeBase
	{

		
			private Tree Tree;
	private ApplyAndCloseButton ApplyAndCloseButton;
	private ClasspathVariablesScreen ClasspathVariablesScreen;
	private newVariableEntryWindow newVariableEntryWindow;
	private classpathVariablesChangedWindow classpathVariablesChangedWindow;
	private compositeUiObject compositeUiObject;
	private restoreDefaultsButton restoreDefaultsButton;
						public preferencesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		restoreDefaultsButton = new restoreDefaultsButton(this, applicationModel);
			
			setDisplayName("Preferences Window");
		}
				public preferencesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		restoreDefaultsButton = new restoreDefaultsButton(this, applicationModel);

			setDisplayName("Preferences Window");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tree Tree() { return Tree; }
		public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public ClasspathVariablesScreen ClasspathVariablesScreen() { return ClasspathVariablesScreen; }
		public newVariableEntryWindow newVariableEntryWindow() { return newVariableEntryWindow; }
		public classpathVariablesChangedWindow classpathVariablesChangedWindow() { return classpathVariablesChangedWindow; }
		public compositeUiObject compositeUiObject() { return compositeUiObject; }
		public restoreDefaultsButton restoreDefaultsButton() { return restoreDefaultsButton; }
		
			public class Tree extends JavaTreeViewNodeBase
	{

		
								public Tree(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplyAndCloseButton extends JavaButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply and Close");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClasspathVariablesScreen extends JavaUiObjectNodeBase
	{

		
			private newButton newButton;
						public ClasspathVariablesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					newButton = new newButton(this, applicationModel);

			setDisplayName("Classpath Variables Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public newButton newButton() { return newButton; }
		
			public class newButton extends JavaButtonNodeBase
	{

		
								public newButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("New...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newVariableEntryWindow extends JavaWindowNodeBase
	{

		
			private oKButton oKButton;
	private pathEditor pathEditor;
	private nameEditor nameEditor;
						public newVariableEntryWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
			
			setDisplayName("New Variable Entry");
		}
				public newVariableEntryWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);

			setDisplayName("New Variable Entry");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Variable Entry").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		public pathEditor pathEditor() { return pathEditor; }
		public nameEditor nameEditor() { return nameEditor; }
		
			public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pathEditor extends JavaEditorNodeBase
	{

		
								public pathEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Path:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nameEditor extends JavaEditorNodeBase
	{

		
								public nameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class classpathVariablesChangedWindow extends JavaWindowNodeBase
	{

		
			private yesButton yesButton;
						public classpathVariablesChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					yesButton = new yesButton(this, applicationModel);
			
			setDisplayName("Classpath Variables Changed");
		}
				public classpathVariablesChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					yesButton = new yesButton(this, applicationModel);

			setDisplayName("Classpath Variables Changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Classpath Variables Changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public yesButton yesButton() { return yesButton; }
		
			public class yesButton extends JavaButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class compositeUiObject extends JavaUiObjectNodeBase
	{

		
			private enableTeamModeCheckBox enableTeamModeCheckBox;
	private ShowWarning ShowWarning;
	private LockReference LockReference;
	private EnableDeltaGeneration EnableDeltaGeneration;
	private ShowTimestampInConsole ShowTimestampInConsole;
	private GetGenerationPath GetGenerationPath;
	private RunGenerators RunGenerators;
	private DeleteOrphanedModelFiles DeleteOrphanedModelFiles;
	private EnableDeltaValidation EnableDeltaValidation;
	private AlwaysSaveMonolithic AlwaysSaveMonolithic;
	private OpenModelSegmentsFlat OpenModelSegmentsFlat;
	private GenerateLegacyCode GenerateLegacyCode;
	private ExportIDs ExportIDs;
						public compositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					enableTeamModeCheckBox = new enableTeamModeCheckBox(this, applicationModel);
		ShowWarning = new ShowWarning(this, applicationModel);
		LockReference = new LockReference(this, applicationModel);
		EnableDeltaGeneration = new EnableDeltaGeneration(this, applicationModel);
		ShowTimestampInConsole = new ShowTimestampInConsole(this, applicationModel);
		GetGenerationPath = new GetGenerationPath(this, applicationModel);
		RunGenerators = new RunGenerators(this, applicationModel);
		DeleteOrphanedModelFiles = new DeleteOrphanedModelFiles(this, applicationModel);
		EnableDeltaValidation = new EnableDeltaValidation(this, applicationModel);
		AlwaysSaveMonolithic = new AlwaysSaveMonolithic(this, applicationModel);
		OpenModelSegmentsFlat = new OpenModelSegmentsFlat(this, applicationModel);
		GenerateLegacyCode = new GenerateLegacyCode(this, applicationModel);
		ExportIDs = new ExportIDs(this, applicationModel);

			setDisplayName("Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public enableTeamModeCheckBox enableTeamModeCheckBox() { return enableTeamModeCheckBox; }
		public ShowWarning ShowWarning() { return ShowWarning; }
		public LockReference LockReference() { return LockReference; }
		public EnableDeltaGeneration EnableDeltaGeneration() { return EnableDeltaGeneration; }
		public ShowTimestampInConsole ShowTimestampInConsole() { return ShowTimestampInConsole; }
		public GetGenerationPath GetGenerationPath() { return GetGenerationPath; }
		public RunGenerators RunGenerators() { return RunGenerators; }
		public DeleteOrphanedModelFiles DeleteOrphanedModelFiles() { return DeleteOrphanedModelFiles; }
		public EnableDeltaValidation EnableDeltaValidation() { return EnableDeltaValidation; }
		public AlwaysSaveMonolithic AlwaysSaveMonolithic() { return AlwaysSaveMonolithic; }
		public OpenModelSegmentsFlat OpenModelSegmentsFlat() { return OpenModelSegmentsFlat; }
		public GenerateLegacyCode GenerateLegacyCode() { return GenerateLegacyCode; }
		public ExportIDs ExportIDs() { return ExportIDs; }
		
			public class enableTeamModeCheckBox extends JavaCheckBoxNodeBase
	{

		
								public enableTeamModeCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enable team mode");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Enable team mode").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowWarning extends JavaCheckBoxNodeBase
	{

		
								public ShowWarning(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show warning on shared models when team mode is disabled.");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Show warning on shared models when team mode is disabled.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LockReference extends JavaCheckBoxNodeBase
	{

		
								public LockReference(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Lock Reference");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Lock reference target elements (if team mode is enabled)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnableDeltaGeneration extends JavaCheckBoxNodeBase
	{

		
								public EnableDeltaGeneration(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enable delta generation");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Enable delta generation").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowTimestampInConsole extends JavaCheckBoxNodeBase
	{

		
								public ShowTimestampInConsole(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show timestamp in console");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Show timestamp in console").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GetGenerationPath extends JavaCheckBoxNodeBase
	{

		
								public GetGenerationPath(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Get generation path from model location");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Get generation path from model location").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunGenerators extends JavaCheckBoxNodeBase
	{

		
								public RunGenerators(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run global generators");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Run global generators").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteOrphanedModelFiles extends JavaCheckBoxNodeBase
	{

		
								public DeleteOrphanedModelFiles(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete orphaned model files");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Delete orphaned model files").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnableDeltaValidation extends JavaCheckBoxNodeBase
	{

		
								public EnableDeltaValidation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enable delta validation");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Enable delta validation").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AlwaysSaveMonolithic extends JavaCheckBoxNodeBase
	{

		
								public AlwaysSaveMonolithic(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Always save monolithic model (if team mode is disabled)");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Always save monolithic model (if team mode is disabled)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenModelSegmentsFlat extends JavaCheckBoxNodeBase
	{

		
								public OpenModelSegmentsFlat(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open model segments flat");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Open model segments flat (without child segments)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GenerateLegacyCode extends JavaCheckBoxNodeBase
	{

		
								public GenerateLegacyCode(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Generate legacy code");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Generate legacy code (Field IDs, save Method in business objects...)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExportIDs extends JavaCheckBoxNodeBase
	{

		
								public ExportIDs(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Export IDs after model generation automatically");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Export IDs after model generation automatically").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class restoreDefaultsButton extends JavaButtonNodeBase
	{

		
								public restoreDefaultsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Restore Defaults");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Restore Defaults").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class WindowMenu extends JavaMenuNodeBase
	{

		
			private PreferencesMenu PreferencesMenu;
	private ShowViewMenu ShowViewMenu;
						public WindowMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PreferencesMenu = new PreferencesMenu(this, applicationModel);
		ShowViewMenu = new ShowViewMenu(this, applicationModel);

			setDisplayName("Window Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Window").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PreferencesMenu PreferencesMenu() { return PreferencesMenu; }
		public ShowViewMenu ShowViewMenu() { return ShowViewMenu; }
		
			public class PreferencesMenu extends JavaMenuNodeBase
	{

		
								public PreferencesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Preferences Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowViewMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public ShowViewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("Show View Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class showViewWindow extends JavaWindowNodeBase
	{

		
			private CancelButton CancelButton;
	private TextEditor TextEditor;
	private OpenButton OpenButton;
						public showViewWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CancelButton = new CancelButton(this, applicationModel);
		TextEditor = new TextEditor(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
			
			setDisplayName("Show View");
		}
				public showViewWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CancelButton = new CancelButton(this, applicationModel);
		TextEditor = new TextEditor(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);

			setDisplayName("Show View");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CancelButton CancelButton() { return CancelButton; }
		public TextEditor TextEditor() { return TextEditor; }
		public OpenButton OpenButton() { return OpenButton; }
		
			public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TextEditor extends JavaEditorNodeBase
	{

		
								public TextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Text Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenButton extends JavaButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProblemsTreeView extends JavaTreeViewNodeBase
	{

		
								public ProblemsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Problems Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText(new RegExpProperty("0.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TreeNodeInspectorForlder extends JavaTabControlNodeBase
	{

		
			private UIFrame UIFrame;
						public TreeNodeInspectorForlder(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					UIFrame = new UIFrame(this, applicationModel);

			setDisplayName("Tree Node Inspector Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_SMALL__Y_BIG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public UIFrame UIFrame() { return UIFrame; }
		
			public class UIFrame extends JavaTreeViewNodeBase
	{

		
								public UIFrame(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UI frame");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class selectElementWindow extends JavaWindowNodeBase
	{

		
			private matchingModelElementsTable matchingModelElementsTable;
	private oKButton oKButton;
						public selectElementWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					matchingModelElementsTable = new matchingModelElementsTable(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Select element");
		}
				public selectElementWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					matchingModelElementsTable = new matchingModelElementsTable(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Select element");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Select element").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public matchingModelElementsTable matchingModelElementsTable() { return matchingModelElementsTable; }
		public oKButton oKButton() { return oKButton; }
		
			public class matchingModelElementsTable extends JavaTableNodeBase
	{

		
								public matchingModelElementsTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Matching model elements:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().attachedText("Matching model elements:").nativeClass("org.eclipse.swt.widgets.Table").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DataItemGroup extends JavaMenuNodeBase
	{

		
								public DataItemGroup(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Data item group");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Data item group").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class maxensoApplicationBuilderError extends JavaWindowNodeBase
	{

		
			private integrityViolation integrityViolation;
	private donTShowThisWarningAgainCheckBox donTShowThisWarningAgainCheckBox;
	private OKButton OKButton;
						public maxensoApplicationBuilderError(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					integrityViolation = new integrityViolation(this, applicationModel);
		donTShowThisWarningAgainCheckBox = new donTShowThisWarningAgainCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("maxenso application builder");
		}
				public maxensoApplicationBuilderError(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					integrityViolation = new integrityViolation(this, applicationModel);
		donTShowThisWarningAgainCheckBox = new donTShowThisWarningAgainCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("maxenso application builder");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("application-builder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public integrityViolation integrityViolation() { return integrityViolation; }
		public donTShowThisWarningAgainCheckBox donTShowThisWarningAgainCheckBox() { return donTShowThisWarningAgainCheckBox; }
		public OKButton OKButton() { return OKButton; }
		
			public class integrityViolation extends JavaLabelNodeBase
	{

		
								public integrityViolation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Integrity violation!\n\nUnable to save model or to generate from model.\n\nPlease check Integrity Violation View.\n\n(Window > Show View > Integrity Violation View)(st)");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().label("Integrity violation!\n\nUnable to save model or to generate from model.\n\nPlease check Integrity Violation View.\n\n(Window > Show View > Integrity Violation View)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class donTShowThisWarningAgainCheckBox extends JavaCheckBoxNodeBase
	{

		
								public donTShowThisWarningAgainCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't show this warning again.");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Don't show this warning again.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FileMenu extends JavaMenuNodeBase
	{

		
			private Restart Restart;
	private Close Close;
	private SwitchWorkspace SwitchWorkspace;
						public FileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Restart = new Restart(this, applicationModel);
		Close = new Close(this, applicationModel);
		SwitchWorkspace = new SwitchWorkspace(this, applicationModel);

			setDisplayName("File Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Restart Restart() { return Restart; }
		public Close Close() { return Close; }
		public SwitchWorkspace SwitchWorkspace() { return SwitchWorkspace; }
		
			public class Restart extends JavaMenuNodeBase
	{

		
								public Restart(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Restart");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Restart").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Close extends JavaMenuNodeBase
	{

		
								public Close(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Close");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SwitchWorkspace extends JavaMenuNodeBase
	{

		
			private Other Other;
						public SwitchWorkspace(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Other = new Other(this, applicationModel);

			setDisplayName("Switch Workspace");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Switch Workspace").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Other Other() { return Other; }
		
			public class Other extends JavaMenuNodeBase
	{

		
								public Other(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Other...");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class textEditor extends JavaEditorNodeBase
	{

		
								public textEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Text");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Text").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditorTabControl extends JavaTabControlNodeBase
	{

		
			private defaultFrameUIUiObject defaultFrameUIUiObject;
						public EditorTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					defaultFrameUIUiObject = new defaultFrameUIUiObject(this, applicationModel);

			setDisplayName("Editor Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").path("CTabFolder;Composite;Composite;Composite;Composite;Composite;Composite;Composite;Shell;").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public defaultFrameUIUiObject defaultFrameUIUiObject() { return defaultFrameUIUiObject; }
		
			public class defaultFrameUIUiObject extends JavaUiObjectNodeBase
	{

		
								public defaultFrameUIUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UIFrameView");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("innowake.erp.model.editorcomponent.DefaultFrameUI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SaveAs extends JavaWindowNodeBase
	{

		
								public SaveAs(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

						
			setDisplayName("Save As");
		}
				public SaveAs(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save As");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Save As").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class styledTextEditor extends JavaEditorNodeBase
	{

		
								public styledTextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StyledText");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.custom.StyledText").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class compositeUiObject extends JavaUiObjectNodeBase
	{

		
								public compositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class toolBar extends JavaToolBarNodeBase
	{

		
								public toolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class treeTreeView extends JavaTreeViewNodeBase
	{

		
			private moveDownMenu moveDownMenu;
	private RunAsMenu RunAsMenu;
						public treeTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					moveDownMenu = new moveDownMenu(this, applicationModel);
		RunAsMenu = new RunAsMenu(this, applicationModel);

			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public moveDownMenu moveDownMenu() { return moveDownMenu; }
		public RunAsMenu RunAsMenu() { return RunAsMenu; }
		
			public class moveDownMenu extends JavaMenuNodeBase
	{

		
								public moveDownMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("moveDownMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Move Down").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunAsMenu extends JavaMenuNodeBase
	{

		
			private ExampleVaadin ExampleVaadin;
						public RunAsMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ExampleVaadin = new ExampleVaadin(this, applicationModel);

			setDisplayName("RunAsMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run As").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ExampleVaadin ExampleVaadin() { return ExampleVaadin; }
		
			public class ExampleVaadin extends JavaMenuNodeBase
	{

		
								public ExampleVaadin(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExampleVaadin");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Example Vaadin").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class treeTreeView1 extends JavaTreeViewNodeBase
	{

		
								public treeTreeView1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree1");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newWindow extends JavaWindowNodeBase
	{

		
			private wizardsEditor wizardsEditor;
	private nextButton nextButton;
						public newWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					wizardsEditor = new wizardsEditor(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
			
			setDisplayName("New");
		}
				public newWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					wizardsEditor = new wizardsEditor(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);

			setDisplayName("New");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public wizardsEditor wizardsEditor() { return wizardsEditor; }
		public nextButton nextButton() { return nextButton; }
		
			public class wizardsEditor extends JavaEditorNodeBase
	{

		
								public wizardsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nextButton extends JavaButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class shellWindow extends JavaWindowNodeBase
	{

		
			private projectBasenameEditor projectBasenameEditor;
	private compositeUiObject compositeUiObject;
	private modelTypeList modelTypeList;
						public shellWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					projectBasenameEditor = new projectBasenameEditor(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		modelTypeList = new modelTypeList(this, applicationModel);
			
			setDisplayName("Shell");
		}
				public shellWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					projectBasenameEditor = new projectBasenameEditor(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		modelTypeList = new modelTypeList(this, applicationModel);

			setDisplayName("Shell");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().nativeClass("org.eclipse.swt.widgets.Shell").title("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public projectBasenameEditor projectBasenameEditor() { return projectBasenameEditor; }
		public compositeUiObject compositeUiObject() { return compositeUiObject; }
		public modelTypeList modelTypeList() { return modelTypeList; }
		
			public class projectBasenameEditor extends JavaEditorNodeBase
	{

		
								public projectBasenameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project basename:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project basename:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class compositeUiObject extends JavaUiObjectNodeBase
	{

		
								public compositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class modelTypeList extends JavaListNodeBase
	{

		
								public modelTypeList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("model Type");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Model type:").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class compositeUiObject1 extends JavaUiObjectNodeBase
	{

		
								public compositeUiObject1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite1");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(28).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class compositeUiObject2 extends JavaUiObjectNodeBase
	{

		
								public compositeUiObject2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite2");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(30).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class formTextUiObject extends JavaUiObjectNodeBase
	{

		
								public formTextUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FormText");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.ui.forms.widgets.FormText").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class enterAllBasicServiceInformationHereEditor extends JavaEditorNodeBase
	{

		
								public enterAllBasicServiceInformationHereEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enter all basic service information here");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Enter all basic service information here").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class packageEditor extends JavaEditorNodeBase
	{

		
								public packageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class toolBar1 extends JavaToolBarNodeBase
	{

		
								public toolBar1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar1");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class compositeUiObject3 extends JavaUiObjectNodeBase
	{

		
								public compositeUiObject3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite3");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(24).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class compositeUiObject4 extends JavaUiObjectNodeBase
	{

		
								public compositeUiObject4(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite4");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(29).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class scrolledFormUiObject extends JavaUiObjectNodeBase
	{

		
								public scrolledFormUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ScrolledForm");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.ui.forms.widgets.ScrolledForm").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cTabFolderTabControl1 extends JavaTabControlNodeBase
	{

		
								public cTabFolderTabControl1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CTabFolder1");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_UNK__Y_SMALL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class layoutCompositeUiObject extends JavaUiObjectNodeBase
	{

		
								public layoutCompositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LayoutComposite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(26).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nameEditor extends JavaEditorNodeBase
	{

		
								public nameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class layoutCompositeUiObject1 extends JavaUiObjectNodeBase
	{

		
								public layoutCompositeUiObject1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LayoutComposite1");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(30).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class layoutCompositeUiObject2 extends JavaUiObjectNodeBase
	{

		
								public layoutCompositeUiObject2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LayoutComposite2");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(32).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class donTShowThisWarningAgainCheckBox extends JavaCheckBoxNodeBase
	{

		
								public donTShowThisWarningAgainCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't show this warning again.");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class saveResourceWindow extends JavaWindowNodeBase
	{

		
			private donTSaveButton donTSaveButton;
						public saveResourceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					donTSaveButton = new donTSaveButton(this, applicationModel);
			
			setDisplayName("Save Resource");
		}
				public saveResourceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					donTSaveButton = new donTSaveButton(this, applicationModel);

			setDisplayName("Save Resource");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Save Resource").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public donTSaveButton donTSaveButton() { return donTSaveButton; }
		
			public class donTSaveButton extends JavaButtonNodeBase
	{

		
								public donTSaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't Save");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Don't Save").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class automaticMeeclipseWorkspaceSettingsWindow extends JavaWindowNodeBase
	{

		
			private oKButton oKButton;
						public automaticMeeclipseWorkspaceSettingsWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Automatic meeclipse workspace settings");
		}
				public automaticMeeclipseWorkspaceSettingsWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);

			setDisplayName("Automatic meeclipse workspace settings");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Automatic meeclipse workspace settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		
			public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class innoWakeLauncherWindow extends JavaWindowNodeBase
	{

		
			private cancelButton cancelButton;
						public innoWakeLauncherWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					cancelButton = new cancelButton(this, applicationModel);
			
			setDisplayName("innoWake Launcher");
		}
				public innoWakeLauncherWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("innoWake Launcher");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("innoWake Launcher").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public cancelButton cancelButton() { return cancelButton; }
		
			public class cancelButton extends JavaButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class TreeNodeInspectorTabControl extends JavaTabControlNodeBase
	{

		
			private TreeNodeInspectorView TreeNodeInspectorView;
						public TreeNodeInspectorTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TreeNodeInspectorView = new TreeNodeInspectorView(this, applicationModel);

			setDisplayName("Tree Node Inspector Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_SMALL__Y_BIG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TreeNodeInspectorView TreeNodeInspectorView() { return TreeNodeInspectorView; }
		
			public class TreeNodeInspectorView extends JavaTreeViewNodeBase
	{

		
								public TreeNodeInspectorView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree Node Inspector View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PropertiesForMaxensoExampleVaadinWindow extends JavaWindowNodeBase
	{

		
			private LocationEditor LocationEditor;
	private CancelButton CancelButton;
						public PropertiesForMaxensoExampleVaadinWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					LocationEditor = new LocationEditor(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("PropertiesForMaxensoExampleVaadinWindow");
		}
				public PropertiesForMaxensoExampleVaadinWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					LocationEditor = new LocationEditor(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("PropertiesForMaxensoExampleVaadinWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Properties for MaxensoExample-vaadin").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public LocationEditor LocationEditor() { return LocationEditor; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class LocationEditor extends JavaEditorNodeBase
	{

		
								public LocationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Location");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Location:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PropertiesWindow extends JavaWindowNodeBase
	{

		
			private LocationEditor LocationEditor;
	private CancelButton CancelButton;
	private PropertiesTreeView PropertiesTreeView;
	private NaturalProjectPropertiesScreen NaturalProjectPropertiesScreen;
	private SelectTargetWindow SelectTargetWindow;
	private ApplyAndCloseButton ApplyAndCloseButton;
	private CobolProjectPropertiesScreen CobolProjectPropertiesScreen;
						public PropertiesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					LocationEditor = new LocationEditor(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		PropertiesTreeView = new PropertiesTreeView(this, applicationModel);
		NaturalProjectPropertiesScreen = new NaturalProjectPropertiesScreen(this, applicationModel);
		SelectTargetWindow = new SelectTargetWindow(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		CobolProjectPropertiesScreen = new CobolProjectPropertiesScreen(this, applicationModel);
			
			setDisplayName("PropertiesWindow");
		}
				public PropertiesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					LocationEditor = new LocationEditor(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		PropertiesTreeView = new PropertiesTreeView(this, applicationModel);
		NaturalProjectPropertiesScreen = new NaturalProjectPropertiesScreen(this, applicationModel);
		SelectTargetWindow = new SelectTargetWindow(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		CobolProjectPropertiesScreen = new CobolProjectPropertiesScreen(this, applicationModel);

			setDisplayName("PropertiesWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty("Properties for .*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public LocationEditor LocationEditor() { return LocationEditor; }
		public CancelButton CancelButton() { return CancelButton; }
		public PropertiesTreeView PropertiesTreeView() { return PropertiesTreeView; }
		public NaturalProjectPropertiesScreen NaturalProjectPropertiesScreen() { return NaturalProjectPropertiesScreen; }
		public SelectTargetWindow SelectTargetWindow() { return SelectTargetWindow; }
		public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public CobolProjectPropertiesScreen CobolProjectPropertiesScreen() { return CobolProjectPropertiesScreen; }
		
			public class LocationEditor extends JavaEditorNodeBase
	{

		
								public LocationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Location");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Location:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PropertiesTreeView extends JavaTreeViewNodeBase
	{

		
								public PropertiesTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Properties Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalProjectPropertiesScreen extends JavaUiObjectNodeBase
	{

		
			private SelectTargetButton SelectTargetButton;
						public NaturalProjectPropertiesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectTargetButton = new SelectTargetButton(this, applicationModel);

			setDisplayName("Natural Project Properties Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectTargetButton SelectTargetButton() { return SelectTargetButton; }
		
			public class SelectTargetButton extends JavaButtonNodeBase
	{

		
								public SelectTargetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Target");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("Select...").label("Select...").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SelectTargetWindow extends JavaWindowNodeBase
	{

		
			private SelectTargetTable SelectTargetTable;
	private OKButton OKButton;
	private CancelButton CancelButton;
						public SelectTargetWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SelectTargetTable = new SelectTargetTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Select Target");
		}
				public SelectTargetWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectTargetTable = new SelectTargetTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Select Target");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Select target").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectTargetTable SelectTargetTable() { return SelectTargetTable; }
		public OKButton OKButton() { return OKButton; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class SelectTargetTable extends JavaTableNodeBase
	{

		
								public SelectTargetTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Target Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ApplyAndCloseButton extends JavaButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply and Close");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolProjectPropertiesScreen extends JavaUiObjectNodeBase
	{

		
			private AlsoIncludeMapsViaCOPYCommandCheckBox AlsoIncludeMapsViaCOPYCommandCheckBox;
	private SelectTargetButton SelectTargetButton;
						public CobolProjectPropertiesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AlsoIncludeMapsViaCOPYCommandCheckBox = new AlsoIncludeMapsViaCOPYCommandCheckBox(this, applicationModel);
		SelectTargetButton = new SelectTargetButton(this, applicationModel);

			setDisplayName("Cobol Project Properties Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AlsoIncludeMapsViaCOPYCommandCheckBox AlsoIncludeMapsViaCOPYCommandCheckBox() { return AlsoIncludeMapsViaCOPYCommandCheckBox; }
		public SelectTargetButton SelectTargetButton() { return SelectTargetButton; }
		
			public class AlsoIncludeMapsViaCOPYCommandCheckBox extends JavaCheckBoxNodeBase
	{

		
								public AlsoIncludeMapsViaCOPYCommandCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Also include maps via COPY command");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Also include maps via COPY command (in addition to copybooks)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectTargetButton extends JavaButtonNodeBase
	{

		
								public SelectTargetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Target");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("Select...").label("Select...").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class ProgressInformationWindow extends JavaWindowNodeBase
	{

		
			private LocationEditor LocationEditor;
	private CancelButton CancelButton;
						public ProgressInformationWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					LocationEditor = new LocationEditor(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("ProgressInformation");
		}
				public ProgressInformationWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					LocationEditor = new LocationEditor(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("ProgressInformation");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Progress Information").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public LocationEditor LocationEditor() { return LocationEditor; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class LocationEditor extends JavaEditorNodeBase
	{

		
								public LocationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Location");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Location:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RunConfigurationWindow extends JavaWindowNodeBase
	{

		
			private RunConfigurationTreeView RunConfigurationTreeView;
	private RunConfigurationTabControl RunConfigurationTabControl;
	private RunButton RunButton;
						public RunConfigurationWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					RunConfigurationTreeView = new RunConfigurationTreeView(this, applicationModel);
		RunConfigurationTabControl = new RunConfigurationTabControl(this, applicationModel);
		RunButton = new RunButton(this, applicationModel);
			
			setDisplayName("Run Configuration");
		}
				public RunConfigurationWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					RunConfigurationTreeView = new RunConfigurationTreeView(this, applicationModel);
		RunConfigurationTabControl = new RunConfigurationTabControl(this, applicationModel);
		RunButton = new RunButton(this, applicationModel);

			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Run Configurations").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public RunConfigurationTreeView RunConfigurationTreeView() { return RunConfigurationTreeView; }
		public RunConfigurationTabControl RunConfigurationTabControl() { return RunConfigurationTabControl; }
		public RunButton RunButton() { return RunButton; }
		
			public class RunConfigurationTreeView extends JavaTreeViewNodeBase
	{

		
								public RunConfigurationTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration TreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationTabControl extends JavaTabControlNodeBase
	{

		
			private VmArgumentsEditor VmArgumentsEditor;
						public RunConfigurationTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					VmArgumentsEditor = new VmArgumentsEditor(this, applicationModel);

			setDisplayName("Run Configuration Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public VmArgumentsEditor VmArgumentsEditor() { return VmArgumentsEditor; }
		
			public class VmArgumentsEditor extends JavaEditorNodeBase
	{

		
								public VmArgumentsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VM arguments");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RunButton extends JavaButtonNodeBase
	{

		
								public RunButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Run").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class saveAndLaunchWindow extends JavaWindowNodeBase
	{

		
			private okButton okButton;
						public saveAndLaunchWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					okButton = new okButton(this, applicationModel);
			
			setDisplayName("Save and Launch");
		}
				public saveAndLaunchWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					okButton = new okButton(this, applicationModel);

			setDisplayName("Save and Launch");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Save and Launch").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public okButton okButton() { return okButton; }
		
			public class okButton extends JavaButtonNodeBase
	{

		
								public okButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PackageExplorerTabControl extends JavaTabControlNodeBase
	{

		
			private PackageExplorerTreeView PackageExplorerTreeView;
						public PackageExplorerTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageExplorerTreeView = new PackageExplorerTreeView(this, applicationModel);

			setDisplayName("Package Explorer");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageExplorerTreeView PackageExplorerTreeView() { return PackageExplorerTreeView; }
		
			public class PackageExplorerTreeView extends JavaTreeViewNodeBase
	{

		
			private NewMenu NewMenu;
	private PropertiesMenu PropertiesMenu;
	private DeleteMenu DeleteMenu;
						public PackageExplorerTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewMenu = new NewMenu(this, applicationModel);
		PropertiesMenu = new PropertiesMenu(this, applicationModel);
		DeleteMenu = new DeleteMenu(this, applicationModel);

			setDisplayName("Package Explorer");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewMenu NewMenu() { return NewMenu; }
		public PropertiesMenu PropertiesMenu() { return PropertiesMenu; }
		public DeleteMenu DeleteMenu() { return DeleteMenu; }
		
			public class NewMenu extends JavaMenuNodeBase
	{

		
			private FolderMenu FolderMenu;
	private OtherMenu OtherMenu;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FolderMenu = new FolderMenu(this, applicationModel);
		OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("New");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("New").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FolderMenu FolderMenu() { return FolderMenu; }
		public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class FolderMenu extends JavaMenuNodeBase
	{

		
								public FolderMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Other");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PropertiesMenu extends JavaMenuNodeBase
	{

		
								public PropertiesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Properties");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Properties").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteMenu extends JavaMenuNodeBase
	{

		
								public DeleteMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Delete").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewFolderWindow extends JavaWindowNodeBase
	{

		
			private FolderNameEditor FolderNameEditor;
	private FinishButton FinishButton;
						public NewFolderWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FolderNameEditor = new FolderNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("New Folder");
		}
				public NewFolderWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FolderNameEditor = new FolderNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FolderNameEditor FolderNameEditor() { return FolderNameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class FolderNameEditor extends JavaEditorNodeBase
	{

		
								public FolderNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder Name");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Folder name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewNaturalObjectWindow extends JavaWindowNodeBase
	{

		
			private CreateANewNaturalObjectScreen CreateANewNaturalObjectScreen;
	private FinishButton FinishButton;
	private CreateANewNaturalMainprogramScreen CreateANewNaturalMainprogramScreen;
						public NewNaturalObjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CreateANewNaturalObjectScreen = new CreateANewNaturalObjectScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		CreateANewNaturalMainprogramScreen = new CreateANewNaturalMainprogramScreen(this, applicationModel);
			
			setDisplayName("New Natural Object");
		}
				public NewNaturalObjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateANewNaturalObjectScreen = new CreateANewNaturalObjectScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		CreateANewNaturalMainprogramScreen = new CreateANewNaturalMainprogramScreen(this, applicationModel);

			setDisplayName("New Natural Object");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Natural object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateANewNaturalObjectScreen CreateANewNaturalObjectScreen() { return CreateANewNaturalObjectScreen; }
		public FinishButton FinishButton() { return FinishButton; }
		public CreateANewNaturalMainprogramScreen CreateANewNaturalMainprogramScreen() { return CreateANewNaturalMainprogramScreen; }
		
			public class CreateANewNaturalObjectScreen extends JavaUiObjectNodeBase
	{

		
			private NSCCopycodeRadioButton NSCCopycodeRadioButton;
	private NextButton NextButton;
						public CreateANewNaturalObjectScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NSCCopycodeRadioButton = new NSCCopycodeRadioButton(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);

			setDisplayName("Create A New Natural Object Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NSCCopycodeRadioButton NSCCopycodeRadioButton() { return NSCCopycodeRadioButton; }
		public NextButton NextButton() { return NextButton; }
		
			public class NSCCopycodeRadioButton extends JavaRadioButtonNodeBase
	{

		
								public NSCCopycodeRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NSC (Copycode)");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("NSC (Copycode)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateANewNaturalMainprogramScreen extends JavaUiObjectNodeBase
	{

		
			private NameEditor NameEditor;
						public CreateANewNaturalMainprogramScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);

			setDisplayName("Create A New Natural Mainprogram Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewTargetWindow extends JavaWindowNodeBase
	{

		
			private AddANewTargetScreen AddANewTargetScreen;
	private ServerParametersScreen ServerParametersScreen;
	private FinishButton FinishButton;
	private ScriptFileWindow ScriptFileWindow;
						public NewTargetWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					AddANewTargetScreen = new AddANewTargetScreen(this, applicationModel);
		ServerParametersScreen = new ServerParametersScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		ScriptFileWindow = new ScriptFileWindow(this, applicationModel);
			
			setDisplayName("New Target");
		}
				public NewTargetWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddANewTargetScreen = new AddANewTargetScreen(this, applicationModel);
		ServerParametersScreen = new ServerParametersScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		ScriptFileWindow = new ScriptFileWindow(this, applicationModel);

			setDisplayName("New Target");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Target").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddANewTargetScreen AddANewTargetScreen() { return AddANewTargetScreen; }
		public ServerParametersScreen ServerParametersScreen() { return ServerParametersScreen; }
		public FinishButton FinishButton() { return FinishButton; }
		public ScriptFileWindow ScriptFileWindow() { return ScriptFileWindow; }
		
			public class AddANewTargetScreen extends JavaUiObjectNodeBase
	{

		
			private NameEditor NameEditor;
	private TargetTypeList TargetTypeList;
	private NextButton NextButton;
	private ServerTypeList ServerTypeList;
	private ScriptFileThreeDotsButton ScriptFileThreeDotsButton;
						public AddANewTargetScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		TargetTypeList = new TargetTypeList(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		ServerTypeList = new ServerTypeList(this, applicationModel);
		ScriptFileThreeDotsButton = new ScriptFileThreeDotsButton(this, applicationModel);

			setDisplayName("Add A New Target Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public TargetTypeList TargetTypeList() { return TargetTypeList; }
		public NextButton NextButton() { return NextButton; }
		public ServerTypeList ServerTypeList() { return ServerTypeList; }
		public ScriptFileThreeDotsButton ScriptFileThreeDotsButton() { return ScriptFileThreeDotsButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name*").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetTypeList extends JavaListNodeBase
	{

		
								public TargetTypeList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Target Type");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Target Type").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ServerTypeList extends JavaListNodeBase
	{

		
								public ServerTypeList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server Type");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Server Type").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ScriptFileThreeDotsButton extends JavaButtonNodeBase
	{

		
								public ScriptFileThreeDotsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Script File ...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("...").label("...").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ServerParametersScreen extends JavaUiObjectNodeBase
	{

		
			private HostEditor HostEditor;
	private PortNaturalEditor PortNaturalEditor;
	private PortCobolEditor PortCobolEditor;
						public ServerParametersScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					HostEditor = new HostEditor(this, applicationModel);
		PortNaturalEditor = new PortNaturalEditor(this, applicationModel);
		PortCobolEditor = new PortCobolEditor(this, applicationModel);

			setDisplayName("Server Parameters Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public HostEditor HostEditor() { return HostEditor; }
		public PortNaturalEditor PortNaturalEditor() { return PortNaturalEditor; }
		public PortCobolEditor PortCobolEditor() { return PortCobolEditor; }
		
			public class HostEditor extends JavaEditorNodeBase
	{

		
								public HostEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Host");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Host*").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PortNaturalEditor extends JavaEditorNodeBase
	{

		
								public PortNaturalEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Port*");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Port*").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PortCobolEditor extends JavaEditorNodeBase
	{

		
								public PortCobolEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Port");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Port").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ScriptFileWindow extends JavaWindowNodeBase
	{

		
			private EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor;
	private MatchingItemsTable MatchingItemsTable;
	private OKButton OKButton;
						public ScriptFileWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor = new EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor(this, applicationModel);
		MatchingItemsTable = new MatchingItemsTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Script File");
		}
				public ScriptFileWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor = new EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor(this, applicationModel);
		MatchingItemsTable = new MatchingItemsTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Script File");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Script File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor() { return EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor; }
		public MatchingItemsTable MatchingItemsTable() { return MatchingItemsTable; }
		public OKButton OKButton() { return OKButton; }
		
			public class EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor extends JavaEditorNodeBase
	{

		
								public EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enter resource name prefix, path prefix or pattern (?, * or camel case):");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Enter resource name prefix, path prefix or pattern (?, * or camel case):").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MatchingItemsTable extends JavaTableNodeBase
	{

		
								public MatchingItemsTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Matching Items");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class KeepTargetWindow extends JavaWindowNodeBase
	{

		
			private YesButton YesButton;
						public KeepTargetWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					YesButton = new YesButton(this, applicationModel);
			
			setDisplayName("Keep Target");
		}
				public KeepTargetWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					YesButton = new YesButton(this, applicationModel);

			setDisplayName("Keep Target");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Keep target").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public YesButton YesButton() { return YesButton; }
		
			public class YesButton extends JavaButtonNodeBase
	{

		
								public YesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SettingsChangedWindow extends JavaWindowNodeBase
	{

		
			private YesButton YesButton;
						public SettingsChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					YesButton = new YesButton(this, applicationModel);
			
			setDisplayName("Settings changed");
		}
				public SettingsChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					YesButton = new YesButton(this, applicationModel);

			setDisplayName("Settings changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Settings changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public YesButton YesButton() { return YesButton; }
		
			public class YesButton extends JavaButtonNodeBase
	{

		
								public YesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ConfirmRemoveWindow extends JavaWindowNodeBase
	{

		
			private YesButton YesButton;
	private NoButton NoButton;
						public ConfirmRemoveWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					YesButton = new YesButton(this, applicationModel);
		NoButton = new NoButton(this, applicationModel);
			
			setDisplayName("Confirm Remove");
		}
				public ConfirmRemoveWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					YesButton = new YesButton(this, applicationModel);
		NoButton = new NoButton(this, applicationModel);

			setDisplayName("Confirm Remove");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Confirm Remove").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public YesButton YesButton() { return YesButton; }
		public NoButton NoButton() { return NoButton; }
		
			public class YesButton extends JavaButtonNodeBase
	{

		
								public YesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoButton extends JavaButtonNodeBase
	{

		
								public NoButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("No");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("No").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SelectAWizardWindow extends JavaWindowNodeBase
	{

		
			private WizardEditor WizardEditor;
	private NextButton NextButton;
						public SelectAWizardWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					WizardEditor = new WizardEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
			
			setDisplayName("Select A Wizard");
		}
				public SelectAWizardWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardEditor = new WizardEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);

			setDisplayName("Select A Wizard");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Select a wizard").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardEditor WizardEditor() { return WizardEditor; }
		public NextButton NextButton() { return NextButton; }
		
			public class WizardEditor extends JavaEditorNodeBase
	{

		
								public WizardEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizard");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").tagName("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").tagName("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CTabFolderTabControl extends JavaTabControlNodeBase
	{

		
								public CTabFolderTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CTabFolder");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().origLogicalLocation("X_SMALL__Y_SMALL").tagName("CTabFolder").tabsCount(2).selectedTab("Tree Navigation").nativeClass("org.eclipse.swt.custom.CTabFolder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NavTabControlToolBar extends JavaToolBarNodeBase
	{

		
								public NavTabControlToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NavTabControlToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").tagName("ToolBar").index(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
	private CancelButton CancelButton;
						public DeleteWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Delete");
		}
				public DeleteWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Delete").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class maxensoWindow extends StdWindowNodeBase
	{

		
			private saveAsDialog saveAsDialog;
						public maxensoWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					saveAsDialog = new saveAsDialog(this, applicationModel);
			
			setDisplayName(" maxenso");
		}
				public maxensoWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					saveAsDialog = new saveAsDialog(this, applicationModel);

			setDisplayName(" maxenso");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.WindowDescription.Builder().childWindow(false).ownedWindow(false).windowClassRegExp("SWT_Window0").windowTitleRegExp(new RegExpProperty("(innoWake|maxenso)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public saveAsDialog saveAsDialog() { return saveAsDialog; }
		
			public class saveAsDialog extends StdDialogNodeBase
	{

		
			private SaveButton SaveButton;
						public saveAsDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SaveButton = new SaveButton(this, applicationModel);
			
			setDisplayName("Save as");
		}
				public saveAsDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SaveButton = new SaveButton(this, applicationModel);

			setDisplayName("Save as");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("Save As").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SaveButton SaveButton() { return SaveButton; }
		
			public class SaveButton extends StdButtonNodeBase
	{

		
								public SaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ButtonDescription.Builder().text("&Save").nativeClass("Button").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class googleChromeWindow extends StdWindowNodeBase
	{

		
			private chromeLegacyWindowUiObject chromeLegacyWindowUiObject;
	private intermediateD3DWindowUiObject intermediateD3DWindowUiObject;
						public googleChromeWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					chromeLegacyWindowUiObject = new chromeLegacyWindowUiObject(this, applicationModel);
		intermediateD3DWindowUiObject = new intermediateD3DWindowUiObject(this, applicationModel);
			
			setDisplayName(" Google Chrome");
		}
				public googleChromeWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					chromeLegacyWindowUiObject = new chromeLegacyWindowUiObject(this, applicationModel);
		intermediateD3DWindowUiObject = new intermediateD3DWindowUiObject(this, applicationModel);

			setDisplayName(" Google Chrome");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.WindowDescription.Builder().childWindow(false).ownedWindow(false).text("Vaadin Example - Google Chrome").windowClassRegExp("Chrome_WidgetWin_1").windowTitleRegExp(" Google Chrome").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public chromeLegacyWindowUiObject chromeLegacyWindowUiObject() { return chromeLegacyWindowUiObject; }
		public intermediateD3DWindowUiObject intermediateD3DWindowUiObject() { return intermediateD3DWindowUiObject; }
		
			public class chromeLegacyWindowUiObject extends StdUiObjectNodeBase
	{

		
								public chromeLegacyWindowUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Chrome Legacy Window");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.UiObjectDescription.Builder().windowClassRegExp("Chrome_RenderWidgetHostHWND").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class intermediateD3DWindowUiObject extends StdUiObjectNodeBase
	{

		
								public intermediateD3DWindowUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Intermediate D3D Window");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.UiObjectDescription.Builder().windowClassRegExp("Intermediate D3D Window").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class VaadinExamplePage extends WebPageNodeBase
	{

		
			private LogonButton LogonButton;
	private DialogFunctionsMenu DialogFunctionsMenu;
	private CallServiceMenu CallServiceMenu;
	private PersonDetails PersonDetails;
	private CallServiceMenu2 CallServiceMenu2;
	private IsnEditField IsnEditField;
	private LastnameEditField LastnameEditField;
	private FirstnameEditField FirstnameEditField;
	private CityEditField CityEditField;
	private BrowseSelectToMaintPopupMenu BrowseSelectToMaintPopupMenu;
	private ExampleBrowseSelectDialogPage ExampleBrowseSelectDialogPage;
	private ComponentManipulationMenu ComponentManipulationMenu;
	private ExampleComponentStyleMaintenancePage ExampleComponentStyleMaintenancePage;
	private LastnameInputField LastnameInputField;
	private LastnameTableHeader LastnameTableHeader;
	private FirstnameTableHeader FirstnameTableHeader;
	private CityTableHeader CityTableHeader;
	private LoadedEntriesAmount LoadedEntriesAmount;
	private TotalPageNumber TotalPageNumber;
						public VaadinExamplePage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					LogonButton = new LogonButton(this, applicationModel);
		DialogFunctionsMenu = new DialogFunctionsMenu(this, applicationModel);
		CallServiceMenu = new CallServiceMenu(this, applicationModel);
		PersonDetails = new PersonDetails(this, applicationModel);
		CallServiceMenu2 = new CallServiceMenu2(this, applicationModel);
		IsnEditField = new IsnEditField(this, applicationModel);
		LastnameEditField = new LastnameEditField(this, applicationModel);
		FirstnameEditField = new FirstnameEditField(this, applicationModel);
		CityEditField = new CityEditField(this, applicationModel);
		BrowseSelectToMaintPopupMenu = new BrowseSelectToMaintPopupMenu(this, applicationModel);
		ExampleBrowseSelectDialogPage = new ExampleBrowseSelectDialogPage(this, applicationModel);
		ComponentManipulationMenu = new ComponentManipulationMenu(this, applicationModel);
		ExampleComponentStyleMaintenancePage = new ExampleComponentStyleMaintenancePage(this, applicationModel);
		LastnameInputField = new LastnameInputField(this, applicationModel);
		LastnameTableHeader = new LastnameTableHeader(this, applicationModel);
		FirstnameTableHeader = new FirstnameTableHeader(this, applicationModel);
		CityTableHeader = new CityTableHeader(this, applicationModel);
		LoadedEntriesAmount = new LoadedEntriesAmount(this, applicationModel);
		TotalPageNumber = new TotalPageNumber(this, applicationModel);

			setDisplayName("Vaadin Example");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public LogonButton LogonButton() { return LogonButton; }
		public DialogFunctionsMenu DialogFunctionsMenu() { return DialogFunctionsMenu; }
		public CallServiceMenu CallServiceMenu() { return CallServiceMenu; }
		public PersonDetails PersonDetails() { return PersonDetails; }
		public CallServiceMenu2 CallServiceMenu2() { return CallServiceMenu2; }
		public IsnEditField IsnEditField() { return IsnEditField; }
		public LastnameEditField LastnameEditField() { return LastnameEditField; }
		public FirstnameEditField FirstnameEditField() { return FirstnameEditField; }
		public CityEditField CityEditField() { return CityEditField; }
		public BrowseSelectToMaintPopupMenu BrowseSelectToMaintPopupMenu() { return BrowseSelectToMaintPopupMenu; }
		public ExampleBrowseSelectDialogPage ExampleBrowseSelectDialogPage() { return ExampleBrowseSelectDialogPage; }
		public ComponentManipulationMenu ComponentManipulationMenu() { return ComponentManipulationMenu; }
		public ExampleComponentStyleMaintenancePage ExampleComponentStyleMaintenancePage() { return ExampleComponentStyleMaintenancePage; }
		public LastnameInputField LastnameInputField() { return LastnameInputField; }
		public LastnameTableHeader LastnameTableHeader() { return LastnameTableHeader; }
		public FirstnameTableHeader FirstnameTableHeader() { return FirstnameTableHeader; }
		public CityTableHeader CityTableHeader() { return CityTableHeader; }
		public LoadedEntriesAmount LoadedEntriesAmount() { return LoadedEntriesAmount; }
		public TotalPageNumber TotalPageNumber() { return TotalPageNumber; }
		
			public class LogonButton extends WebWebElementNodeBase
	{

		
								public LogonButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Logon Button");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Logon").tagName("SPAN").className("v-button-wrap").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DialogFunctionsMenu extends WebWebElementNodeBase
	{

		
								public DialogFunctionsMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Dialog Functions Menu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Dialog Functions").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CallServiceMenu extends WebWebElementNodeBase
	{

		
								public CallServiceMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("callService Menu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("callService(...)").tagName("DIV").className("v-label v-widget v-label-undef-w").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PersonDetails extends WebWebElementNodeBase
	{

		
								public PersonDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Person Details");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Person detailsIsnLastnameFirstnameCity").tagName("FIELDSET").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CallServiceMenu2 extends WebWebElementNodeBase
	{

		
								public CallServiceMenu2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Call Service Menu2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Call Service").tagName("DIV").className("v-label v-widget v-label-undef-w").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IsnEditField extends WebEditFieldNodeBase
	{

		
								public IsnEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Isn");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LastnameEditField extends WebEditFieldNodeBase
	{

		
								public LastnameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Lastname");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").placeholder("").accessibilityName("").value("Adams").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstnameEditField extends WebEditFieldNodeBase
	{

		
								public FirstnameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Firstname");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CityEditField extends WebEditFieldNodeBase
	{

		
								public CityEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("City");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BrowseSelectToMaintPopupMenu extends WebWebElementNodeBase
	{

		
								public BrowseSelectToMaintPopupMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Browse-Select to Maint popup Menu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Browse-Select to Maint popup").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExampleBrowseSelectDialogPage extends WebPageNodeBase
	{

		
			private LastnameEditField LastnameEditField;
	private LastnameTableHeader LastnameTableHeader;
	private FirstnameTableHeader FirstnameTableHeader;
	private CityTableHeader CityTableHeader;
	private LoadedEntriesAmount LoadedEntriesAmount;
	private TotalPageNumber TotalPageNumber;
	private SearchMenu SearchMenu;
	private TableEntry0 TableEntry0;
	private TableEntry3 TableEntry3;
	private TableEntry6 TableEntry6;
	private SelectMenu SelectMenu;
	private ShowPersonWindow ShowPersonWindow;
	private LastnamePopupEditField LastnamePopupEditField;
	private FirstnamePopupEditField FirstnamePopupEditField;
	private CityPopupEditField CityPopupEditField;
	private CancelButton CancelButton;
						public ExampleBrowseSelectDialogPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					LastnameEditField = new LastnameEditField(this, applicationModel);
		LastnameTableHeader = new LastnameTableHeader(this, applicationModel);
		FirstnameTableHeader = new FirstnameTableHeader(this, applicationModel);
		CityTableHeader = new CityTableHeader(this, applicationModel);
		LoadedEntriesAmount = new LoadedEntriesAmount(this, applicationModel);
		TotalPageNumber = new TotalPageNumber(this, applicationModel);
		SearchMenu = new SearchMenu(this, applicationModel);
		TableEntry0 = new TableEntry0(this, applicationModel);
		TableEntry3 = new TableEntry3(this, applicationModel);
		TableEntry6 = new TableEntry6(this, applicationModel);
		SelectMenu = new SelectMenu(this, applicationModel);
		ShowPersonWindow = new ShowPersonWindow(this, applicationModel);
		LastnamePopupEditField = new LastnamePopupEditField(this, applicationModel);
		FirstnamePopupEditField = new FirstnamePopupEditField(this, applicationModel);
		CityPopupEditField = new CityPopupEditField(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Example Browse-Select Dialog");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public LastnameEditField LastnameEditField() { return LastnameEditField; }
		public LastnameTableHeader LastnameTableHeader() { return LastnameTableHeader; }
		public FirstnameTableHeader FirstnameTableHeader() { return FirstnameTableHeader; }
		public CityTableHeader CityTableHeader() { return CityTableHeader; }
		public LoadedEntriesAmount LoadedEntriesAmount() { return LoadedEntriesAmount; }
		public TotalPageNumber TotalPageNumber() { return TotalPageNumber; }
		public SearchMenu SearchMenu() { return SearchMenu; }
		public TableEntry0 TableEntry0() { return TableEntry0; }
		public TableEntry3 TableEntry3() { return TableEntry3; }
		public TableEntry6 TableEntry6() { return TableEntry6; }
		public SelectMenu SelectMenu() { return SelectMenu; }
		public ShowPersonWindow ShowPersonWindow() { return ShowPersonWindow; }
		public LastnamePopupEditField LastnamePopupEditField() { return LastnamePopupEditField; }
		public FirstnamePopupEditField FirstnamePopupEditField() { return FirstnamePopupEditField; }
		public CityPopupEditField CityPopupEditField() { return CityPopupEditField; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class LastnameEditField extends WebEditFieldNodeBase
	{

		
								public LastnameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Lastname");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").placeholder("").accessibilityName("Lastname").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LastnameTableHeader extends WebWebElementNodeBase
	{

		
								public LastnameTableHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Lastname Table Header");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Lastname").tagName("TD").className("v-table-header-cell v-table-header-sortable").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstnameTableHeader extends WebWebElementNodeBase
	{

		
								public FirstnameTableHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Firstname Table Header");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Firstname").tagName("TD").className("v-table-header-cell v-table-header-sortable").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CityTableHeader extends WebWebElementNodeBase
	{

		
								public CityTableHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("City Table Header");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("City").tagName("TD").className("v-table-header-cell v-table-header-sortable").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoadedEntriesAmount extends WebWebElementNodeBase
	{

		
								public LoadedEntriesAmount(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Loaded Entries Amount");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty(".*v-label-pagedtable-label-amount.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TotalPageNumber extends WebWebElementNodeBase
	{

		
								public TotalPageNumber(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Total Page Number");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty(".*v-label-pagedtable-total.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchMenu extends WebWebElementNodeBase
	{

		
								public SearchMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Menu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Search").tagName("DIV").className("v-label v-widget v-label-undef-w").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TableEntry0 extends WebWebElementNodeBase
	{

		
			private InputEditField InputEditField;
						public TableEntry0(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					InputEditField = new InputEditField(this, applicationModel);

			setDisplayName("Table Entry 0");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").className("v-table-cell-content").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public InputEditField InputEditField() { return InputEditField; }
		
			public class InputEditField extends WebEditFieldNodeBase
	{

		
								public InputEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Input");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class TableEntry3 extends WebWebElementNodeBase
	{

		
			private InputEditField InputEditField;
						public TableEntry3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					InputEditField = new InputEditField(this, applicationModel);

			setDisplayName("Table Entry 3");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").className("v-table-cell-content").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public InputEditField InputEditField() { return InputEditField; }
		
			public class InputEditField extends WebEditFieldNodeBase
	{

		
								public InputEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Input");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class TableEntry6 extends WebWebElementNodeBase
	{

		
			private InputEditField InputEditField;
						public TableEntry6(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					InputEditField = new InputEditField(this, applicationModel);

			setDisplayName("Table Entry 6");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").className("v-table-cell-content").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public InputEditField InputEditField() { return InputEditField; }
		
			public class InputEditField extends WebEditFieldNodeBase
	{

		
								public InputEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Input");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SelectMenu extends WebWebElementNodeBase
	{

		
								public SelectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Menu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Select").tagName("DIV").className("v-label v-widget v-label-undef-w").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowPersonWindow extends WebWebElementNodeBase
	{

		
								public ShowPersonWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show Person Window");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Show person").tagName("DIV").className("v-window-header").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LastnamePopupEditField extends WebEditFieldNodeBase
	{

		
								public LastnamePopupEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Lastname Popup");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").accessibilityName("Lastname").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstnamePopupEditField extends WebEditFieldNodeBase
	{

		
								public FirstnamePopupEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Firstname Popup");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").accessibilityName("Firstname").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CityPopupEditField extends WebEditFieldNodeBase
	{

		
								public CityPopupEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("City Popup");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").accessibilityName("City").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends WebWebElementNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel Button");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Cancel").tagName("SPAN").className("v-button-wrap").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ComponentManipulationMenu extends WebWebElementNodeBase
	{

		
								public ComponentManipulationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Component Manipulation Menu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Component Manipulation").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExampleComponentStyleMaintenancePage extends WebPageNodeBase
	{

		
			private StyleMaintMenu StyleMaintMenu;
	private Field1EditField Field1EditField;
	private Combo1 Combo1;
	private Label1 Label1;
	private Checkbox1 Checkbox1;
	private Combo1Value Combo1Value;
						public ExampleComponentStyleMaintenancePage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					StyleMaintMenu = new StyleMaintMenu(this, applicationModel);
		Field1EditField = new Field1EditField(this, applicationModel);
		Combo1 = new Combo1(this, applicationModel);
		Label1 = new Label1(this, applicationModel);
		Checkbox1 = new Checkbox1(this, applicationModel);
		Combo1Value = new Combo1Value(this, applicationModel);

			setDisplayName("Example Component Style Maintenance");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public StyleMaintMenu StyleMaintMenu() { return StyleMaintMenu; }
		public Field1EditField Field1EditField() { return Field1EditField; }
		public Combo1 Combo1() { return Combo1; }
		public Label1 Label1() { return Label1; }
		public Checkbox1 Checkbox1() { return Checkbox1; }
		public Combo1Value Combo1Value() { return Combo1Value; }
		
			public class StyleMaintMenu extends WebWebElementNodeBase
	{

		
								public StyleMaintMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Style Maint Menu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Style Maint").tagName("DIV").className("v-label v-widget v-label-undef-w").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Field1EditField extends WebEditFieldNodeBase
	{

		
								public Field1EditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Field 1");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").accessibilityName("Field 1").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Combo1 extends WebWebElementNodeBase
	{

		
								public Combo1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Combo 1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-filterselect-button").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Label1 extends WebEditFieldNodeBase
	{

		
								public Label1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Label 1");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").readOnly(true).index(18).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Checkbox1 extends WebCheckBoxNodeBase
	{

		
								public Checkbox1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Checkbox 1");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().index(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Combo1Value extends WebEditFieldNodeBase
	{

		
								public Combo1Value(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Combo 1 Value");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").index(17).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class LastnameInputField extends WebEditFieldNodeBase
	{

		
								public LastnameInputField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LastnameInputField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").name("WebEdit").tagName("INPUT").placeholder("").accessibilityName("Lastname").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LastnameTableHeader extends WebWebElementNodeBase
	{

		
								public LastnameTableHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LastnameTableHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Lastname").tagName("TD").className("v-table-header-cell v-table-header-sortable").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FirstnameTableHeader extends WebWebElementNodeBase
	{

		
								public FirstnameTableHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FirstnameTableHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Firstname").tagName("TD").className("v-table-header-cell v-table-header-sortable").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CityTableHeader extends WebWebElementNodeBase
	{

		
								public CityTableHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CityTableHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("City").tagName("TD").className("v-table-header-cell v-table-header-sortable").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoadedEntriesAmount extends WebWebElementNodeBase
	{

		
								public LoadedEntriesAmount(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoadedEntriesAmount");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty(".*v-label-pagedtable-label-amount.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TotalPageNumber extends WebWebElementNodeBase
	{

		
								public TotalPageNumber(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TotalPageNumber");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty(".*v-label-pagedtable-total.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}


			
	public abstract class JavaWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Window, com.hp.lft.sdk.java.WindowDescription> implements com.hp.lft.sdk.java.Window
	{
		public JavaWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public JavaWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaUiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.UiObject, com.hp.lft.sdk.java.UiObjectDescription> implements com.hp.lft.sdk.java.UiObject
	{		
		public JavaUiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaEditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Editor, com.hp.lft.sdk.java.EditorDescription> implements com.hp.lft.sdk.java.Editor
	{		
		public JavaEditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void clickLink(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().clickLink(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public void delete(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().delete(arg0, arg1, arg2, arg3);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void insert(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().insert(arg0, arg1, arg2);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void replace(java.lang.String arg0, int arg1, int arg2, int arg3, int arg4) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().replace(arg0, arg1, arg2, arg3, arg4);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setCursorPosition(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Button, com.hp.lft.sdk.java.ButtonDescription> implements com.hp.lft.sdk.java.Button
	{		
		public JavaButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTreeViewNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TreeView, com.hp.lft.sdk.java.TreeViewDescription> implements com.hp.lft.sdk.java.TreeView
	{		
		public JavaTreeViewNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateNode(com.hp.lft.sdk.java.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public java.lang.String buildNodePath(java.lang.Object... arg0)  
		{
			return getConcrete().buildNodePath(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeader(arg0);
		}

		@Override 
		public int getColumnsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnsCount();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public com.hp.lft.sdk.java.TreeViewNode getNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNode(arg0);
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TreeViewNode> getSelectedNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedNodes();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public int getVisibleNodesCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleNodesCount();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.TreeViewNode arg0, com.hp.lft.sdk.java.TreeViewNode arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTabControlNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TabControl, com.hp.lft.sdk.java.TabControlDescription> implements com.hp.lft.sdk.java.TabControl
	{		
		public JavaTabControlNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public void close(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getOrigLogicalLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOrigLogicalLocation();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.lang.String getSelectedTab() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedTab();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public int getTabsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTabsCount();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaMenuNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Menu, com.hp.lft.sdk.java.MenuDescription> implements com.hp.lft.sdk.java.Menu
	{		
		public JavaMenuNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public com.hp.lft.sdk.java.Menu getSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenu(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.Menu> getSubMenus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenus();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select();
		}

		@Override 
		public void selectSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectSubMenu(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaToolBarNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.ToolBar, com.hp.lft.sdk.java.ToolBarDescription> implements com.hp.lft.sdk.java.ToolBar
	{		
		public JavaToolBarNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ToolBarButton getButton(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButton(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtons();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getSelectedButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedButtons();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.CheckBox, com.hp.lft.sdk.java.CheckBoxDescription> implements com.hp.lft.sdk.java.CheckBox
	{		
		public JavaCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.CheckedState getState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getState();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setState(com.hp.lft.sdk.CheckedState arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setState(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaListNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.List, com.hp.lft.sdk.java.ListDescription> implements com.hp.lft.sdk.java.List
	{		
		public JavaListNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(com.hp.lft.sdk.java.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.ListItem arg0, com.hp.lft.sdk.java.ListItem arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Table, com.hp.lft.sdk.java.TableDescription> implements com.hp.lft.sdk.java.Table
	{		
		public JavaTableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateColumn(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateColumn(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateRow(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void deselectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.TableCell getCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCell(arg0, arg1);
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void selectCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCellsRange(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectCellsRange(int arg0, java.lang.String arg1, int arg2, java.lang.String arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void selectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaLabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Label, com.hp.lft.sdk.java.LabelDescription> implements com.hp.lft.sdk.java.Label
	{		
		public JavaLabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaRadioButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.RadioButton, com.hp.lft.sdk.java.RadioButtonDescription> implements com.hp.lft.sdk.java.RadioButton
	{		
		public JavaRadioButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void set() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set();
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
		
	public abstract class WebPageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Page, com.hp.lft.sdk.web.PageDescription> implements com.hp.lft.sdk.web.Page
	{		
		public WebPageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class WebWebElementNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.WebElement, com.hp.lft.sdk.web.WebElementDescription> implements com.hp.lft.sdk.web.WebElement
	{		
		public WebWebElementNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.EditField, com.hp.lft.sdk.web.EditFieldDescription> implements com.hp.lft.sdk.web.EditField
	{		
		public WebEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMaxCharsInLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxCharsInLine();
		}

		@Override 
		public int getMaxLength() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxLength();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getPattern() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPattern();
		}

		@Override 
		public java.lang.String getPlaceholder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPlaceholder();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public int getRowsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRowsCount();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isRequired() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRequired();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setValue(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setValue(arg0);
		}

		@Override 
		public void submit() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().submit();
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.CheckBox, com.hp.lft.sdk.web.CheckBoxDescription> implements com.hp.lft.sdk.web.CheckBox
	{		
		public WebCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
		
	public abstract class StdWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.stdwin.Window, com.hp.lft.sdk.stdwin.WindowDescription> implements com.hp.lft.sdk.stdwin.Window
	{
		public StdWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public StdWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdDialogNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.stdwin.Dialog, com.hp.lft.sdk.stdwin.DialogDescription> implements com.hp.lft.sdk.stdwin.Dialog
	{
		public StdDialogNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public StdDialogNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Button, com.hp.lft.sdk.stdwin.ButtonDescription> implements com.hp.lft.sdk.stdwin.Button
	{		
		public StdButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdUiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.UiObject, com.hp.lft.sdk.stdwin.UiObjectDescription> implements com.hp.lft.sdk.stdwin.UiObject
	{		
		public StdUiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public com.hp.lft.sdk.ScrollInfo getHorizontalScroll() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHorizontalScroll();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.ScrollInfo getVerticalScroll() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVerticalScroll();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.VerticalScrollPosition getVerticalScrollPosition() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVerticalScrollPosition();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1, arg2);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
