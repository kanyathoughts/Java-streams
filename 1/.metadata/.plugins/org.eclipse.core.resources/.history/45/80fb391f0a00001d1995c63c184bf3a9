
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package appmodels;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.web.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.53
public class MiningDashboardModel extends AppModelBase {		private InnoWakeMiningPage InnoWakeMiningPage;
	private orientDBStudioPage orientDBStudioPage;
	private SwaggerUI SwaggerUI;
	private FeatureConsolePage FeatureConsolePage;
	private SaveAsDialog SaveAsDialog;
	private KeycloakPage KeycloakPage;

	public MiningDashboardModel() throws GeneralLeanFtException 
	{
		setName("MiningDashboardModel");
			SaveAsDialog = new SaveAsDialog(this);
		rebuildDescriptions();
	}
	
	public MiningDashboardModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("MiningDashboardModel");
				InnoWakeMiningPage = new InnoWakeMiningPage(contextTestObject, this);
		orientDBStudioPage = new orientDBStudioPage(contextTestObject, this);
		SwaggerUI = new SwaggerUI(contextTestObject, this);
		FeatureConsolePage = new FeatureConsolePage(contextTestObject, this);
		SaveAsDialog = new SaveAsDialog(contextTestObject, this);
		KeycloakPage = new KeycloakPage(contextTestObject, this);
		rebuildDescriptions();
	}	

			public InnoWakeMiningPage InnoWakeMiningPage() { return InnoWakeMiningPage; }
		public orientDBStudioPage orientDBStudioPage() { return orientDBStudioPage; }
		public SwaggerUI SwaggerUI() { return SwaggerUI; }
		public FeatureConsolePage FeatureConsolePage() { return FeatureConsolePage; }
		public SaveAsDialog SaveAsDialog() { return SaveAsDialog; }
		public KeycloakPage KeycloakPage() { return KeycloakPage; }

		public class InnoWakeMiningPage extends WebPageNodeBase
	{

		
			private DemoProjectABreadCrumb DemoProjectABreadCrumb;
	private AvatarWebElement AvatarWebElement;
	private ModulesLink ModulesLink;
	private DashboardLink DashboardLink;
	private CancelWebElement CancelWebElement;
	private SaveAsWebElement SaveAsWebElement;
	private BrowseModulesEntry BrowseModulesEntry;
	private SaveButton SaveButton;
	private AnnotationsEntry AnnotationsEntry;
	private EditCardField1 EditCardField1;
	private EditCardField2 EditCardField2;
	private CloseDialogButton CloseDialogButton;
	private SubmitButton SubmitButton;
	private CancelButton CancelButton;
	private AddMemberButton AddMemberButton;
	private TestMailAdressDisplay TestMailAdressDisplay;
	private RemoveMemberButton RemoveMemberButton;
	private OKButton OKButton;
	private DeleteCheckbox DeleteCheckbox;
	private DeleteButton DeleteButton;
	private ModulesPage ModulesPage;
	private HomePage HomePage;
	private CodeViewer CodeViewer;
	private ModuleDetailsPage ModuleDetailsPage;
	private DependencyGraphPage DependencyGraphPage;
	private HomeMenuEntry HomeMenuEntry;
	private AnnotationUIPage AnnotationUIPage;
	private ControlFlowGraphPage ControlFlowGraphPage;
	private LogonPage LogonPage;
	private ViewButton ViewButton;
	private TestAnnotationEditButton TestAnnotationEditButton;
	private EclipseIconAnnotation EclipseIconAnnotation;
	private GlobalWebElement GlobalWebElement;
	private ClientsAndProjectsElement ClientsAndProjectsElement;
	private ClientsPage ClientsPage;
	private ProjectsPage ProjectsPage;
	private ClientsAndProjectsPage ClientsAndProjectsPage;
	private LogoutWebElement LogoutWebElement;
	private EclipseIconButton EclipseIconButton;
	private EclipseAnnotationButton EclipseAnnotationButton;
	private DeleteClient DeleteClient;
	private Settings Settings;
	private PencilButton PencilButton;
	private PortEditField PortEditField;
	private EclipseOfflineButton EclipseOfflineButton;
	private CollapsableNavigation CollapsableNavigation;
	private TaxonomiesLink TaxonomiesLink;
	private OpenCode OpenCode;
	private NavigationPane NavigationPane;
	private OpenInEclipseOption OpenInEclipseOption;
	private MMRS7101GraphLink MMRS7101GraphLink;
	private CollapsedNavigationIcon CollapsedNavigationIcon;
	private EditCardField3 EditCardField3;
	private MiningHomeIcon MiningHomeIcon;
	private FitContentButton FitContentButton;
	private PNGSpan PNGSpan;
	private PNGButton PNGButton;
	private openDependencyGraphButton openDependencyGraphButton;
	private ClientAdminMailAdressDisplay ClientAdminMailAdressDisplay;
	private ProjectRoleOption ProjectRoleOption;
	private ViewerOption ViewerOption;
	private EditMembersAddButton EditMembersAddButton;
	private EditMembersCloseButton EditMembersCloseButton;
	private EditCardField4 EditCardField4;
	private CopybookOption CopybookOption;
	private ByNameButton ByNameButton;
	private ABENDOption ABENDOption;
	private FILEWebElement FILEWebElement;
	private ProjectExportPage ProjectExportPage;
	private ExportLink ExportLink;
	private Endlabel1 Endlabel1;
	private CancelAnnotationButton CancelAnnotationButton;
	private MetricsMenuEntry MetricsMenuEntry;
	private SummaryMenuEntry SummaryMenuEntry;
	private ArtifactsMenuEntry ArtifactsMenuEntry;
	private UtilitiesMenuEntry UtilitiesMenuEntry;
	private InterfacesMenuEntry InterfacesMenuEntry;
	private SQLMenuEntry SQLMenuEntry;
	private DecompositionMenuEntry DecompositionMenuEntry;
	private CodeQualityEntry CodeQualityEntry;
	private CandidatesMenuEntry CandidatesMenuEntry;
	private ArtifactsPage ArtifactsPage;
	private CandidatesPage CandidatesPage;
	private InterfacesPage InterfacesPage;
	private CodeQualityPage CodeQualityPage;
	private DecompositionPage DecompositionPage;
	private SQLPage SQLPage;
	private UtilitiesPage UtilitiesPage;
	private MetricsMenuExpanded MetricsMenuExpanded;
	private GraphBackButton GraphBackButton;
	private StartRuleCandidatesJobInEclipse StartRuleCandidatesJobInEclipse;
	private StartDecompositionJobInEclipse StartDecompositionJobInEclipse;
	private DemoClient1 DemoClient1;
	private DeleteProjectConfirmationCheckBox DeleteProjectConfirmationCheckBox;
	private DeleteProjectButton DeleteProjectButton;
	private DiscoveryExpertExcelImportProject1 DiscoveryExpertExcelImportProject1;
	private DiscoveryExpertExcelImportProject2 DiscoveryExpertExcelImportProject2;
	private CallChainPage CallChainPage;
	private ExportAllAssignmentsButton ExportAllAssignmentsButton;
	private DemoClient1DemoProjectAWebElement1 DemoClient1DemoProjectAWebElement1;
	private SelectProjectBreadCrumb SelectProjectBreadCrumb;
	private DemoClient1BreadCrumb DemoClient1BreadCrumb;
	private P446681Link P446681Link;
	private TaxonomyFilterDropdown TaxonomyFilterDropdown;
	private TaxonomyFilterDropdownText TaxonomyFilterDropdownText;
	private DBAccessReadEntry DBAccessReadEntry;
	private TaxonomyFilterDropdownDBAccessRead TaxonomyFilterDropdownDBAccessRead;
	private TaxonomyFilterClearButton TaxonomyFilterClearButton;
	private ProgramTypeUIEntry ProgramTypeUIEntry;
	private TaxonomyFilterDropdownProgramTypeUI TaxonomyFilterDropdownProgramTypeUI;
	private TaxonomyFilterDropdownDBAccessReadSelected TaxonomyFilterDropdownDBAccessReadSelected;
	private TaxonomyFilterDropdownProgramTypeUISelected TaxonomyFilterDropdownProgramTypeUISelected;
	private ExportFormatsJSON ExportFormatsJSON;
	private OpenButton OpenButton;
	private CAELineNumber11 CAELineNumber11;
	private IMSMenuEntry IMSMenuEntry;
	private CAELineNumber12 CAELineNumber12;
	private CAELineNumber13 CAELineNumber13;
	private CAELineNumber14 CAELineNumber14;
	private HoveredElement HoveredElement;
	private HoveredElementNew HoveredElementNew;
	private ResultsNum ResultsNum;
	private EditAnnotationEclipseButton EditAnnotationEclipseButton;
	private EditAnnotationCancelButton EditAnnotationCancelButton;
	private DNAMenuEntry DNAMenuEntry;
	private DNAPage DNAPage;
	private Alert Alert;
	private DeleteWarning DeleteWarning;
	private WarningDialog WarningDialog;
	private DeleteAll DeleteAll;
	private Badge Badge;
	private LoadingCancelButton LoadingCancelButton;
	private TaxonomyFilterDropdownDBSwitcher TaxonomyFilterDropdownDBSwitcher;
	private TaxonomyFilterDropdownPTSwitcher TaxonomyFilterDropdownPTSwitcher;
	private SupportLink SupportLink;
	private Mining Mining;
	private ProgressToast ProgressToast;
	private IMSPage IMSPage;
	private Openmoduledetails Openmoduledetails;
	private AllIMSCalls AllIMSCalls;
	private RedAnnotationColorProperty RedAnnotationColorProperty;
	private Rule1AnnotationRuleProperty Rule1AnnotationRuleProperty;
	private Rule1PropertyDropdown Rule1PropertyDropdown;
	private RedPropertyDropdownElement RedPropertyDropdownElement;
	private TooltipList TooltipList;
	private ChartBackButton ChartBackButton;
	private ConfigurationLink ConfigurationLink;
	private ConfigurationPage ConfigurationPage;
	private pagesCount pagesCount;
	private Annotations Annotations;
	private TableData TableData;
	private TableHeader TableHeader;
	private chartCSV chartCSV;
	private MMRS71D1Link MMRS71D1Link;
	private TaxonomyDropDownBusinessProcessCreateInvoicesSelected TaxonomyDropDownBusinessProcessCreateInvoicesSelected;
	private PGM1Link PGM1Link;
	private UtilitiesWebElement UtilitiesWebElement;
	private BABKREULink BABKREULink;
	private TableHead TableHead;
	private TableBody TableBody;
	private Table Table;
	private DataDictionary DataDictionary;
	private DataDictionaryPage DataDictionaryPage;
	private NoData NoData;
	private FieldTypeFilterIcon FieldTypeFilterIcon;
	private GroupCheckbox GroupCheckbox;
						public InnoWakeMiningPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DemoProjectABreadCrumb = new DemoProjectABreadCrumb(this, applicationModel);
		AvatarWebElement = new AvatarWebElement(this, applicationModel);
		ModulesLink = new ModulesLink(this, applicationModel);
		DashboardLink = new DashboardLink(this, applicationModel);
		CancelWebElement = new CancelWebElement(this, applicationModel);
		SaveAsWebElement = new SaveAsWebElement(this, applicationModel);
		BrowseModulesEntry = new BrowseModulesEntry(this, applicationModel);
		SaveButton = new SaveButton(this, applicationModel);
		AnnotationsEntry = new AnnotationsEntry(this, applicationModel);
		EditCardField1 = new EditCardField1(this, applicationModel);
		EditCardField2 = new EditCardField2(this, applicationModel);
		CloseDialogButton = new CloseDialogButton(this, applicationModel);
		SubmitButton = new SubmitButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		AddMemberButton = new AddMemberButton(this, applicationModel);
		TestMailAdressDisplay = new TestMailAdressDisplay(this, applicationModel);
		RemoveMemberButton = new RemoveMemberButton(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		DeleteCheckbox = new DeleteCheckbox(this, applicationModel);
		DeleteButton = new DeleteButton(this, applicationModel);
		ModulesPage = new ModulesPage(this, applicationModel);
		HomePage = new HomePage(this, applicationModel);
		CodeViewer = new CodeViewer(this, applicationModel);
		ModuleDetailsPage = new ModuleDetailsPage(this, applicationModel);
		DependencyGraphPage = new DependencyGraphPage(this, applicationModel);
		HomeMenuEntry = new HomeMenuEntry(this, applicationModel);
		AnnotationUIPage = new AnnotationUIPage(this, applicationModel);
		ControlFlowGraphPage = new ControlFlowGraphPage(this, applicationModel);
		LogonPage = new LogonPage(this, applicationModel);
		ViewButton = new ViewButton(this, applicationModel);
		TestAnnotationEditButton = new TestAnnotationEditButton(this, applicationModel);
		EclipseIconAnnotation = new EclipseIconAnnotation(this, applicationModel);
		GlobalWebElement = new GlobalWebElement(this, applicationModel);
		ClientsAndProjectsElement = new ClientsAndProjectsElement(this, applicationModel);
		ClientsPage = new ClientsPage(this, applicationModel);
		ProjectsPage = new ProjectsPage(this, applicationModel);
		ClientsAndProjectsPage = new ClientsAndProjectsPage(this, applicationModel);
		LogoutWebElement = new LogoutWebElement(this, applicationModel);
		EclipseIconButton = new EclipseIconButton(this, applicationModel);
		EclipseAnnotationButton = new EclipseAnnotationButton(this, applicationModel);
		DeleteClient = new DeleteClient(this, applicationModel);
		Settings = new Settings(this, applicationModel);
		PencilButton = new PencilButton(this, applicationModel);
		PortEditField = new PortEditField(this, applicationModel);
		EclipseOfflineButton = new EclipseOfflineButton(this, applicationModel);
		CollapsableNavigation = new CollapsableNavigation(this, applicationModel);
		TaxonomiesLink = new TaxonomiesLink(this, applicationModel);
		OpenCode = new OpenCode(this, applicationModel);
		NavigationPane = new NavigationPane(this, applicationModel);
		OpenInEclipseOption = new OpenInEclipseOption(this, applicationModel);
		MMRS7101GraphLink = new MMRS7101GraphLink(this, applicationModel);
		CollapsedNavigationIcon = new CollapsedNavigationIcon(this, applicationModel);
		EditCardField3 = new EditCardField3(this, applicationModel);
		MiningHomeIcon = new MiningHomeIcon(this, applicationModel);
		FitContentButton = new FitContentButton(this, applicationModel);
		PNGSpan = new PNGSpan(this, applicationModel);
		PNGButton = new PNGButton(this, applicationModel);
		openDependencyGraphButton = new openDependencyGraphButton(this, applicationModel);
		ClientAdminMailAdressDisplay = new ClientAdminMailAdressDisplay(this, applicationModel);
		ProjectRoleOption = new ProjectRoleOption(this, applicationModel);
		ViewerOption = new ViewerOption(this, applicationModel);
		EditMembersAddButton = new EditMembersAddButton(this, applicationModel);
		EditMembersCloseButton = new EditMembersCloseButton(this, applicationModel);
		EditCardField4 = new EditCardField4(this, applicationModel);
		CopybookOption = new CopybookOption(this, applicationModel);
		ByNameButton = new ByNameButton(this, applicationModel);
		ABENDOption = new ABENDOption(this, applicationModel);
		FILEWebElement = new FILEWebElement(this, applicationModel);
		ProjectExportPage = new ProjectExportPage(this, applicationModel);
		ExportLink = new ExportLink(this, applicationModel);
		Endlabel1 = new Endlabel1(this, applicationModel);
		CancelAnnotationButton = new CancelAnnotationButton(this, applicationModel);
		MetricsMenuEntry = new MetricsMenuEntry(this, applicationModel);
		SummaryMenuEntry = new SummaryMenuEntry(this, applicationModel);
		ArtifactsMenuEntry = new ArtifactsMenuEntry(this, applicationModel);
		UtilitiesMenuEntry = new UtilitiesMenuEntry(this, applicationModel);
		InterfacesMenuEntry = new InterfacesMenuEntry(this, applicationModel);
		SQLMenuEntry = new SQLMenuEntry(this, applicationModel);
		DecompositionMenuEntry = new DecompositionMenuEntry(this, applicationModel);
		CodeQualityEntry = new CodeQualityEntry(this, applicationModel);
		CandidatesMenuEntry = new CandidatesMenuEntry(this, applicationModel);
		ArtifactsPage = new ArtifactsPage(this, applicationModel);
		CandidatesPage = new CandidatesPage(this, applicationModel);
		InterfacesPage = new InterfacesPage(this, applicationModel);
		CodeQualityPage = new CodeQualityPage(this, applicationModel);
		DecompositionPage = new DecompositionPage(this, applicationModel);
		SQLPage = new SQLPage(this, applicationModel);
		UtilitiesPage = new UtilitiesPage(this, applicationModel);
		MetricsMenuExpanded = new MetricsMenuExpanded(this, applicationModel);
		GraphBackButton = new GraphBackButton(this, applicationModel);
		StartRuleCandidatesJobInEclipse = new StartRuleCandidatesJobInEclipse(this, applicationModel);
		StartDecompositionJobInEclipse = new StartDecompositionJobInEclipse(this, applicationModel);
		DemoClient1 = new DemoClient1(this, applicationModel);
		DeleteProjectConfirmationCheckBox = new DeleteProjectConfirmationCheckBox(this, applicationModel);
		DeleteProjectButton = new DeleteProjectButton(this, applicationModel);
		DiscoveryExpertExcelImportProject1 = new DiscoveryExpertExcelImportProject1(this, applicationModel);
		DiscoveryExpertExcelImportProject2 = new DiscoveryExpertExcelImportProject2(this, applicationModel);
		CallChainPage = new CallChainPage(this, applicationModel);
		ExportAllAssignmentsButton = new ExportAllAssignmentsButton(this, applicationModel);
		DemoClient1DemoProjectAWebElement1 = new DemoClient1DemoProjectAWebElement1(this, applicationModel);
		SelectProjectBreadCrumb = new SelectProjectBreadCrumb(this, applicationModel);
		DemoClient1BreadCrumb = new DemoClient1BreadCrumb(this, applicationModel);
		P446681Link = new P446681Link(this, applicationModel);
		TaxonomyFilterDropdown = new TaxonomyFilterDropdown(this, applicationModel);
		TaxonomyFilterDropdownText = new TaxonomyFilterDropdownText(this, applicationModel);
		DBAccessReadEntry = new DBAccessReadEntry(this, applicationModel);
		TaxonomyFilterDropdownDBAccessRead = new TaxonomyFilterDropdownDBAccessRead(this, applicationModel);
		TaxonomyFilterClearButton = new TaxonomyFilterClearButton(this, applicationModel);
		ProgramTypeUIEntry = new ProgramTypeUIEntry(this, applicationModel);
		TaxonomyFilterDropdownProgramTypeUI = new TaxonomyFilterDropdownProgramTypeUI(this, applicationModel);
		TaxonomyFilterDropdownDBAccessReadSelected = new TaxonomyFilterDropdownDBAccessReadSelected(this, applicationModel);
		TaxonomyFilterDropdownProgramTypeUISelected = new TaxonomyFilterDropdownProgramTypeUISelected(this, applicationModel);
		ExportFormatsJSON = new ExportFormatsJSON(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
		CAELineNumber11 = new CAELineNumber11(this, applicationModel);
		IMSMenuEntry = new IMSMenuEntry(this, applicationModel);
		CAELineNumber12 = new CAELineNumber12(this, applicationModel);
		CAELineNumber13 = new CAELineNumber13(this, applicationModel);
		CAELineNumber14 = new CAELineNumber14(this, applicationModel);
		HoveredElement = new HoveredElement(this, applicationModel);
		HoveredElementNew = new HoveredElementNew(this, applicationModel);
		ResultsNum = new ResultsNum(this, applicationModel);
		EditAnnotationEclipseButton = new EditAnnotationEclipseButton(this, applicationModel);
		EditAnnotationCancelButton = new EditAnnotationCancelButton(this, applicationModel);
		DNAMenuEntry = new DNAMenuEntry(this, applicationModel);
		DNAPage = new DNAPage(this, applicationModel);
		Alert = new Alert(this, applicationModel);
		DeleteWarning = new DeleteWarning(this, applicationModel);
		WarningDialog = new WarningDialog(this, applicationModel);
		DeleteAll = new DeleteAll(this, applicationModel);
		Badge = new Badge(this, applicationModel);
		LoadingCancelButton = new LoadingCancelButton(this, applicationModel);
		TaxonomyFilterDropdownDBSwitcher = new TaxonomyFilterDropdownDBSwitcher(this, applicationModel);
		TaxonomyFilterDropdownPTSwitcher = new TaxonomyFilterDropdownPTSwitcher(this, applicationModel);
		SupportLink = new SupportLink(this, applicationModel);
		Mining = new Mining(this, applicationModel);
		ProgressToast = new ProgressToast(this, applicationModel);
		IMSPage = new IMSPage(this, applicationModel);
		Openmoduledetails = new Openmoduledetails(this, applicationModel);
		AllIMSCalls = new AllIMSCalls(this, applicationModel);
		RedAnnotationColorProperty = new RedAnnotationColorProperty(this, applicationModel);
		Rule1AnnotationRuleProperty = new Rule1AnnotationRuleProperty(this, applicationModel);
		Rule1PropertyDropdown = new Rule1PropertyDropdown(this, applicationModel);
		RedPropertyDropdownElement = new RedPropertyDropdownElement(this, applicationModel);
		TooltipList = new TooltipList(this, applicationModel);
		ChartBackButton = new ChartBackButton(this, applicationModel);
		ConfigurationLink = new ConfigurationLink(this, applicationModel);
		ConfigurationPage = new ConfigurationPage(this, applicationModel);
		pagesCount = new pagesCount(this, applicationModel);
		Annotations = new Annotations(this, applicationModel);
		TableData = new TableData(this, applicationModel);
		TableHeader = new TableHeader(this, applicationModel);
		chartCSV = new chartCSV(this, applicationModel);
		MMRS71D1Link = new MMRS71D1Link(this, applicationModel);
		TaxonomyDropDownBusinessProcessCreateInvoicesSelected = new TaxonomyDropDownBusinessProcessCreateInvoicesSelected(this, applicationModel);
		PGM1Link = new PGM1Link(this, applicationModel);
		UtilitiesWebElement = new UtilitiesWebElement(this, applicationModel);
		BABKREULink = new BABKREULink(this, applicationModel);
		TableHead = new TableHead(this, applicationModel);
		TableBody = new TableBody(this, applicationModel);
		Table = new Table(this, applicationModel);
		DataDictionary = new DataDictionary(this, applicationModel);
		DataDictionaryPage = new DataDictionaryPage(this, applicationModel);
		NoData = new NoData(this, applicationModel);
		FieldTypeFilterIcon = new FieldTypeFilterIcon(this, applicationModel);
		GroupCheckbox = new GroupCheckbox(this, applicationModel);

			setDisplayName("innoWake Mining");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DemoProjectABreadCrumb DemoProjectABreadCrumb() { return DemoProjectABreadCrumb; }
		public AvatarWebElement AvatarWebElement() { return AvatarWebElement; }
		public ModulesLink ModulesLink() { return ModulesLink; }
		public DashboardLink DashboardLink() { return DashboardLink; }
		public CancelWebElement CancelWebElement() { return CancelWebElement; }
		public SaveAsWebElement SaveAsWebElement() { return SaveAsWebElement; }
		public BrowseModulesEntry BrowseModulesEntry() { return BrowseModulesEntry; }
		public SaveButton SaveButton() { return SaveButton; }
		public AnnotationsEntry AnnotationsEntry() { return AnnotationsEntry; }
		public EditCardField1 EditCardField1() { return EditCardField1; }
		public EditCardField2 EditCardField2() { return EditCardField2; }
		public CloseDialogButton CloseDialogButton() { return CloseDialogButton; }
		public SubmitButton SubmitButton() { return SubmitButton; }
		public CancelButton CancelButton() { return CancelButton; }
		public AddMemberButton AddMemberButton() { return AddMemberButton; }
		public TestMailAdressDisplay TestMailAdressDisplay() { return TestMailAdressDisplay; }
		public RemoveMemberButton RemoveMemberButton() { return RemoveMemberButton; }
		public OKButton OKButton() { return OKButton; }
		public DeleteCheckbox DeleteCheckbox() { return DeleteCheckbox; }
		public DeleteButton DeleteButton() { return DeleteButton; }
		public ModulesPage ModulesPage() { return ModulesPage; }
		public HomePage HomePage() { return HomePage; }
		public CodeViewer CodeViewer() { return CodeViewer; }
		public ModuleDetailsPage ModuleDetailsPage() { return ModuleDetailsPage; }
		public DependencyGraphPage DependencyGraphPage() { return DependencyGraphPage; }
		public HomeMenuEntry HomeMenuEntry() { return HomeMenuEntry; }
		public AnnotationUIPage AnnotationUIPage() { return AnnotationUIPage; }
		public ControlFlowGraphPage ControlFlowGraphPage() { return ControlFlowGraphPage; }
		public LogonPage LogonPage() { return LogonPage; }
		public ViewButton ViewButton() { return ViewButton; }
		public TestAnnotationEditButton TestAnnotationEditButton() { return TestAnnotationEditButton; }
		public EclipseIconAnnotation EclipseIconAnnotation() { return EclipseIconAnnotation; }
		public GlobalWebElement GlobalWebElement() { return GlobalWebElement; }
		public ClientsAndProjectsElement ClientsAndProjectsElement() { return ClientsAndProjectsElement; }
		public ClientsPage ClientsPage() { return ClientsPage; }
		public ProjectsPage ProjectsPage() { return ProjectsPage; }
		public ClientsAndProjectsPage ClientsAndProjectsPage() { return ClientsAndProjectsPage; }
		public LogoutWebElement LogoutWebElement() { return LogoutWebElement; }
		public EclipseIconButton EclipseIconButton() { return EclipseIconButton; }
		public EclipseAnnotationButton EclipseAnnotationButton() { return EclipseAnnotationButton; }
		public DeleteClient DeleteClient() { return DeleteClient; }
		public Settings Settings() { return Settings; }
		public PencilButton PencilButton() { return PencilButton; }
		public PortEditField PortEditField() { return PortEditField; }
		public EclipseOfflineButton EclipseOfflineButton() { return EclipseOfflineButton; }
		public CollapsableNavigation CollapsableNavigation() { return CollapsableNavigation; }
		public TaxonomiesLink TaxonomiesLink() { return TaxonomiesLink; }
		public OpenCode OpenCode() { return OpenCode; }
		public NavigationPane NavigationPane() { return NavigationPane; }
		public OpenInEclipseOption OpenInEclipseOption() { return OpenInEclipseOption; }
		public MMRS7101GraphLink MMRS7101GraphLink() { return MMRS7101GraphLink; }
		public CollapsedNavigationIcon CollapsedNavigationIcon() { return CollapsedNavigationIcon; }
		public EditCardField3 EditCardField3() { return EditCardField3; }
		public MiningHomeIcon MiningHomeIcon() { return MiningHomeIcon; }
		public FitContentButton FitContentButton() { return FitContentButton; }
		public PNGSpan PNGSpan() { return PNGSpan; }
		public PNGButton PNGButton() { return PNGButton; }
		public openDependencyGraphButton openDependencyGraphButton() { return openDependencyGraphButton; }
		public ClientAdminMailAdressDisplay ClientAdminMailAdressDisplay() { return ClientAdminMailAdressDisplay; }
		public ProjectRoleOption ProjectRoleOption() { return ProjectRoleOption; }
		public ViewerOption ViewerOption() { return ViewerOption; }
		public EditMembersAddButton EditMembersAddButton() { return EditMembersAddButton; }
		public EditMembersCloseButton EditMembersCloseButton() { return EditMembersCloseButton; }
		public EditCardField4 EditCardField4() { return EditCardField4; }
		public CopybookOption CopybookOption() { return CopybookOption; }
		public ByNameButton ByNameButton() { return ByNameButton; }
		public ABENDOption ABENDOption() { return ABENDOption; }
		public FILEWebElement FILEWebElement() { return FILEWebElement; }
		public ProjectExportPage ProjectExportPage() { return ProjectExportPage; }
		public ExportLink ExportLink() { return ExportLink; }
		public Endlabel1 Endlabel1() { return Endlabel1; }
		public CancelAnnotationButton CancelAnnotationButton() { return CancelAnnotationButton; }
		public MetricsMenuEntry MetricsMenuEntry() { return MetricsMenuEntry; }
		public SummaryMenuEntry SummaryMenuEntry() { return SummaryMenuEntry; }
		public ArtifactsMenuEntry ArtifactsMenuEntry() { return ArtifactsMenuEntry; }
		public UtilitiesMenuEntry UtilitiesMenuEntry() { return UtilitiesMenuEntry; }
		public InterfacesMenuEntry InterfacesMenuEntry() { return InterfacesMenuEntry; }
		public SQLMenuEntry SQLMenuEntry() { return SQLMenuEntry; }
		public DecompositionMenuEntry DecompositionMenuEntry() { return DecompositionMenuEntry; }
		public CodeQualityEntry CodeQualityEntry() { return CodeQualityEntry; }
		public CandidatesMenuEntry CandidatesMenuEntry() { return CandidatesMenuEntry; }
		public ArtifactsPage ArtifactsPage() { return ArtifactsPage; }
		public CandidatesPage CandidatesPage() { return CandidatesPage; }
		public InterfacesPage InterfacesPage() { return InterfacesPage; }
		public CodeQualityPage CodeQualityPage() { return CodeQualityPage; }
		public DecompositionPage DecompositionPage() { return DecompositionPage; }
		public SQLPage SQLPage() { return SQLPage; }
		public UtilitiesPage UtilitiesPage() { return UtilitiesPage; }
		public MetricsMenuExpanded MetricsMenuExpanded() { return MetricsMenuExpanded; }
		public GraphBackButton GraphBackButton() { return GraphBackButton; }
		public StartRuleCandidatesJobInEclipse StartRuleCandidatesJobInEclipse() { return StartRuleCandidatesJobInEclipse; }
		public StartDecompositionJobInEclipse StartDecompositionJobInEclipse() { return StartDecompositionJobInEclipse; }
		public DemoClient1 DemoClient1() { return DemoClient1; }
		public DeleteProjectConfirmationCheckBox DeleteProjectConfirmationCheckBox() { return DeleteProjectConfirmationCheckBox; }
		public DeleteProjectButton DeleteProjectButton() { return DeleteProjectButton; }
		public DiscoveryExpertExcelImportProject1 DiscoveryExpertExcelImportProject1() { return DiscoveryExpertExcelImportProject1; }
		public DiscoveryExpertExcelImportProject2 DiscoveryExpertExcelImportProject2() { return DiscoveryExpertExcelImportProject2; }
		public CallChainPage CallChainPage() { return CallChainPage; }
		public ExportAllAssignmentsButton ExportAllAssignmentsButton() { return ExportAllAssignmentsButton; }
		public DemoClient1DemoProjectAWebElement1 DemoClient1DemoProjectAWebElement1() { return DemoClient1DemoProjectAWebElement1; }
		public SelectProjectBreadCrumb SelectProjectBreadCrumb() { return SelectProjectBreadCrumb; }
		public DemoClient1BreadCrumb DemoClient1BreadCrumb() { return DemoClient1BreadCrumb; }
		public P446681Link P446681Link() { return P446681Link; }
		public TaxonomyFilterDropdown TaxonomyFilterDropdown() { return TaxonomyFilterDropdown; }
		public TaxonomyFilterDropdownText TaxonomyFilterDropdownText() { return TaxonomyFilterDropdownText; }
		public DBAccessReadEntry DBAccessReadEntry() { return DBAccessReadEntry; }
		public TaxonomyFilterDropdownDBAccessRead TaxonomyFilterDropdownDBAccessRead() { return TaxonomyFilterDropdownDBAccessRead; }
		public TaxonomyFilterClearButton TaxonomyFilterClearButton() { return TaxonomyFilterClearButton; }
		public ProgramTypeUIEntry ProgramTypeUIEntry() { return ProgramTypeUIEntry; }
		public TaxonomyFilterDropdownProgramTypeUI TaxonomyFilterDropdownProgramTypeUI() { return TaxonomyFilterDropdownProgramTypeUI; }
		public TaxonomyFilterDropdownDBAccessReadSelected TaxonomyFilterDropdownDBAccessReadSelected() { return TaxonomyFilterDropdownDBAccessReadSelected; }
		public TaxonomyFilterDropdownProgramTypeUISelected TaxonomyFilterDropdownProgramTypeUISelected() { return TaxonomyFilterDropdownProgramTypeUISelected; }
		public ExportFormatsJSON ExportFormatsJSON() { return ExportFormatsJSON; }
		public OpenButton OpenButton() { return OpenButton; }
		public CAELineNumber11 CAELineNumber11() { return CAELineNumber11; }
		public IMSMenuEntry IMSMenuEntry() { return IMSMenuEntry; }
		public CAELineNumber12 CAELineNumber12() { return CAELineNumber12; }
		public CAELineNumber13 CAELineNumber13() { return CAELineNumber13; }
		public CAELineNumber14 CAELineNumber14() { return CAELineNumber14; }
		public HoveredElement HoveredElement() { return HoveredElement; }
		public HoveredElementNew HoveredElementNew() { return HoveredElementNew; }
		public ResultsNum ResultsNum() { return ResultsNum; }
		public EditAnnotationEclipseButton EditAnnotationEclipseButton() { return EditAnnotationEclipseButton; }
		public EditAnnotationCancelButton EditAnnotationCancelButton() { return EditAnnotationCancelButton; }
		public DNAMenuEntry DNAMenuEntry() { return DNAMenuEntry; }
		public DNAPage DNAPage() { return DNAPage; }
		public Alert Alert() { return Alert; }
		public DeleteWarning DeleteWarning() { return DeleteWarning; }
		public WarningDialog WarningDialog() { return WarningDialog; }
		public DeleteAll DeleteAll() { return DeleteAll; }
		public Badge Badge() { return Badge; }
		public LoadingCancelButton LoadingCancelButton() { return LoadingCancelButton; }
		public TaxonomyFilterDropdownDBSwitcher TaxonomyFilterDropdownDBSwitcher() { return TaxonomyFilterDropdownDBSwitcher; }
		public TaxonomyFilterDropdownPTSwitcher TaxonomyFilterDropdownPTSwitcher() { return TaxonomyFilterDropdownPTSwitcher; }
		public SupportLink SupportLink() { return SupportLink; }
		public Mining Mining() { return Mining; }
		public ProgressToast ProgressToast() { return ProgressToast; }
		public IMSPage IMSPage() { return IMSPage; }
		public Openmoduledetails Openmoduledetails() { return Openmoduledetails; }
		public AllIMSCalls AllIMSCalls() { return AllIMSCalls; }
		public RedAnnotationColorProperty RedAnnotationColorProperty() { return RedAnnotationColorProperty; }
		public Rule1AnnotationRuleProperty Rule1AnnotationRuleProperty() { return Rule1AnnotationRuleProperty; }
		public Rule1PropertyDropdown Rule1PropertyDropdown() { return Rule1PropertyDropdown; }
		public RedPropertyDropdownElement RedPropertyDropdownElement() { return RedPropertyDropdownElement; }
		public TooltipList TooltipList() { return TooltipList; }
		public ChartBackButton ChartBackButton() { return ChartBackButton; }
		public ConfigurationLink ConfigurationLink() { return ConfigurationLink; }
		public ConfigurationPage ConfigurationPage() { return ConfigurationPage; }
		public pagesCount pagesCount() { return pagesCount; }
		public Annotations Annotations() { return Annotations; }
		public TableData TableData() { return TableData; }
		public TableHeader TableHeader() { return TableHeader; }
		public chartCSV chartCSV() { return chartCSV; }
		public MMRS71D1Link MMRS71D1Link() { return MMRS71D1Link; }
		public TaxonomyDropDownBusinessProcessCreateInvoicesSelected TaxonomyDropDownBusinessProcessCreateInvoicesSelected() { return TaxonomyDropDownBusinessProcessCreateInvoicesSelected; }
		public PGM1Link PGM1Link() { return PGM1Link; }
		public UtilitiesWebElement UtilitiesWebElement() { return UtilitiesWebElement; }
		public BABKREULink BABKREULink() { return BABKREULink; }
		public TableHead TableHead() { return TableHead; }
		public TableBody TableBody() { return TableBody; }
		public Table Table() { return Table; }
		public DataDictionary DataDictionary() { return DataDictionary; }
		public DataDictionaryPage DataDictionaryPage() { return DataDictionaryPage; }
		public NoData NoData() { return NoData; }
		public FieldTypeFilterIcon FieldTypeFilterIcon() { return FieldTypeFilterIcon; }
		public GroupCheckbox GroupCheckbox() { return GroupCheckbox; }
		
			public class DemoProjectABreadCrumb extends WebWebElementNodeBase
	{

		
								public DemoProjectABreadCrumb(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DemoProjectABreadCrumb");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Project A").tagName("SPAN").className("ant-breadcrumb-link ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AvatarWebElement extends WebWebElementNodeBase
	{

		
								public AvatarWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AvatarWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-AVATAR").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModulesLink extends WebLinkNodeBase
	{

		
								public ModulesLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModulesLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Modules").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DashboardLink extends WebLinkNodeBase
	{

		
								public DashboardLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Dashboard");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Dashboard").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelWebElement extends WebWebElementNodeBase
	{

		
								public CancelWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("ui-multiselect-trigger-icon ui-clickable pi pi-chevron-down").innerText("").tagName("SPAN").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveAsWebElement extends WebWebElementNodeBase
	{

		
								public SaveAsWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SaveAsWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("PNG").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BrowseModulesEntry extends WebWebElementNodeBase
	{

		
								public BrowseModulesEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BrowseModulesEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().xpath("/html/body/app-root/app-shell/app-mining-module/main/div[2]/div/mn-table/p-table/div/div[1]/div/div[2]/table/tbody/tr[27]/td[1]").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveButton extends WebWebElementNodeBase
	{

		
								public SaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SaveButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Save").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationsEntry extends WebWebElementNodeBase
	{

		
								public AnnotationsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("Annotations").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditCardField1 extends WebWebElementNodeBase
	{

		
								public EditCardField1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditCardField1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon preview-card__elipsis-action ant-dropdown-trigger anticon-ellipsis ng-star-inserted").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditCardField2 extends WebWebElementNodeBase
	{

		
								public EditCardField2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditCardField2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon preview-card__elipsis-action ant-dropdown-trigger anticon-ellipsis ng-star-inserted").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CloseDialogButton extends WebWebElementNodeBase
	{

		
								public CloseDialogButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CloseDialogButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon ant-modal-close-icon anticon-close ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SubmitButton extends WebWebElementNodeBase
	{

		
								public SubmitButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SubmitButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Submit").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends WebWebElementNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Cancel").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddMemberButton extends WebWebElementNodeBase
	{

		
								public AddMemberButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddMemberButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Add").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestMailAdressDisplay extends WebWebElementNodeBase
	{

		
								public TestMailAdressDisplay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestMailAdressDisplay");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("innowakesupport@deloitte.com").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveMemberButton extends WebWebElementNodeBase
	{

		
								public RemoveMemberButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RemoveMemberButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon member-modal__remove-icon anticon-minus-circle").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends WebWebElementNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("OK").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteCheckbox extends WebWebElementNodeBase
	{

		
								public DeleteCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteCheckbox");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").className("ant-checkbox").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteButton extends WebWebElementNodeBase
	{

		
								public DeleteButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Delete").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModulesPage extends WebPageNodeBase
	{

		
			private CSVExportBrowseModules CSVExportBrowseModules;
	private EclipseIcon EclipseIcon;
	private ModuleNameEditField ModuleNameEditField;
	private MMRS7101Option MMRS7101Option;
	private MMRS71C1Option MMRS71C1Option;
	private ChooseTechnologyDropDown ChooseTechnologyDropDown;
	private AF10H01Option AF10H01Option;
	private CSVLinkBrowseModules CSVLinkBrowseModules;
	private SearchButton SearchButton;
	private ResetButton ResetButton;
	private OkButton OkButton;
	private JCLCheckBox JCLCheckBox;
	private CobolCheckBox CobolCheckBox;
	private Program Program;
	private TechnologyFilterButton TechnologyFilterButton;
	private TypeFilterButton TypeFilterButton;
	private ResetLink ResetLink;
	private TechnologyFilterActiveButton TechnologyFilterActiveButton;
	private TypeFilterActiveButton TypeFilterActiveButton;
	private NotReferencedFilterButton NotReferencedFilterButton;
	private ClearFilterButton ClearFilterButton;
	private TaxonomiesTab TaxonomiesTab;
	private PageNumberField PageNumberField;
	private moduleTable moduleTable;
	private ModuleNameHeading ModuleNameHeading;
	private NumberOfResults NumberOfResults;
	private MMRS7102Link MMRS7102Link;
	private NoData NoData;
	private LastScanHeading LastScanHeading;
	private AE0688Button AE0688Button;
	private MMRS7102webButton MMRS7102webButton;
	private MYPROGRAMNAME MYPROGRAMNAME;
	private DataDictionaryEntryElement DataDictionaryEntryElement;
	private MagnifierWebelement MagnifierWebelement;
	private Backbutton Backbutton;
	private MMRS7102Link2 MMRS7102Link2;
	private UT997 UT997;
	private SimpleLink SimpleLink;
	private MMRS7101Link MMRS7101Link;
	private OverviewLink OverviewLink;
	private TaxonomiesLink TaxonomiesLink;
	private AnnotationsLink AnnotationsLink;
	private DataDictionaryLink DataDictionaryLink;
	private DependenciesLink DependenciesLink;
	private CallChainLink CallChainLink;
	private CharacteristicsWebElement CharacteristicsWebElement;
	private TimestampTableElement TimestampTableElement;
	private P441400Link P441400Link;
	private Alert Alert;
	private DeleteWarning DeleteWarning;
	private warningDialog warningDialog;
	private MMRS71B1Link MMRS71B1Link;
	private Modules Modules;
	private GearIcon GearIcon;
	private Search Search;
	private HighlightedType HighlightedType;
	private MMRS7112 MMRS7112;
	private MagnifierButton MagnifierButton;
	private ModulesTable ModulesTable;
	private CopybookOption CopybookOption;
	private TimestampTableElementNew TimestampTableElementNew;
	private CreateInvoicesCheckBox CreateInvoicesCheckBox;
	private ChartsBackButton ChartsBackButton;
	private ColumnListTooltip ColumnListTooltip;
	private TechnicalTaxonomiesNode TechnicalTaxonomiesNode;
	private PrevPageButton PrevPageButton;
	private NextPageButton NextPageButton;
						public ModulesPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CSVExportBrowseModules = new CSVExportBrowseModules(this, applicationModel);
		EclipseIcon = new EclipseIcon(this, applicationModel);
		ModuleNameEditField = new ModuleNameEditField(this, applicationModel);
		MMRS7101Option = new MMRS7101Option(this, applicationModel);
		MMRS71C1Option = new MMRS71C1Option(this, applicationModel);
		ChooseTechnologyDropDown = new ChooseTechnologyDropDown(this, applicationModel);
		AF10H01Option = new AF10H01Option(this, applicationModel);
		CSVLinkBrowseModules = new CSVLinkBrowseModules(this, applicationModel);
		SearchButton = new SearchButton(this, applicationModel);
		ResetButton = new ResetButton(this, applicationModel);
		OkButton = new OkButton(this, applicationModel);
		JCLCheckBox = new JCLCheckBox(this, applicationModel);
		CobolCheckBox = new CobolCheckBox(this, applicationModel);
		Program = new Program(this, applicationModel);
		TechnologyFilterButton = new TechnologyFilterButton(this, applicationModel);
		TypeFilterButton = new TypeFilterButton(this, applicationModel);
		ResetLink = new ResetLink(this, applicationModel);
		TechnologyFilterActiveButton = new TechnologyFilterActiveButton(this, applicationModel);
		TypeFilterActiveButton = new TypeFilterActiveButton(this, applicationModel);
		NotReferencedFilterButton = new NotReferencedFilterButton(this, applicationModel);
		ClearFilterButton = new ClearFilterButton(this, applicationModel);
		TaxonomiesTab = new TaxonomiesTab(this, applicationModel);
		PageNumberField = new PageNumberField(this, applicationModel);
		moduleTable = new moduleTable(this, applicationModel);
		ModuleNameHeading = new ModuleNameHeading(this, applicationModel);
		NumberOfResults = new NumberOfResults(this, applicationModel);
		MMRS7102Link = new MMRS7102Link(this, applicationModel);
		NoData = new NoData(this, applicationModel);
		LastScanHeading = new LastScanHeading(this, applicationModel);
		AE0688Button = new AE0688Button(this, applicationModel);
		MMRS7102webButton = new MMRS7102webButton(this, applicationModel);
		MYPROGRAMNAME = new MYPROGRAMNAME(this, applicationModel);
		DataDictionaryEntryElement = new DataDictionaryEntryElement(this, applicationModel);
		MagnifierWebelement = new MagnifierWebelement(this, applicationModel);
		Backbutton = new Backbutton(this, applicationModel);
		MMRS7102Link2 = new MMRS7102Link2(this, applicationModel);
		UT997 = new UT997(this, applicationModel);
		SimpleLink = new SimpleLink(this, applicationModel);
		MMRS7101Link = new MMRS7101Link(this, applicationModel);
		OverviewLink = new OverviewLink(this, applicationModel);
		TaxonomiesLink = new TaxonomiesLink(this, applicationModel);
		AnnotationsLink = new AnnotationsLink(this, applicationModel);
		DataDictionaryLink = new DataDictionaryLink(this, applicationModel);
		DependenciesLink = new DependenciesLink(this, applicationModel);
		CallChainLink = new CallChainLink(this, applicationModel);
		CharacteristicsWebElement = new CharacteristicsWebElement(this, applicationModel);
		TimestampTableElement = new TimestampTableElement(this, applicationModel);
		P441400Link = new P441400Link(this, applicationModel);
		Alert = new Alert(this, applicationModel);
		DeleteWarning = new DeleteWarning(this, applicationModel);
		warningDialog = new warningDialog(this, applicationModel);
		MMRS71B1Link = new MMRS71B1Link(this, applicationModel);
		Modules = new Modules(this, applicationModel);
		GearIcon = new GearIcon(this, applicationModel);
		Search = new Search(this, applicationModel);
		HighlightedType = new HighlightedType(this, applicationModel);
		MMRS7112 = new MMRS7112(this, applicationModel);
		MagnifierButton = new MagnifierButton(this, applicationModel);
		ModulesTable = new ModulesTable(this, applicationModel);
		CopybookOption = new CopybookOption(this, applicationModel);
		TimestampTableElementNew = new TimestampTableElementNew(this, applicationModel);
		CreateInvoicesCheckBox = new CreateInvoicesCheckBox(this, applicationModel);
		ChartsBackButton = new ChartsBackButton(this, applicationModel);
		ColumnListTooltip = new ColumnListTooltip(this, applicationModel);
		TechnicalTaxonomiesNode = new TechnicalTaxonomiesNode(this, applicationModel);
		PrevPageButton = new PrevPageButton(this, applicationModel);
		NextPageButton = new NextPageButton(this, applicationModel);

			setDisplayName("ModulesPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CSVExportBrowseModules CSVExportBrowseModules() { return CSVExportBrowseModules; }
		public EclipseIcon EclipseIcon() { return EclipseIcon; }
		public ModuleNameEditField ModuleNameEditField() { return ModuleNameEditField; }
		public MMRS7101Option MMRS7101Option() { return MMRS7101Option; }
		public MMRS71C1Option MMRS71C1Option() { return MMRS71C1Option; }
		public ChooseTechnologyDropDown ChooseTechnologyDropDown() { return ChooseTechnologyDropDown; }
		public AF10H01Option AF10H01Option() { return AF10H01Option; }
		public CSVLinkBrowseModules CSVLinkBrowseModules() { return CSVLinkBrowseModules; }
		public SearchButton SearchButton() { return SearchButton; }
		public ResetButton ResetButton() { return ResetButton; }
		public OkButton OkButton() { return OkButton; }
		public JCLCheckBox JCLCheckBox() { return JCLCheckBox; }
		public CobolCheckBox CobolCheckBox() { return CobolCheckBox; }
		public Program Program() { return Program; }
		public TechnologyFilterButton TechnologyFilterButton() { return TechnologyFilterButton; }
		public TypeFilterButton TypeFilterButton() { return TypeFilterButton; }
		public ResetLink ResetLink() { return ResetLink; }
		public TechnologyFilterActiveButton TechnologyFilterActiveButton() { return TechnologyFilterActiveButton; }
		public TypeFilterActiveButton TypeFilterActiveButton() { return TypeFilterActiveButton; }
		public NotReferencedFilterButton NotReferencedFilterButton() { return NotReferencedFilterButton; }
		public ClearFilterButton ClearFilterButton() { return ClearFilterButton; }
		public TaxonomiesTab TaxonomiesTab() { return TaxonomiesTab; }
		public PageNumberField PageNumberField() { return PageNumberField; }
		public moduleTable moduleTable() { return moduleTable; }
		public ModuleNameHeading ModuleNameHeading() { return ModuleNameHeading; }
		public NumberOfResults NumberOfResults() { return NumberOfResults; }
		public MMRS7102Link MMRS7102Link() { return MMRS7102Link; }
		public NoData NoData() { return NoData; }
		public LastScanHeading LastScanHeading() { return LastScanHeading; }
		public AE0688Button AE0688Button() { return AE0688Button; }
		public MMRS7102webButton MMRS7102webButton() { return MMRS7102webButton; }
		public MYPROGRAMNAME MYPROGRAMNAME() { return MYPROGRAMNAME; }
		public DataDictionaryEntryElement DataDictionaryEntryElement() { return DataDictionaryEntryElement; }
		public MagnifierWebelement MagnifierWebelement() { return MagnifierWebelement; }
		public Backbutton Backbutton() { return Backbutton; }
		public MMRS7102Link2 MMRS7102Link2() { return MMRS7102Link2; }
		public UT997 UT997() { return UT997; }
		public SimpleLink SimpleLink() { return SimpleLink; }
		public MMRS7101Link MMRS7101Link() { return MMRS7101Link; }
		public OverviewLink OverviewLink() { return OverviewLink; }
		public TaxonomiesLink TaxonomiesLink() { return TaxonomiesLink; }
		public AnnotationsLink AnnotationsLink() { return AnnotationsLink; }
		public DataDictionaryLink DataDictionaryLink() { return DataDictionaryLink; }
		public DependenciesLink DependenciesLink() { return DependenciesLink; }
		public CallChainLink CallChainLink() { return CallChainLink; }
		public CharacteristicsWebElement CharacteristicsWebElement() { return CharacteristicsWebElement; }
		public TimestampTableElement TimestampTableElement() { return TimestampTableElement; }
		public P441400Link P441400Link() { return P441400Link; }
		public Alert Alert() { return Alert; }
		public DeleteWarning DeleteWarning() { return DeleteWarning; }
		public warningDialog warningDialog() { return warningDialog; }
		public MMRS71B1Link MMRS71B1Link() { return MMRS71B1Link; }
		public Modules Modules() { return Modules; }
		public GearIcon GearIcon() { return GearIcon; }
		public Search Search() { return Search; }
		public HighlightedType HighlightedType() { return HighlightedType; }
		public MMRS7112 MMRS7112() { return MMRS7112; }
		public MagnifierButton MagnifierButton() { return MagnifierButton; }
		public ModulesTable ModulesTable() { return ModulesTable; }
		public CopybookOption CopybookOption() { return CopybookOption; }
		public TimestampTableElementNew TimestampTableElementNew() { return TimestampTableElementNew; }
		public CreateInvoicesCheckBox CreateInvoicesCheckBox() { return CreateInvoicesCheckBox; }
		public ChartsBackButton ChartsBackButton() { return ChartsBackButton; }
		public ColumnListTooltip ColumnListTooltip() { return ColumnListTooltip; }
		public TechnicalTaxonomiesNode TechnicalTaxonomiesNode() { return TechnicalTaxonomiesNode; }
		public PrevPageButton PrevPageButton() { return PrevPageButton; }
		public NextPageButton NextPageButton() { return NextPageButton; }
		
			public class CSVExportBrowseModules extends WebWebElementNodeBase
	{

		
								public CSVExportBrowseModules(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSVExportBrowseModules");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("CSV").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EclipseIcon extends WebWebElementNodeBase
	{

		
								public EclipseIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("path").index(20).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleNameEditField extends WebEditFieldNodeBase
	{

		
								public ModuleNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleNameEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("Search...").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101Option extends WebWebElementNodeBase
	{

		
								public MMRS7101Option(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101Option");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" MMRS7101 ").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS71C1Option extends WebWebElementNodeBase
	{

		
								public MMRS71C1Option(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS71C1Option");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS71C1 ").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChooseTechnologyDropDown extends WebWebElementNodeBase
	{

		
								public ChooseTechnologyDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ChooseTechnologyDropDown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("ui-sortable-column ui-resizable-column ng-star-inserted").innerText("Technology").tagName("TH").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AF10H01Option extends WebWebElementNodeBase
	{

		
								public AF10H01Option(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AF10H01Option");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("AF10H01").tagName("a").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSVLinkBrowseModules extends WebLinkNodeBase
	{

		
								public CSVLinkBrowseModules(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSVLinkBrowseModules");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText(" CSV ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchButton extends WebButtonNodeBase
	{

		
								public SearchButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SearchButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").className("ant-btn ant-btn-primary ant-btn-sm").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResetButton extends WebButtonNodeBase
	{

		
								public ResetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResetButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText("Reset").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OkButton extends WebButtonNodeBase
	{

		
								public OkButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OkButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JCLCheckBox extends WebWebElementNodeBase
	{

		
								public JCLCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JCLCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("JCL").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolCheckBox extends WebWebElementNodeBase
	{

		
								public CobolCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COBOL").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Program extends WebWebElementNodeBase
	{

		
								public Program(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Program");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("PROGRAM").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TechnologyFilterButton extends WebWebElementNodeBase
	{

		
								public TechnologyFilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TechnologyFilterButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className(new RegExpProperty(".*anticon-filter.*")).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TypeFilterButton extends WebWebElementNodeBase
	{

		
								public TypeFilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TypeFilterButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-filter type-based-filter__filter-icon--not-selected").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResetLink extends WebWebElementNodeBase
	{

		
								public ResetLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResetLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Reset").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TechnologyFilterActiveButton extends WebWebElementNodeBase
	{

		
								public TechnologyFilterActiveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TechnologyFilterActiveButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-filter type-based-filter__filter-icon--selected").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TypeFilterActiveButton extends WebWebElementNodeBase
	{

		
								public TypeFilterActiveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TypeFilterActiveButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-filter type-based-filter__filter-icon--selected").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NotReferencedFilterButton extends WebButtonNodeBase
	{

		
								public NotReferencedFilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NotReferencedFilterButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText("Not referenced").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClearFilterButton extends WebButtonNodeBase
	{

		
								public ClearFilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClearFilterButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText("clear").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomiesTab extends WebWebElementNodeBase
	{

		
								public TaxonomiesTab(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomiesTab");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").role("tab").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PageNumberField extends WebEditFieldNodeBase
	{

		
								public PageNumberField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("pageNumberField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class moduleTable extends WebWebElementNodeBase
	{

		
								public moduleTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("moduleTable");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TABLE").className("mining-table ant-table-wrapper mining-table__body").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleNameHeading extends WebWebElementNodeBase
	{

		
								public ModuleNameHeading(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleNameHeading");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Module Name").tagName("NZ-TABLE-SORTERS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NumberOfResults extends WebWebElementNodeBase
	{

		
								public NumberOfResults(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NumberOfResults");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-col ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7102Link extends WebWebElementNodeBase
	{

		
								public MMRS7102Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7102Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" MMRS7102 ").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoData extends WebWebElementNodeBase
	{

		
								public NoData(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NoData");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("No Data").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LastScanHeading extends WebWebElementNodeBase
	{

		
								public LastScanHeading(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LastScanHeading");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Last Scan ").tagName("NZ-TABLE-SORTERS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AE0688Button extends WebButtonNodeBase
	{

		
								public AE0688Button(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName(" AE0688 ");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("").name(" AE0688 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7102webButton extends WebButtonNodeBase
	{

		
								public MMRS7102webButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7102webButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("MMRS7102").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MYPROGRAMNAME extends WebWebElementNodeBase
	{

		
								public MYPROGRAMNAME(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MY-PROGRAM-NAME");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MY-PROGRAM-NAME ").accessibilityName("").tagName("SPAN").className("mtk1").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryEntryElement extends WebWebElementNodeBase
	{

		
								public DataDictionaryEntryElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryEntryElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Data dictionary entry").tagName("STRONG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MagnifierWebelement extends WebWebElementNodeBase
	{

		
								public MagnifierWebelement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("magnifierWebelement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("").accessibilityName("").tagName("svg").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Backbutton extends WebButtonNodeBase
	{

		
								public Backbutton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("backbutton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").tagName("BUTTON").name("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7102Link2 extends WebLinkNodeBase
	{

		
								public MMRS7102Link2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7102Link2");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("MMRS7102 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UT997 extends WebLinkNodeBase
	{

		
								public UT997(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UT997");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("UT997 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SimpleLink extends WebLinkNodeBase
	{

		
								public SimpleLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("simpleLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("simple ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101Link extends WebLinkNodeBase
	{

		
								public MMRS7101Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101Link");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("MMRS7101 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OverviewLink extends WebLinkNodeBase
	{

		
								public OverviewLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Overview ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Overview ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomiesLink extends WebLinkNodeBase
	{

		
								public TaxonomiesLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Taxonomies ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().accessibilityName("").innerText("Taxonomies ").role("").tagName("A").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationsLink extends WebLinkNodeBase
	{

		
								public AnnotationsLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Annotations ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().accessibilityName("").innerText("Annotations 0 1 2 3 4 5 6 7 8 9 ").role("").tagName("A").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryLink extends WebLinkNodeBase
	{

		
								public DataDictionaryLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Data Dictionary ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Data Dictionary 0 1 2 3 4 5 6 7 8 9 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DependenciesLink extends WebLinkNodeBase
	{

		
								public DependenciesLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Dependencies ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Dependencies 0 1 2 3 4 5 6 7 8 9 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CallChainLink extends WebLinkNodeBase
	{

		
								public CallChainLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Call Chain ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Call Chain ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CharacteristicsWebElement extends WebWebElementNodeBase
	{

		
								public CharacteristicsWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Characteristics");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-card-head-title ng-star-inserted").innerText("Characteristics").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TimestampTableElement extends WebWebElementNodeBase
	{

		
								public TimestampTableElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TimestampTableElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class P441400Link extends WebLinkNodeBase
	{

		
								public P441400Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("P441400 ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("P441400 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Alert extends WebWebElementNodeBase
	{

		
								public Alert(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Alert");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("This module was modified by the last code scan. Please review its meta data (annotations, data dictionary, module description, taxonomies).").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteWarning extends WebWebElementNodeBase
	{

		
								public DeleteWarning(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteWarning");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ng-star-inserted").innerText("Delete Warning ").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class warningDialog extends WebWebElementNodeBase
	{

		
			private Cancel Cancel;
	private Delete Delete;
						public warningDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Cancel = new Cancel(this, applicationModel);
		Delete = new Delete(this, applicationModel);

			setDisplayName("warningDialog");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty("ant-popover-inner-content ng-tns-c.*")).innerText("You will delete this warning for every member of the project.CancelDelete").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Cancel Cancel() { return Cancel; }
		public Delete Delete() { return Delete; }
		
			public class Cancel extends WebButtonNodeBase
	{

		
								public Cancel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Delete extends WebButtonNodeBase
	{

		
								public Delete(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Delete").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class MMRS71B1Link extends WebLinkNodeBase
	{

		
								public MMRS71B1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS71B1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("MMRS71B1 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Modules extends WebWebElementNodeBase
	{

		
								public Modules(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Modules");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-page-header-heading-title ng-star-inserted").innerText("Modules").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GearIcon extends WebWebElementNodeBase
	{

		
								public GearIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GearIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("anticon anticon-setting").tagName("I").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Search extends WebEditFieldNodeBase
	{

		
								public Search(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").placeholder("Search columns...").tagName("INPUT").type("text").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HighlightedType extends WebWebElementNodeBase
	{

		
								public HighlightedType(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HighlightedType");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("font-highlight").innerText("Type").tagName("SPAN").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7112 extends WebLinkNodeBase
	{

		
								public MMRS7112(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7112");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("MMRS7112 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MagnifierButton extends WebWebElementNodeBase
	{

		
								public MagnifierButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MagnifierButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty(".*anticon-search.*")).tagName("I").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModulesTable extends WebWebElementNodeBase
	{

		
								public ModulesTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModulesTable");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TBODY").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CopybookOption extends WebWebElementNodeBase
	{

		
								public CopybookOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CopybookOption");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COPYBOOK").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TimestampTableElementNew extends WebWebElementNodeBase
	{

		
								public TimestampTableElementNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TimestampTableElementNew");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-table-cell ant-table-cell-ellipsis ng-star-inserted").tagName("TD").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateInvoicesCheckBox extends WebWebElementNodeBase
	{

		
								public CreateInvoicesCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CreateInvoicesCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Create Invoices").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChartsBackButton extends WebWebElementNodeBase
	{

		
								public ChartsBackButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ChartsBackButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("i").className("anticon anticon-arrow-left ng-star-inserted").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ColumnListTooltip extends WebWebElementNodeBase
	{

		
								public ColumnListTooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ColumnListTooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TREE").className(new RegExpProperty(".*mining-setting-popover.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TechnicalTaxonomiesNode extends WebWebElementNodeBase
	{

		
			private TechnicalTaxonomiesCheckbox TechnicalTaxonomiesCheckbox;
						public TechnicalTaxonomiesNode(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TechnicalTaxonomiesCheckbox = new TechnicalTaxonomiesCheckbox(this, applicationModel);

			setDisplayName("TechnicalTaxonomiesNode");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Technical Taxonomies").tagName("NZ-TREE-NODE").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TechnicalTaxonomiesCheckbox TechnicalTaxonomiesCheckbox() { return TechnicalTaxonomiesCheckbox; }
		
			public class TechnicalTaxonomiesCheckbox extends WebWebElementNodeBase
	{

		
								public TechnicalTaxonomiesCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TechnicalTaxonomiesCheckbox");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TREE-NODE-CHECKBOX").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PrevPageButton extends WebButtonNodeBase
	{

		
								public PrevPageButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PrevPageButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").className(new RegExpProperty("ant-pagination-item-link.*")).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextPageButton extends WebButtonNodeBase
	{

		
								public NextPageButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NextPageButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").className(new RegExpProperty("ant-pagination-item-link.*")).index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class HomePage extends WebPageNodeBase
	{

		
			private ARB100CreateInvoicesEmployeeDomainWebElement ARB100CreateInvoicesEmployeeDomainWebElement;
	private HotspotsMMRS7101Option HotspotsMMRS7101Option;
	private TargetColumnHeader TargetColumnHeader;
	private DataElementColumnHeader DataElementColumnHeader;
	private MMRS7102Option MMRS7102Option;
	private MMRS7101Link MMRS7101Link;
	private MMRS7102Link MMRS7102Link;
	private CategoryColumnHeader CategoryColumnHeader;
	private MAIN2Link MAIN2Link;
	private PDTEDTPCLink PDTEDTPCLink;
	private PDTEIRTFLink PDTEIRTFLink;
	private UAMAPDTELink UAMAPDTELink;
	private ValueFilterButton ValueFilterButton;
	private ValueInputField ValueInputField;
	private FilterButton FilterButton;
	private RaiseNumberButton RaiseNumberButton;
	private ReduceNumberButton ReduceNumberButton;
	private ValueFilterButtonActive ValueFilterButtonActive;
	private ResetButton ResetButton;
	private MAIN5Link MAIN5Link;
	private MAIN6Link MAIN6Link;
	private TESTPRCNATSTEPEXECPGMLink TESTPRCNATSTEPEXECPGMLink;
	private FINDUAMLink FINDUAMLink;
	private GETUAMLink GETUAMLink;
	private READUAMLink READUAMLink;
	private STOREUAMLink STOREUAMLink;
	private TESTJOB1STEP1EXECLink TESTJOB1STEP1EXECLink;
	private TESTJOB2DPSPROPEXECLink TESTJOB2DPSPROPEXECLink;
	private MAIN3Link MAIN3Link;
	private TERMINATLink TERMINATLink;
	private MAIN1Link MAIN1Link;
	private BRANCH1Link BRANCH1Link;
	private BRANCH2Link BRANCH2Link;
	private ESCAPE1Link ESCAPE1Link;
	private INVOKE1Link INVOKE1Link;
	private LOOP1Link LOOP1Link;
	private SUB1Link SUB1Link;
	private SUB2Link SUB2Link;
	private LOOPEV1Link LOOPEV1Link;
	private LOOPEV2Link LOOPEV2Link;
	private SUBR1Link SUBR1Link;
	private Modules Modules;
	private TotalLinesOfCode TotalLinesOfCode;
	private TopTechnologies TopTechnologies;
	private LastScan LastScan;
	private Top10MostReferencedPrograms Top10MostReferencedPrograms;
	private Top10ByBumberOfFDs Top10ByBumberOfFDs;
	private MostFrequentlyUsedDataElement MostFrequentlyUsedDataElement;
	private Top10ProgramsCandidateRules Top10ProgramsCandidateRules;
	private Top10MostReferencedDBTables Top10MostReferencedDBTables;
	private TaxonomiesHeading TaxonomiesHeading;
	private TaxonomiesDiagram TaxonomiesDiagram;
	private Tooltip Tooltip;
	private TypeTableEntry TypeTableEntry;
	private NaturalTableEntry NaturalTableEntry;
	private P446681Link P446681Link;
	private MostReferencedPrograms MostReferencedPrograms;
	private ProgramsWithMostCandidateRules ProgramsWithMostCandidateRules;
	private MostUsedDataElementSet MostUsedDataElementSet;
	private MostReferencedDatabaseTables MostReferencedDatabaseTables;
	private CobolProgramsWithMostFileDescriptorsFileInOut CobolProgramsWithMostFileDescriptorsFileInOut;
	private MostReferencedIMSDatabases MostReferencedIMSDatabases;
	private BusinessProcessEntry BusinessProcessEntry;
	private TotalSourceLinesOfCode TotalSourceLinesOfCode;
						public HomePage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ARB100CreateInvoicesEmployeeDomainWebElement = new ARB100CreateInvoicesEmployeeDomainWebElement(this, applicationModel);
		HotspotsMMRS7101Option = new HotspotsMMRS7101Option(this, applicationModel);
		TargetColumnHeader = new TargetColumnHeader(this, applicationModel);
		DataElementColumnHeader = new DataElementColumnHeader(this, applicationModel);
		MMRS7102Option = new MMRS7102Option(this, applicationModel);
		MMRS7101Link = new MMRS7101Link(this, applicationModel);
		MMRS7102Link = new MMRS7102Link(this, applicationModel);
		CategoryColumnHeader = new CategoryColumnHeader(this, applicationModel);
		MAIN2Link = new MAIN2Link(this, applicationModel);
		PDTEDTPCLink = new PDTEDTPCLink(this, applicationModel);
		PDTEIRTFLink = new PDTEIRTFLink(this, applicationModel);
		UAMAPDTELink = new UAMAPDTELink(this, applicationModel);
		ValueFilterButton = new ValueFilterButton(this, applicationModel);
		ValueInputField = new ValueInputField(this, applicationModel);
		FilterButton = new FilterButton(this, applicationModel);
		RaiseNumberButton = new RaiseNumberButton(this, applicationModel);
		ReduceNumberButton = new ReduceNumberButton(this, applicationModel);
		ValueFilterButtonActive = new ValueFilterButtonActive(this, applicationModel);
		ResetButton = new ResetButton(this, applicationModel);
		MAIN5Link = new MAIN5Link(this, applicationModel);
		MAIN6Link = new MAIN6Link(this, applicationModel);
		TESTPRCNATSTEPEXECPGMLink = new TESTPRCNATSTEPEXECPGMLink(this, applicationModel);
		FINDUAMLink = new FINDUAMLink(this, applicationModel);
		GETUAMLink = new GETUAMLink(this, applicationModel);
		READUAMLink = new READUAMLink(this, applicationModel);
		STOREUAMLink = new STOREUAMLink(this, applicationModel);
		TESTJOB1STEP1EXECLink = new TESTJOB1STEP1EXECLink(this, applicationModel);
		TESTJOB2DPSPROPEXECLink = new TESTJOB2DPSPROPEXECLink(this, applicationModel);
		MAIN3Link = new MAIN3Link(this, applicationModel);
		TERMINATLink = new TERMINATLink(this, applicationModel);
		MAIN1Link = new MAIN1Link(this, applicationModel);
		BRANCH1Link = new BRANCH1Link(this, applicationModel);
		BRANCH2Link = new BRANCH2Link(this, applicationModel);
		ESCAPE1Link = new ESCAPE1Link(this, applicationModel);
		INVOKE1Link = new INVOKE1Link(this, applicationModel);
		LOOP1Link = new LOOP1Link(this, applicationModel);
		SUB1Link = new SUB1Link(this, applicationModel);
		SUB2Link = new SUB2Link(this, applicationModel);
		LOOPEV1Link = new LOOPEV1Link(this, applicationModel);
		LOOPEV2Link = new LOOPEV2Link(this, applicationModel);
		SUBR1Link = new SUBR1Link(this, applicationModel);
		Modules = new Modules(this, applicationModel);
		TotalLinesOfCode = new TotalLinesOfCode(this, applicationModel);
		TopTechnologies = new TopTechnologies(this, applicationModel);
		LastScan = new LastScan(this, applicationModel);
		Top10MostReferencedPrograms = new Top10MostReferencedPrograms(this, applicationModel);
		Top10ByBumberOfFDs = new Top10ByBumberOfFDs(this, applicationModel);
		MostFrequentlyUsedDataElement = new MostFrequentlyUsedDataElement(this, applicationModel);
		Top10ProgramsCandidateRules = new Top10ProgramsCandidateRules(this, applicationModel);
		Top10MostReferencedDBTables = new Top10MostReferencedDBTables(this, applicationModel);
		TaxonomiesHeading = new TaxonomiesHeading(this, applicationModel);
		TaxonomiesDiagram = new TaxonomiesDiagram(this, applicationModel);
		Tooltip = new Tooltip(this, applicationModel);
		TypeTableEntry = new TypeTableEntry(this, applicationModel);
		NaturalTableEntry = new NaturalTableEntry(this, applicationModel);
		P446681Link = new P446681Link(this, applicationModel);
		MostReferencedPrograms = new MostReferencedPrograms(this, applicationModel);
		ProgramsWithMostCandidateRules = new ProgramsWithMostCandidateRules(this, applicationModel);
		MostUsedDataElementSet = new MostUsedDataElementSet(this, applicationModel);
		MostReferencedDatabaseTables = new MostReferencedDatabaseTables(this, applicationModel);
		CobolProgramsWithMostFileDescriptorsFileInOut = new CobolProgramsWithMostFileDescriptorsFileInOut(this, applicationModel);
		MostReferencedIMSDatabases = new MostReferencedIMSDatabases(this, applicationModel);
		BusinessProcessEntry = new BusinessProcessEntry(this, applicationModel);
		TotalSourceLinesOfCode = new TotalSourceLinesOfCode(this, applicationModel);

			setDisplayName("HomePage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ARB100CreateInvoicesEmployeeDomainWebElement ARB100CreateInvoicesEmployeeDomainWebElement() { return ARB100CreateInvoicesEmployeeDomainWebElement; }
		public HotspotsMMRS7101Option HotspotsMMRS7101Option() { return HotspotsMMRS7101Option; }
		public TargetColumnHeader TargetColumnHeader() { return TargetColumnHeader; }
		public DataElementColumnHeader DataElementColumnHeader() { return DataElementColumnHeader; }
		public MMRS7102Option MMRS7102Option() { return MMRS7102Option; }
		public MMRS7101Link MMRS7101Link() { return MMRS7101Link; }
		public MMRS7102Link MMRS7102Link() { return MMRS7102Link; }
		public CategoryColumnHeader CategoryColumnHeader() { return CategoryColumnHeader; }
		public MAIN2Link MAIN2Link() { return MAIN2Link; }
		public PDTEDTPCLink PDTEDTPCLink() { return PDTEDTPCLink; }
		public PDTEIRTFLink PDTEIRTFLink() { return PDTEIRTFLink; }
		public UAMAPDTELink UAMAPDTELink() { return UAMAPDTELink; }
		public ValueFilterButton ValueFilterButton() { return ValueFilterButton; }
		public ValueInputField ValueInputField() { return ValueInputField; }
		public FilterButton FilterButton() { return FilterButton; }
		public RaiseNumberButton RaiseNumberButton() { return RaiseNumberButton; }
		public ReduceNumberButton ReduceNumberButton() { return ReduceNumberButton; }
		public ValueFilterButtonActive ValueFilterButtonActive() { return ValueFilterButtonActive; }
		public ResetButton ResetButton() { return ResetButton; }
		public MAIN5Link MAIN5Link() { return MAIN5Link; }
		public MAIN6Link MAIN6Link() { return MAIN6Link; }
		public TESTPRCNATSTEPEXECPGMLink TESTPRCNATSTEPEXECPGMLink() { return TESTPRCNATSTEPEXECPGMLink; }
		public FINDUAMLink FINDUAMLink() { return FINDUAMLink; }
		public GETUAMLink GETUAMLink() { return GETUAMLink; }
		public READUAMLink READUAMLink() { return READUAMLink; }
		public STOREUAMLink STOREUAMLink() { return STOREUAMLink; }
		public TESTJOB1STEP1EXECLink TESTJOB1STEP1EXECLink() { return TESTJOB1STEP1EXECLink; }
		public TESTJOB2DPSPROPEXECLink TESTJOB2DPSPROPEXECLink() { return TESTJOB2DPSPROPEXECLink; }
		public MAIN3Link MAIN3Link() { return MAIN3Link; }
		public TERMINATLink TERMINATLink() { return TERMINATLink; }
		public MAIN1Link MAIN1Link() { return MAIN1Link; }
		public BRANCH1Link BRANCH1Link() { return BRANCH1Link; }
		public BRANCH2Link BRANCH2Link() { return BRANCH2Link; }
		public ESCAPE1Link ESCAPE1Link() { return ESCAPE1Link; }
		public INVOKE1Link INVOKE1Link() { return INVOKE1Link; }
		public LOOP1Link LOOP1Link() { return LOOP1Link; }
		public SUB1Link SUB1Link() { return SUB1Link; }
		public SUB2Link SUB2Link() { return SUB2Link; }
		public LOOPEV1Link LOOPEV1Link() { return LOOPEV1Link; }
		public LOOPEV2Link LOOPEV2Link() { return LOOPEV2Link; }
		public SUBR1Link SUBR1Link() { return SUBR1Link; }
		public Modules Modules() { return Modules; }
		public TotalLinesOfCode TotalLinesOfCode() { return TotalLinesOfCode; }
		public TopTechnologies TopTechnologies() { return TopTechnologies; }
		public LastScan LastScan() { return LastScan; }
		public Top10MostReferencedPrograms Top10MostReferencedPrograms() { return Top10MostReferencedPrograms; }
		public Top10ByBumberOfFDs Top10ByBumberOfFDs() { return Top10ByBumberOfFDs; }
		public MostFrequentlyUsedDataElement MostFrequentlyUsedDataElement() { return MostFrequentlyUsedDataElement; }
		public Top10ProgramsCandidateRules Top10ProgramsCandidateRules() { return Top10ProgramsCandidateRules; }
		public Top10MostReferencedDBTables Top10MostReferencedDBTables() { return Top10MostReferencedDBTables; }
		public TaxonomiesHeading TaxonomiesHeading() { return TaxonomiesHeading; }
		public TaxonomiesDiagram TaxonomiesDiagram() { return TaxonomiesDiagram; }
		public Tooltip Tooltip() { return Tooltip; }
		public TypeTableEntry TypeTableEntry() { return TypeTableEntry; }
		public NaturalTableEntry NaturalTableEntry() { return NaturalTableEntry; }
		public P446681Link P446681Link() { return P446681Link; }
		public MostReferencedPrograms MostReferencedPrograms() { return MostReferencedPrograms; }
		public ProgramsWithMostCandidateRules ProgramsWithMostCandidateRules() { return ProgramsWithMostCandidateRules; }
		public MostUsedDataElementSet MostUsedDataElementSet() { return MostUsedDataElementSet; }
		public MostReferencedDatabaseTables MostReferencedDatabaseTables() { return MostReferencedDatabaseTables; }
		public CobolProgramsWithMostFileDescriptorsFileInOut CobolProgramsWithMostFileDescriptorsFileInOut() { return CobolProgramsWithMostFileDescriptorsFileInOut; }
		public MostReferencedIMSDatabases MostReferencedIMSDatabases() { return MostReferencedIMSDatabases; }
		public BusinessProcessEntry BusinessProcessEntry() { return BusinessProcessEntry; }
		public TotalSourceLinesOfCode TotalSourceLinesOfCode() { return TotalSourceLinesOfCode; }
		
			public class ARB100CreateInvoicesEmployeeDomainWebElement extends WebWebElementNodeBase
	{

		
								public ARB100CreateInvoicesEmployeeDomainWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ARB100Create InvoicesEmployee domain");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("ARB100Create InvoicesEmployee domain").tagName("angular-tag-cloud").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HotspotsMMRS7101Option extends WebWebElementNodeBase
	{

		
								public HotspotsMMRS7101Option(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HotspotsMMRS7101Option");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS7101").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetColumnHeader extends WebWebElementNodeBase
	{

		
								public TargetColumnHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TargetColumnHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Target ").tagName("TH").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataElementColumnHeader extends WebWebElementNodeBase
	{

		
								public DataElementColumnHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataElementColumnHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Data Element").tagName("TH").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7102Option extends WebWebElementNodeBase
	{

		
								public MMRS7102Option(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7102Option");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS7102").tagName("TD").id("name").className("mining-table__column ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101Link extends WebWebElementNodeBase
	{

		
								public MMRS7101Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" MMRS7101 ").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7102Link extends WebWebElementNodeBase
	{

		
								public MMRS7102Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7102Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" MMRS7102 ").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CategoryColumnHeader extends WebWebElementNodeBase
	{

		
								public CategoryColumnHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CategoryColumnHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Category").tagName("TH").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MAIN2Link extends WebWebElementNodeBase
	{

		
								public MAIN2Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MAIN2Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MAIN2").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PDTEDTPCLink extends WebWebElementNodeBase
	{

		
								public PDTEDTPCLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PDTEDTPCLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("PDTEDTPC").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PDTEIRTFLink extends WebWebElementNodeBase
	{

		
								public PDTEIRTFLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PDTEIRTFLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("PDTEIRTF").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UAMAPDTELink extends WebWebElementNodeBase
	{

		
								public UAMAPDTELink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UAMAPDTELink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("UAMAPDTE").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ValueFilterButton extends WebWebElementNodeBase
	{

		
								public ValueFilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ValueFilterButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-filter type-based-filter__filter-icon--not-selected").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ValueInputField extends WebEditFieldNodeBase
	{

		
								public ValueInputField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ValueInputField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").placeholder("Enter number between 1 and 4").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterButton extends WebButtonNodeBase
	{

		
								public FilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().innerText("Filter").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RaiseNumberButton extends WebWebElementNodeBase
	{

		
								public RaiseNumberButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RaiseNumberButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").className("ant-input-number-handler ant-input-number-handler-up").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReduceNumberButton extends WebWebElementNodeBase
	{

		
								public ReduceNumberButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReduceNumberButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").className("ant-input-number-handler ant-input-number-handler-down").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ValueFilterButtonActive extends WebWebElementNodeBase
	{

		
								public ValueFilterButtonActive(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ValueFilterButtonActive");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-filter type-based-filter__filter-icon--selected").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResetButton extends WebButtonNodeBase
	{

		
								public ResetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResetButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().innerText("Reset").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MAIN5Link extends WebWebElementNodeBase
	{

		
								public MAIN5Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MAIN5Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MAIN5").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MAIN6Link extends WebWebElementNodeBase
	{

		
								public MAIN6Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MAIN6Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MAIN6").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TESTPRCNATSTEPEXECPGMLink extends WebWebElementNodeBase
	{

		
								public TESTPRCNATSTEPEXECPGMLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TESTPRCNATSTEPEXECPGMLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("TESTPRC.NATSTEP.EXEC_PGM").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FINDUAMLink extends WebWebElementNodeBase
	{

		
								public FINDUAMLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FINDUAMLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("FINDUAM").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GETUAMLink extends WebWebElementNodeBase
	{

		
								public GETUAMLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GETUAMLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("GETUAM").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class READUAMLink extends WebWebElementNodeBase
	{

		
								public READUAMLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("READUAMLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("READUAM").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class STOREUAMLink extends WebWebElementNodeBase
	{

		
								public STOREUAMLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("STOREUAMLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("STOREUAM").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TESTJOB1STEP1EXECLink extends WebWebElementNodeBase
	{

		
								public TESTJOB1STEP1EXECLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TESTJOB1STEP1EXECLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" TESTJOB1.STEP1.EXEC ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TESTJOB2DPSPROPEXECLink extends WebWebElementNodeBase
	{

		
								public TESTJOB2DPSPROPEXECLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TESTJOB2DPSPROPEXECLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("TESTJOB2.DPSPROP.EXEC").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MAIN3Link extends WebWebElementNodeBase
	{

		
								public MAIN3Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MAIN3Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MAIN3").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TERMINATLink extends WebWebElementNodeBase
	{

		
								public TERMINATLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TERMINATLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("TERMINAT").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MAIN1Link extends WebWebElementNodeBase
	{

		
								public MAIN1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MAIN1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MAIN1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BRANCH1Link extends WebWebElementNodeBase
	{

		
								public BRANCH1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BRANCH1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("BRANCH1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BRANCH2Link extends WebWebElementNodeBase
	{

		
								public BRANCH2Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BRANCH2Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("BRANCH2").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ESCAPE1Link extends WebWebElementNodeBase
	{

		
								public ESCAPE1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ESCAPE1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("ESCAPE1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class INVOKE1Link extends WebWebElementNodeBase
	{

		
								public INVOKE1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("INVOKE1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("INVOKE1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LOOP1Link extends WebWebElementNodeBase
	{

		
								public LOOP1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LOOP1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("LOOP1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SUB1Link extends WebWebElementNodeBase
	{

		
								public SUB1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SUB1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SUB1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SUB2Link extends WebWebElementNodeBase
	{

		
								public SUB2Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SUB2Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SUB2").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LOOPEV1Link extends WebWebElementNodeBase
	{

		
								public LOOPEV1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LOOPEV1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("LOOPEV1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LOOPEV2Link extends WebWebElementNodeBase
	{

		
								public LOOPEV2Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LOOPEV2Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("LOOPEV2").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SUBR1Link extends WebWebElementNodeBase
	{

		
								public SUBR1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SUBR1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SUBR1").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Modules extends WebWebElementNodeBase
	{

		
								public Modules(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Modules");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Modules").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TotalLinesOfCode extends WebWebElementNodeBase
	{

		
								public TotalLinesOfCode(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Total Lines Of Code");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Total Source Lines of Code").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TopTechnologies extends WebWebElementNodeBase
	{

		
								public TopTechnologies(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Top Technologies");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Top Technologies").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LastScan extends WebWebElementNodeBase
	{

		
								public LastScan(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Last Scan");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Last Scan").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Top10MostReferencedPrograms extends WebWebElementNodeBase
	{

		
								public Top10MostReferencedPrograms(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Top10MostReferencedPrograms");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Top 10 most frequently referenced programs").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Top10ByBumberOfFDs extends WebWebElementNodeBase
	{

		
								public Top10ByBumberOfFDs(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Top10ByBumberOfFDs");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Top 10 by number of FDs - FileIn/Out").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MostFrequentlyUsedDataElement extends WebWebElementNodeBase
	{

		
								public MostFrequentlyUsedDataElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MostFrequentlyUsedDataElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Most Frequently used data element, data set").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Top10ProgramsCandidateRules extends WebWebElementNodeBase
	{

		
								public Top10ProgramsCandidateRules(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Top10ProgramsCandidateRules");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-card-head-title ng-star-inserted").innerText("Top 10 programs with highest number of candidate rules").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Top10MostReferencedDBTables extends WebWebElementNodeBase
	{

		
								public Top10MostReferencedDBTables(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Top10MostReferencedDBTables");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Top 10 most referenced database tables").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomiesHeading extends WebWebElementNodeBase
	{

		
								public TaxonomiesHeading(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomiesHeading");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("All Taxonomies").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomiesDiagram extends WebWebElementNodeBase
	{

		
								public TaxonomiesDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomiesDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Tooltip extends WebWebElementNodeBase
	{

		
								public Tooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-name").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TypeTableEntry extends WebWebElementNodeBase
	{

		
								public TypeTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TypeTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Program").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalTableEntry extends WebWebElementNodeBase
	{

		
								public NaturalTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("NATURAL").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class P446681Link extends WebLinkNodeBase
	{

		
								public P446681Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("P446681 ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().accessibilityName("").innerText("P446681 ").role("").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MostReferencedPrograms extends WebWebElementNodeBase
	{

		
								public MostReferencedPrograms(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MostReferencedPrograms");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Most Referenced Programs").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProgramsWithMostCandidateRules extends WebWebElementNodeBase
	{

		
								public ProgramsWithMostCandidateRules(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProgramsWithMostCandidateRules");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-card-head-title ng-star-inserted").innerText("Programs with Most Candidate Business Rules").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MostUsedDataElementSet extends WebWebElementNodeBase
	{

		
								public MostUsedDataElementSet(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MostUsedDataElementSet");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Most Used Data Element/Set").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MostReferencedDatabaseTables extends WebWebElementNodeBase
	{

		
								public MostReferencedDatabaseTables(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MostReferencedDatabaseTables");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Most Referenced Database Tables").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolProgramsWithMostFileDescriptorsFileInOut extends WebWebElementNodeBase
	{

		
								public CobolProgramsWithMostFileDescriptorsFileInOut(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolProgramsWithMostFileDescriptorsFileInOut");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COBOL Programs with Most File Descriptors (File In/Out)").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MostReferencedIMSDatabases extends WebWebElementNodeBase
	{

		
								public MostReferencedIMSDatabases(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Most referenced IMS Databases");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-card-head-title ng-star-inserted").innerText("Most referenced IMS Databases").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BusinessProcessEntry extends WebWebElementNodeBase
	{

		
								public BusinessProcessEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BusinessProcessEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("BusinessProcess").tagName("DIV").className("ant-select-item-option-content").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TotalSourceLinesOfCode extends WebWebElementNodeBase
	{

		
								public TotalSourceLinesOfCode(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TotalSourceLinesOfCode");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-card-body").innerText(new RegExpProperty("Total Source Lines of Code.*")).tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CodeViewer extends WebPageNodeBase
	{

		
			private CodeViewerAnnotation CodeViewerAnnotation;
	private AnnotationCategoryDropdownCodeViewer AnnotationCategoryDropdownCodeViewer;
	private AnnotationStateDropdownCodeViewer AnnotationStateDropdownCodeViewer;
	private ForReviewElementCodeViewer ForReviewElementCodeViewer;
	private AnnotationButton AnnotationButton;
	private Line20CodeViewer Line20CodeViewer;
	private TestannotationCodeViewer TestannotationCodeViewer;
	private DatabaseEntry DatabaseEntry;
	private AnnotationTrashButton AnnotationTrashButton;
	private PencilButton PencilButton;
	private ApprovedElementCodeViewer ApprovedElementCodeViewer;
	private ApprovedState ApprovedState;
	private AddDataDictionary AddDataDictionary;
	private DataDictUIState DataDictUIState;
	private DataDictDescriptionCodeViewer DataDictDescriptionCodeViewer;
	private FormatByteLength FormatByteLength;
	private TestCodeViewer TestCodeViewer;
	private Line23CodeViewer Line23CodeViewer;
	private EntryDialogNew EntryDialogNew;
	private Edit Edit;
	private Remove Remove;
	private EntryDailog EntryDailog;
	private DataDictMap DataDictMap;
	private ConsistentAnnotationRuleDropdown ConsistentAnnotationRuleDropdown;
	private ConsistentAnnotationDatabaseEntry ConsistentAnnotationDatabaseEntry;
	private ConsistentAnnotationCategoryADropdown ConsistentAnnotationCategoryADropdown;
	private ConsistentAnnotationCategoryBEntry ConsistentAnnotationCategoryBEntry;
	private ConsistentAnnotationDescriptionField ConsistentAnnotationDescriptionField;
	private ConsistentAnnotationDatabaseDropdown ConsistentAnnotationDatabaseDropdown;
	private ConsistentAnnotationCategoryBDropdown ConsistentAnnotationCategoryBDropdown;
	private ConsistentAnnotationStateDropdown ConsistentAnnotationStateDropdown;
	private ConsistentAnnotationDeleteButton ConsistentAnnotationDeleteButton;
	private ConsistentAnnotationConfirmDeleteButton ConsistentAnnotationConfirmDeleteButton;
	private ConsistentAnnotationHeader ConsistentAnnotationHeader;
	private ConsistentAnnotationCategoryDEntry ConsistentAnnotationCategoryDEntry;
	private ConsistentAnnotationCategoryEmptyDropdown ConsistentAnnotationCategoryEmptyDropdown;
	private ConsistentAnnotationCategoryDDropdown ConsistentAnnotationCategoryDDropdown;
	private MYHEXTRANS MYHEXTRANS;
	private penIcon penIcon;
	private DeleteIcon2 DeleteIcon2;
	private DeleteIcon3 DeleteIcon3;
	private ConsistentAnnotationApprovedStateDropdown ConsistentAnnotationApprovedStateDropdown;
	private ForReviewstate ForReviewstate;
	private CancelButton CancelButton;
	private MMRS7101AnnotationEditor MMRS7101AnnotationEditor;
	private ConsistentAnnotationApprovedStateEntry ConsistentAnnotationApprovedStateEntry;
	private ForReviewElementCodeViewer1 ForReviewElementCodeViewer1;
	private Description Description;
	private AnnotationDescriptionCodeViewer AnnotationDescriptionCodeViewer;
	private PencilButton1 PencilButton1;
	private DeleteIcon1 DeleteIcon1;
	private AddAnnotation AddAnnotation;
	private ConAnnotationCustomInputString ConAnnotationCustomInputString;
	private ConAnnotationRepeater1 ConAnnotationRepeater1;
	private ConAnnotationRepeater2 ConAnnotationRepeater2;
	private ConAnnotationRepeater3 ConAnnotationRepeater3;
	private ConAnnotationAdd ConAnnotationAdd;
	private ConAnnotationMinus3 ConAnnotationMinus3;
	private EmptyCategory EmptyCategory;
	private AnnotationCategoryA AnnotationCategoryA;
	private CategoryDropDown CategoryDropDown;
	private AnnotationCategoryUnspecifiedDropdown AnnotationCategoryUnspecifiedDropdown;
	private ConsistentAnnotationCategoryUnspecifiedDropdown ConsistentAnnotationCategoryUnspecifiedDropdown;
	private ConsistentAnnotationDeadCodeDropdown ConsistentAnnotationDeadCodeDropdown;
	private AnnotationTypeDropdown AnnotationTypeDropdown;
	private TypeLabel TypeLabel;
	private CategoryLabel CategoryLabel;
	private CategoryField CategoryField;
	private ConAnnotationMinus2 ConAnnotationMinus2;
	private AnnotationSaveButton AnnotationSaveButton;
						public CodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CodeViewerAnnotation = new CodeViewerAnnotation(this, applicationModel);
		AnnotationCategoryDropdownCodeViewer = new AnnotationCategoryDropdownCodeViewer(this, applicationModel);
		AnnotationStateDropdownCodeViewer = new AnnotationStateDropdownCodeViewer(this, applicationModel);
		ForReviewElementCodeViewer = new ForReviewElementCodeViewer(this, applicationModel);
		AnnotationButton = new AnnotationButton(this, applicationModel);
		Line20CodeViewer = new Line20CodeViewer(this, applicationModel);
		TestannotationCodeViewer = new TestannotationCodeViewer(this, applicationModel);
		DatabaseEntry = new DatabaseEntry(this, applicationModel);
		AnnotationTrashButton = new AnnotationTrashButton(this, applicationModel);
		PencilButton = new PencilButton(this, applicationModel);
		ApprovedElementCodeViewer = new ApprovedElementCodeViewer(this, applicationModel);
		ApprovedState = new ApprovedState(this, applicationModel);
		AddDataDictionary = new AddDataDictionary(this, applicationModel);
		DataDictUIState = new DataDictUIState(this, applicationModel);
		DataDictDescriptionCodeViewer = new DataDictDescriptionCodeViewer(this, applicationModel);
		FormatByteLength = new FormatByteLength(this, applicationModel);
		TestCodeViewer = new TestCodeViewer(this, applicationModel);
		Line23CodeViewer = new Line23CodeViewer(this, applicationModel);
		EntryDialogNew = new EntryDialogNew(this, applicationModel);
		Edit = new Edit(this, applicationModel);
		Remove = new Remove(this, applicationModel);
		EntryDailog = new EntryDailog(this, applicationModel);
		DataDictMap = new DataDictMap(this, applicationModel);
		ConsistentAnnotationRuleDropdown = new ConsistentAnnotationRuleDropdown(this, applicationModel);
		ConsistentAnnotationDatabaseEntry = new ConsistentAnnotationDatabaseEntry(this, applicationModel);
		ConsistentAnnotationCategoryADropdown = new ConsistentAnnotationCategoryADropdown(this, applicationModel);
		ConsistentAnnotationCategoryBEntry = new ConsistentAnnotationCategoryBEntry(this, applicationModel);
		ConsistentAnnotationDescriptionField = new ConsistentAnnotationDescriptionField(this, applicationModel);
		ConsistentAnnotationDatabaseDropdown = new ConsistentAnnotationDatabaseDropdown(this, applicationModel);
		ConsistentAnnotationCategoryBDropdown = new ConsistentAnnotationCategoryBDropdown(this, applicationModel);
		ConsistentAnnotationStateDropdown = new ConsistentAnnotationStateDropdown(this, applicationModel);
		ConsistentAnnotationDeleteButton = new ConsistentAnnotationDeleteButton(this, applicationModel);
		ConsistentAnnotationConfirmDeleteButton = new ConsistentAnnotationConfirmDeleteButton(this, applicationModel);
		ConsistentAnnotationHeader = new ConsistentAnnotationHeader(this, applicationModel);
		ConsistentAnnotationCategoryDEntry = new ConsistentAnnotationCategoryDEntry(this, applicationModel);
		ConsistentAnnotationCategoryEmptyDropdown = new ConsistentAnnotationCategoryEmptyDropdown(this, applicationModel);
		ConsistentAnnotationCategoryDDropdown = new ConsistentAnnotationCategoryDDropdown(this, applicationModel);
		MYHEXTRANS = new MYHEXTRANS(this, applicationModel);
		penIcon = new penIcon(this, applicationModel);
		DeleteIcon2 = new DeleteIcon2(this, applicationModel);
		DeleteIcon3 = new DeleteIcon3(this, applicationModel);
		ConsistentAnnotationApprovedStateDropdown = new ConsistentAnnotationApprovedStateDropdown(this, applicationModel);
		ForReviewstate = new ForReviewstate(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		MMRS7101AnnotationEditor = new MMRS7101AnnotationEditor(this, applicationModel);
		ConsistentAnnotationApprovedStateEntry = new ConsistentAnnotationApprovedStateEntry(this, applicationModel);
		ForReviewElementCodeViewer1 = new ForReviewElementCodeViewer1(this, applicationModel);
		Description = new Description(this, applicationModel);
		AnnotationDescriptionCodeViewer = new AnnotationDescriptionCodeViewer(this, applicationModel);
		PencilButton1 = new PencilButton1(this, applicationModel);
		DeleteIcon1 = new DeleteIcon1(this, applicationModel);
		AddAnnotation = new AddAnnotation(this, applicationModel);
		ConAnnotationCustomInputString = new ConAnnotationCustomInputString(this, applicationModel);
		ConAnnotationRepeater1 = new ConAnnotationRepeater1(this, applicationModel);
		ConAnnotationRepeater2 = new ConAnnotationRepeater2(this, applicationModel);
		ConAnnotationRepeater3 = new ConAnnotationRepeater3(this, applicationModel);
		ConAnnotationAdd = new ConAnnotationAdd(this, applicationModel);
		ConAnnotationMinus3 = new ConAnnotationMinus3(this, applicationModel);
		EmptyCategory = new EmptyCategory(this, applicationModel);
		AnnotationCategoryA = new AnnotationCategoryA(this, applicationModel);
		CategoryDropDown = new CategoryDropDown(this, applicationModel);
		AnnotationCategoryUnspecifiedDropdown = new AnnotationCategoryUnspecifiedDropdown(this, applicationModel);
		ConsistentAnnotationCategoryUnspecifiedDropdown = new ConsistentAnnotationCategoryUnspecifiedDropdown(this, applicationModel);
		ConsistentAnnotationDeadCodeDropdown = new ConsistentAnnotationDeadCodeDropdown(this, applicationModel);
		AnnotationTypeDropdown = new AnnotationTypeDropdown(this, applicationModel);
		TypeLabel = new TypeLabel(this, applicationModel);
		CategoryLabel = new CategoryLabel(this, applicationModel);
		CategoryField = new CategoryField(this, applicationModel);
		ConAnnotationMinus2 = new ConAnnotationMinus2(this, applicationModel);
		AnnotationSaveButton = new AnnotationSaveButton(this, applicationModel);

			setDisplayName("CodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CodeViewerAnnotation CodeViewerAnnotation() { return CodeViewerAnnotation; }
		public AnnotationCategoryDropdownCodeViewer AnnotationCategoryDropdownCodeViewer() { return AnnotationCategoryDropdownCodeViewer; }
		public AnnotationStateDropdownCodeViewer AnnotationStateDropdownCodeViewer() { return AnnotationStateDropdownCodeViewer; }
		public ForReviewElementCodeViewer ForReviewElementCodeViewer() { return ForReviewElementCodeViewer; }
		public AnnotationButton AnnotationButton() { return AnnotationButton; }
		public Line20CodeViewer Line20CodeViewer() { return Line20CodeViewer; }
		public TestannotationCodeViewer TestannotationCodeViewer() { return TestannotationCodeViewer; }
		public DatabaseEntry DatabaseEntry() { return DatabaseEntry; }
		public AnnotationTrashButton AnnotationTrashButton() { return AnnotationTrashButton; }
		public PencilButton PencilButton() { return PencilButton; }
		public ApprovedElementCodeViewer ApprovedElementCodeViewer() { return ApprovedElementCodeViewer; }
		public ApprovedState ApprovedState() { return ApprovedState; }
		public AddDataDictionary AddDataDictionary() { return AddDataDictionary; }
		public DataDictUIState DataDictUIState() { return DataDictUIState; }
		public DataDictDescriptionCodeViewer DataDictDescriptionCodeViewer() { return DataDictDescriptionCodeViewer; }
		public FormatByteLength FormatByteLength() { return FormatByteLength; }
		public TestCodeViewer TestCodeViewer() { return TestCodeViewer; }
		public Line23CodeViewer Line23CodeViewer() { return Line23CodeViewer; }
		public EntryDialogNew EntryDialogNew() { return EntryDialogNew; }
		public Edit Edit() { return Edit; }
		public Remove Remove() { return Remove; }
		public EntryDailog EntryDailog() { return EntryDailog; }
		public DataDictMap DataDictMap() { return DataDictMap; }
		public ConsistentAnnotationRuleDropdown ConsistentAnnotationRuleDropdown() { return ConsistentAnnotationRuleDropdown; }
		public ConsistentAnnotationDatabaseEntry ConsistentAnnotationDatabaseEntry() { return ConsistentAnnotationDatabaseEntry; }
		public ConsistentAnnotationCategoryADropdown ConsistentAnnotationCategoryADropdown() { return ConsistentAnnotationCategoryADropdown; }
		public ConsistentAnnotationCategoryBEntry ConsistentAnnotationCategoryBEntry() { return ConsistentAnnotationCategoryBEntry; }
		public ConsistentAnnotationDescriptionField ConsistentAnnotationDescriptionField() { return ConsistentAnnotationDescriptionField; }
		public ConsistentAnnotationDatabaseDropdown ConsistentAnnotationDatabaseDropdown() { return ConsistentAnnotationDatabaseDropdown; }
		public ConsistentAnnotationCategoryBDropdown ConsistentAnnotationCategoryBDropdown() { return ConsistentAnnotationCategoryBDropdown; }
		public ConsistentAnnotationStateDropdown ConsistentAnnotationStateDropdown() { return ConsistentAnnotationStateDropdown; }
		public ConsistentAnnotationDeleteButton ConsistentAnnotationDeleteButton() { return ConsistentAnnotationDeleteButton; }
		public ConsistentAnnotationConfirmDeleteButton ConsistentAnnotationConfirmDeleteButton() { return ConsistentAnnotationConfirmDeleteButton; }
		public ConsistentAnnotationHeader ConsistentAnnotationHeader() { return ConsistentAnnotationHeader; }
		public ConsistentAnnotationCategoryDEntry ConsistentAnnotationCategoryDEntry() { return ConsistentAnnotationCategoryDEntry; }
		public ConsistentAnnotationCategoryEmptyDropdown ConsistentAnnotationCategoryEmptyDropdown() { return ConsistentAnnotationCategoryEmptyDropdown; }
		public ConsistentAnnotationCategoryDDropdown ConsistentAnnotationCategoryDDropdown() { return ConsistentAnnotationCategoryDDropdown; }
		public MYHEXTRANS MYHEXTRANS() { return MYHEXTRANS; }
		public penIcon penIcon() { return penIcon; }
		public DeleteIcon2 DeleteIcon2() { return DeleteIcon2; }
		public DeleteIcon3 DeleteIcon3() { return DeleteIcon3; }
		public ConsistentAnnotationApprovedStateDropdown ConsistentAnnotationApprovedStateDropdown() { return ConsistentAnnotationApprovedStateDropdown; }
		public ForReviewstate ForReviewstate() { return ForReviewstate; }
		public CancelButton CancelButton() { return CancelButton; }
		public MMRS7101AnnotationEditor MMRS7101AnnotationEditor() { return MMRS7101AnnotationEditor; }
		public ConsistentAnnotationApprovedStateEntry ConsistentAnnotationApprovedStateEntry() { return ConsistentAnnotationApprovedStateEntry; }
		public ForReviewElementCodeViewer1 ForReviewElementCodeViewer1() { return ForReviewElementCodeViewer1; }
		public Description Description() { return Description; }
		public AnnotationDescriptionCodeViewer AnnotationDescriptionCodeViewer() { return AnnotationDescriptionCodeViewer; }
		public PencilButton1 PencilButton1() { return PencilButton1; }
		public DeleteIcon1 DeleteIcon1() { return DeleteIcon1; }
		public AddAnnotation AddAnnotation() { return AddAnnotation; }
		public ConAnnotationCustomInputString ConAnnotationCustomInputString() { return ConAnnotationCustomInputString; }
		public ConAnnotationRepeater1 ConAnnotationRepeater1() { return ConAnnotationRepeater1; }
		public ConAnnotationRepeater2 ConAnnotationRepeater2() { return ConAnnotationRepeater2; }
		public ConAnnotationRepeater3 ConAnnotationRepeater3() { return ConAnnotationRepeater3; }
		public ConAnnotationAdd ConAnnotationAdd() { return ConAnnotationAdd; }
		public ConAnnotationMinus3 ConAnnotationMinus3() { return ConAnnotationMinus3; }
		public EmptyCategory EmptyCategory() { return EmptyCategory; }
		public AnnotationCategoryA AnnotationCategoryA() { return AnnotationCategoryA; }
		public CategoryDropDown CategoryDropDown() { return CategoryDropDown; }
		public AnnotationCategoryUnspecifiedDropdown AnnotationCategoryUnspecifiedDropdown() { return AnnotationCategoryUnspecifiedDropdown; }
		public ConsistentAnnotationCategoryUnspecifiedDropdown ConsistentAnnotationCategoryUnspecifiedDropdown() { return ConsistentAnnotationCategoryUnspecifiedDropdown; }
		public ConsistentAnnotationDeadCodeDropdown ConsistentAnnotationDeadCodeDropdown() { return ConsistentAnnotationDeadCodeDropdown; }
		public AnnotationTypeDropdown AnnotationTypeDropdown() { return AnnotationTypeDropdown; }
		public TypeLabel TypeLabel() { return TypeLabel; }
		public CategoryLabel CategoryLabel() { return CategoryLabel; }
		public CategoryField CategoryField() { return CategoryField; }
		public ConAnnotationMinus2 ConAnnotationMinus2() { return ConAnnotationMinus2; }
		public AnnotationSaveButton AnnotationSaveButton() { return AnnotationSaveButton; }
		
			public class CodeViewerAnnotation extends WebWebElementNodeBase
	{

		
								public CodeViewerAnnotation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CodeViewerAnnotation");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Testannotation ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryDropdownCodeViewer extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryDropdownCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryDropdownCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationStateDropdownCodeViewer extends WebWebElementNodeBase
	{

		
								public AnnotationStateDropdownCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationStateDropdownCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT").attribute("formcontrolname", "status").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ForReviewElementCodeViewer extends WebWebElementNodeBase
	{

		
								public ForReviewElementCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ForReviewElementCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("FOR_REVIEW").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationButton extends WebWebElementNodeBase
	{

		
								public AnnotationButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("+AnnotationButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Line20CodeViewer extends WebWebElementNodeBase
	{

		
								public Line20CodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Line20CodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COPY").tagName("SPAN").className("mtk4").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestannotationCodeViewer extends WebWebElementNodeBase
	{

		
								public TestannotationCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestannotationCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("testannotation").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DatabaseEntry extends WebWebElementNodeBase
	{

		
			private AnnotationCategoryDropdownCodeViewer AnnotationCategoryDropdownCodeViewer;
						public DatabaseEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AnnotationCategoryDropdownCodeViewer = new AnnotationCategoryDropdownCodeViewer(this, applicationModel);

			setDisplayName("DatabaseEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("DATABASE").tagName("DIV").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AnnotationCategoryDropdownCodeViewer AnnotationCategoryDropdownCodeViewer() { return AnnotationCategoryDropdownCodeViewer; }
		
			public class AnnotationCategoryDropdownCodeViewer extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryDropdownCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryDropdownCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Rule").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AnnotationTrashButton extends WebWebElementNodeBase
	{

		
								public AnnotationTrashButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationTrashButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("path").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PencilButton extends WebWebElementNodeBase
	{

		
								public PencilButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PencilButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("anticon code-annotation-editor-component__actions--icon anticon-edit").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApprovedElementCodeViewer extends WebWebElementNodeBase
	{

		
								public ApprovedElementCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApprovedElementCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Approved").tagName("div").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApprovedState extends WebWebElementNodeBase
	{

		
								public ApprovedState(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApprovedState");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Approved").tagName("SPAN").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddDataDictionary extends WebWebElementNodeBase
	{

		
								public AddDataDictionary(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddDataDictionary");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Data Dictionary.*")).tagName("span").className("ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictUIState extends WebWebElementNodeBase
	{

		
								public DataDictUIState(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictUIState");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("BUTTON").className("ant-switch ant-switch-small").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictDescriptionCodeViewer extends WebEditFieldNodeBase
	{

		
								public DataDictDescriptionCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictDescriptionCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Description of the new Data Dictionary entry").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FormatByteLength extends WebWebElementNodeBase
	{

		
								public FormatByteLength(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FormatByteLength");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("A (2)").tagName("B").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestCodeViewer extends WebWebElementNodeBase
	{

		
								public TestCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("testCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("test ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Line23CodeViewer extends WebWebElementNodeBase
	{

		
								public Line23CodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("line23CodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty(".*MY-HEX-TRANS.*")).tagName("SPAN").className("mtk1").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EntryDialogNew extends WebWebElementNodeBase
	{

		
			private DescriptionEditor DescriptionEditor;
	private Cancelbutton Cancelbutton;
	private Savebutton Savebutton;
						public EntryDialogNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DescriptionEditor = new DescriptionEditor(this, applicationModel);
		Cancelbutton = new Cancelbutton(this, applicationModel);
		Savebutton = new Savebutton(this, applicationModel);

			setDisplayName("EntryDialogNew");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Format / Byte Length PICX.*")).tagName("DIV").className(new RegExpProperty("ant-modal-body ng-tns-c.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DescriptionEditor DescriptionEditor() { return DescriptionEditor; }
		public Cancelbutton Cancelbutton() { return Cancelbutton; }
		public Savebutton Savebutton() { return Savebutton; }
		
			public class DescriptionEditor extends WebEditFieldNodeBase
	{

		
								public DescriptionEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DescriptionEditor");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").type("textarea").placeholder("Description of the new Data Dictionary entry").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Cancelbutton extends WebWebElementNodeBase
	{

		
								public Cancelbutton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("cancelbutton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Cancel").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Savebutton extends WebWebElementNodeBase
	{

		
								public Savebutton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Savebutton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Save").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Edit extends WebLinkNodeBase
	{

		
								public Edit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Edit");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Edit").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Remove extends WebLinkNodeBase
	{

		
								public Remove(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Remove");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Remove").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EntryDailog extends WebWebElementNodeBase
	{

		
			private DescriptionEditField DescriptionEditField;
	private SaveButton SaveButton;
						public EntryDailog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DescriptionEditField = new DescriptionEditField(this, applicationModel);
		SaveButton = new SaveButton(this, applicationModel);

			setDisplayName("EntryDailog");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Format / Byte Length PICX (8)Database UI File I/O Other ParameterSaveCancel").tagName("DIV").className(new RegExpProperty("ant-modal-body ng-tns-c.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DescriptionEditField DescriptionEditField() { return DescriptionEditField; }
		public SaveButton SaveButton() { return SaveButton; }
		
			public class DescriptionEditField extends WebEditFieldNodeBase
	{

		
								public DescriptionEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DescriptionEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("textarea").placeholder("Description of the new Data Dictionary entry").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveButton extends WebButtonNodeBase
	{

		
								public SaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SaveButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("Save").buttonType("submit").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DataDictMap extends WebEditFieldNodeBase
	{

		
								public DataDictMap(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictMap");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Map").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationRuleDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationRuleDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationRuleDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Rule").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDatabaseEntry extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDatabaseEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDatabaseEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("DATABASE").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryADropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryADropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryADropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category A").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryBEntry extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryBEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryBEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category B").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDescriptionField extends WebEditFieldNodeBase
	{

		
								public ConsistentAnnotationDescriptionField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDescriptionField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Add your annotation text here...").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDatabaseDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDatabaseDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDatabaseDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Database").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryBDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryBDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryBDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category B").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationStateDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationStateDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationStateDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("IN_ANALYSIS").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDeleteButton extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDeleteButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDeleteButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Delete").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationConfirmDeleteButton extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationConfirmDeleteButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationConfirmDeleteButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Delete").tagName("BUTTON").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationHeader extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("span").className("shared-annotation-header__path").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryDEntry extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryDEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryDEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category D").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryEmptyDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryEmptyDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryEmptyDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Select annotation category...").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryDDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryDDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryDDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category D").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MYHEXTRANS extends WebWebElementNodeBase
	{

		
								public MYHEXTRANS(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MY-HEX-TRANS           ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("mtk1").innerText(new RegExpProperty("MY-HEX-TRANS")).tagName("SPAN").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class penIcon extends WebWebElementNodeBase
	{

		
								public penIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("penIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("").innerText("").tagName("A").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteIcon2 extends WebWebElementNodeBase
	{

		
								public DeleteIcon2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteIcon2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("").innerText("").tagName("A").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteIcon3 extends WebWebElementNodeBase
	{

		
								public DeleteIcon3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteIcon3");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("").innerText("").tagName("A").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationApprovedStateDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationApprovedStateDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationApprovedStateDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("APPROVED").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ForReviewstate extends WebWebElementNodeBase
	{

		
								public ForReviewstate(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ForReviewstate");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("For Review ").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends WebButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101AnnotationEditor extends WebWebElementNodeBase
	{

		
								public MMRS7101AnnotationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101AnnotationEditor");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS7101: Annotation Path: src/cobol/programs/MMRS7101.cbl ").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationApprovedStateEntry extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationApprovedStateEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationApprovedStateEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("APPROVED").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ForReviewElementCodeViewer1 extends WebWebElementNodeBase
	{

		
								public ForReviewElementCodeViewer1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ForReviewElementCodeViewer1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("FOR_REVIEW").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Description extends WebWebElementNodeBase
	{

		
								public Description(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Description");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Test2New ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationDescriptionCodeViewer extends WebEditFieldNodeBase
	{

		
								public AnnotationDescriptionCodeViewer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationDescriptionCodeViewer");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("annotation").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PencilButton1 extends WebWebElementNodeBase
	{

		
								public PencilButton1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PencilButton1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("").innerText("").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteIcon1 extends WebWebElementNodeBase
	{

		
								public DeleteIcon1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteIcon1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("i").attribute("nztype", "delete").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddAnnotation extends WebWebElementNodeBase
	{

		
								public AddAnnotation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddAnnotation");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConAnnotationCustomInputString extends WebEditFieldNodeBase
	{

		
								public ConAnnotationCustomInputString(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConAnnotationCustomInputString");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConAnnotationRepeater1 extends WebEditFieldNodeBase
	{

		
								public ConAnnotationRepeater1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConAnnotationRepeater1");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConAnnotationRepeater2 extends WebEditFieldNodeBase
	{

		
								public ConAnnotationRepeater2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConAnnotationRepeater2");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConAnnotationRepeater3 extends WebEditFieldNodeBase
	{

		
								public ConAnnotationRepeater3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConAnnotationRepeater3");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConAnnotationAdd extends WebButtonNodeBase
	{

		
								public ConAnnotationAdd(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConAnnotationAdd");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("Add").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConAnnotationMinus3 extends WebWebElementNodeBase
	{

		
								public ConAnnotationMinus3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConAnnotationMinus3");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon custom-property-field__remove-icon anticon-minus-circle-o").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EmptyCategory extends WebWebElementNodeBase
	{

		
								public EmptyCategory(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EmptyCategory");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("<Unspecified> ").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryA extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryA(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryA");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category A").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CategoryDropDown extends WebWebElementNodeBase
	{

		
								public CategoryDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CategoryDropDown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().attribute("formcontrolname", "category").tagName("NZ-SELECT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryUnspecifiedDropdown extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryUnspecifiedDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryUnspecifiedDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty(".*Unspecified.*")).tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryUnspecifiedDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryUnspecifiedDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryUnspecifiedDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("<Unspecified> ").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDeadCodeDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDeadCodeDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDeadCodeDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("DEAD_CODE").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationTypeDropdown extends WebWebElementNodeBase
	{

		
								public AnnotationTypeDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationTypeDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT").attribute("formcontrolname", "type").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TypeLabel extends WebWebElementNodeBase
	{

		
								public TypeLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TypeLabel");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Type").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CategoryLabel extends WebWebElementNodeBase
	{

		
								public CategoryLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CategoryLabel");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Category").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CategoryField extends WebWebElementNodeBase
	{

		
								public CategoryField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CategoryField");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty(".*Category.*")).tagName("NZ-FORM-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConAnnotationMinus2 extends WebWebElementNodeBase
	{

		
								public ConAnnotationMinus2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConAnnotationMinus2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon custom-property-field__remove-icon anticon-minus-circle-o").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationSaveButton extends WebButtonNodeBase
	{

		
								public AnnotationSaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationSaveButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Save").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ModuleDetailsPage extends WebPageNodeBase
	{

		
			private CodeViewerButton CodeViewerButton;
	private TestAnnotationValue TestAnnotationValue;
	private StateValue StateValue;
	private Annotation1EditButton Annotation1EditButton;
	private DataDictionary1EditButton DataDictionary1EditButton;
	private EditCodeAnnotationDetailsWindow EditCodeAnnotationDetailsWindow;
	private ModuleDescriptionEditField ModuleDescriptionEditField;
	private OpenControlFlowGraphButton OpenControlFlowGraphButton;
	private CSVLinkAnnotations CSVLinkAnnotations;
	private CSVLinkDependencies CSVLinkDependencies;
	private CSVLinkDDEntries CSVLinkDDEntries;
	private ApprovedStateDropdown ApprovedStateDropdown;
	private ForReviewElement ForReviewElement;
	private saveWebElement saveWebElement;
	private ExploreLink ExploreLink;
	private ModuleDescriptionInitial ModuleDescriptionInitial;
	private DataDictionaryEntry DataDictionaryEntry;
	private TestAnnotationEntry TestAnnotationEntry;
	private DataDictionaryEntryEdited DataDictionaryEntryEdited;
	private EditDataDictionaryWindow EditDataDictionaryWindow;
	private ModuleDescriptionEditeddescription ModuleDescriptionEditeddescription;
	private ModuleDescriptionTestdescription ModuleDescriptionTestdescription;
	private AnnotationDescriptionEditField AnnotationDescriptionEditField;
	private DataDictionaryDescriptionEditField DataDictionaryDescriptionEditField;
	private ChangeModuleDescription ChangeModuleDescription;
	private AnnotationsColumn AnnotationsColumn;
	private DependenciesColumn DependenciesColumn;
	private DataDictionaryColumn DataDictionaryColumn;
	private CharacteristicsColumnHeader CharacteristicsColumnHeader;
	private CobolTypeTableEntry CobolTypeTableEntry;
	private OpenDependencyGraphLink OpenDependencyGraphLink;
	private NumberOfResults NumberOfResults;
	private CSVExportDetails CSVExportDetails;
	private ApprovedStateElement ApprovedStateElement;
	private ForReviewStateElement ForReviewStateElement;
	private ConsistentAnnotationCategoryBDropdown ConsistentAnnotationCategoryBDropdown;
	private ConsistentAnnotationStateDropdown ConsistentAnnotationStateDropdown;
	private ConsistentAnnotationDeleteButton ConsistentAnnotationDeleteButton;
	private ConsistentAnnotationCancelButton ConsistentAnnotationCancelButton;
	private ConsistentAnnotationDatabaseDropdown ConsistentAnnotationDatabaseDropdown;
	private ConsistentAnnotationDescriptionField ConsistentAnnotationDescriptionField;
	private MMRS7101SrcPath MMRS7101SrcPath;
	private TwsLink TwsLink;
	private TimestampTableElement TimestampTableElement;
	private BusinessSubSystemLabel BusinessSubSystemLabel;
	private ARB100Value ARB100Value;
	private LanguageTableEntry LanguageTableEntry;
	private TypeTableEntry TypeTableEntry;
	private PathTableEntry PathTableEntry;
	private InCodebaseTableEntry InCodebaseTableEntry;
	private ComplexityTableEntry ComplexityTableEntry;
	private SourceLinesofCodeTableEntry SourceLinesofCodeTableEntry;
	private CommentLinesOfCodeTableEntry CommentLinesOfCodeTableEntry;
	private NrAnnotationsBadge NrAnnotationsBadge;
	private NrDDBadge NrDDBadge;
	private NrDependenciesBadge NrDependenciesBadge;
	private ModuleHeaderType ModuleHeaderType;
	private ConsistentAnnotationCategoryDDropdown ConsistentAnnotationCategoryDDropdown;
	private AnnotationEditField AnnotationEditField;
	private SaveButton SaveButton;
	private CancelButton CancelButton;
	private ModuleDescriptionEditButton ModuleDescriptionEditButton;
	private TaxonomiesEditLink TaxonomiesEditLink;
	private TaxonomyOverlay TaxonomyOverlay;
	private ModuleLink ModuleLink;
	private TaxonomiesHeading TaxonomiesHeading;
	private MMRS71Z1 MMRS71Z1;
	private APPROVEDStateElementNew APPROVEDStateElementNew;
	private FORREVIEWStateElementNew FORREVIEWStateElementNew;
	private MMRS71Z1Program MMRS71Z1Program;
	private PhysicalLinesofCodeEntry PhysicalLinesofCodeEntry;
	private DependencyGraphLink DependencyGraphLink;
	private ddTitle ddTitle;
	private MMRS7101Header MMRS7101Header;
						public ModuleDetailsPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CodeViewerButton = new CodeViewerButton(this, applicationModel);
		TestAnnotationValue = new TestAnnotationValue(this, applicationModel);
		StateValue = new StateValue(this, applicationModel);
		Annotation1EditButton = new Annotation1EditButton(this, applicationModel);
		DataDictionary1EditButton = new DataDictionary1EditButton(this, applicationModel);
		EditCodeAnnotationDetailsWindow = new EditCodeAnnotationDetailsWindow(this, applicationModel);
		ModuleDescriptionEditField = new ModuleDescriptionEditField(this, applicationModel);
		OpenControlFlowGraphButton = new OpenControlFlowGraphButton(this, applicationModel);
		CSVLinkAnnotations = new CSVLinkAnnotations(this, applicationModel);
		CSVLinkDependencies = new CSVLinkDependencies(this, applicationModel);
		CSVLinkDDEntries = new CSVLinkDDEntries(this, applicationModel);
		ApprovedStateDropdown = new ApprovedStateDropdown(this, applicationModel);
		ForReviewElement = new ForReviewElement(this, applicationModel);
		saveWebElement = new saveWebElement(this, applicationModel);
		ExploreLink = new ExploreLink(this, applicationModel);
		ModuleDescriptionInitial = new ModuleDescriptionInitial(this, applicationModel);
		DataDictionaryEntry = new DataDictionaryEntry(this, applicationModel);
		TestAnnotationEntry = new TestAnnotationEntry(this, applicationModel);
		DataDictionaryEntryEdited = new DataDictionaryEntryEdited(this, applicationModel);
		EditDataDictionaryWindow = new EditDataDictionaryWindow(this, applicationModel);
		ModuleDescriptionEditeddescription = new ModuleDescriptionEditeddescription(this, applicationModel);
		ModuleDescriptionTestdescription = new ModuleDescriptionTestdescription(this, applicationModel);
		AnnotationDescriptionEditField = new AnnotationDescriptionEditField(this, applicationModel);
		DataDictionaryDescriptionEditField = new DataDictionaryDescriptionEditField(this, applicationModel);
		ChangeModuleDescription = new ChangeModuleDescription(this, applicationModel);
		AnnotationsColumn = new AnnotationsColumn(this, applicationModel);
		DependenciesColumn = new DependenciesColumn(this, applicationModel);
		DataDictionaryColumn = new DataDictionaryColumn(this, applicationModel);
		CharacteristicsColumnHeader = new CharacteristicsColumnHeader(this, applicationModel);
		CobolTypeTableEntry = new CobolTypeTableEntry(this, applicationModel);
		OpenDependencyGraphLink = new OpenDependencyGraphLink(this, applicationModel);
		NumberOfResults = new NumberOfResults(this, applicationModel);
		CSVExportDetails = new CSVExportDetails(this, applicationModel);
		ApprovedStateElement = new ApprovedStateElement(this, applicationModel);
		ForReviewStateElement = new ForReviewStateElement(this, applicationModel);
		ConsistentAnnotationCategoryBDropdown = new ConsistentAnnotationCategoryBDropdown(this, applicationModel);
		ConsistentAnnotationStateDropdown = new ConsistentAnnotationStateDropdown(this, applicationModel);
		ConsistentAnnotationDeleteButton = new ConsistentAnnotationDeleteButton(this, applicationModel);
		ConsistentAnnotationCancelButton = new ConsistentAnnotationCancelButton(this, applicationModel);
		ConsistentAnnotationDatabaseDropdown = new ConsistentAnnotationDatabaseDropdown(this, applicationModel);
		ConsistentAnnotationDescriptionField = new ConsistentAnnotationDescriptionField(this, applicationModel);
		MMRS7101SrcPath = new MMRS7101SrcPath(this, applicationModel);
		TwsLink = new TwsLink(this, applicationModel);
		TimestampTableElement = new TimestampTableElement(this, applicationModel);
		BusinessSubSystemLabel = new BusinessSubSystemLabel(this, applicationModel);
		ARB100Value = new ARB100Value(this, applicationModel);
		LanguageTableEntry = new LanguageTableEntry(this, applicationModel);
		TypeTableEntry = new TypeTableEntry(this, applicationModel);
		PathTableEntry = new PathTableEntry(this, applicationModel);
		InCodebaseTableEntry = new InCodebaseTableEntry(this, applicationModel);
		ComplexityTableEntry = new ComplexityTableEntry(this, applicationModel);
		SourceLinesofCodeTableEntry = new SourceLinesofCodeTableEntry(this, applicationModel);
		CommentLinesOfCodeTableEntry = new CommentLinesOfCodeTableEntry(this, applicationModel);
		NrAnnotationsBadge = new NrAnnotationsBadge(this, applicationModel);
		NrDDBadge = new NrDDBadge(this, applicationModel);
		NrDependenciesBadge = new NrDependenciesBadge(this, applicationModel);
		ModuleHeaderType = new ModuleHeaderType(this, applicationModel);
		ConsistentAnnotationCategoryDDropdown = new ConsistentAnnotationCategoryDDropdown(this, applicationModel);
		AnnotationEditField = new AnnotationEditField(this, applicationModel);
		SaveButton = new SaveButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		ModuleDescriptionEditButton = new ModuleDescriptionEditButton(this, applicationModel);
		TaxonomiesEditLink = new TaxonomiesEditLink(this, applicationModel);
		TaxonomyOverlay = new TaxonomyOverlay(this, applicationModel);
		ModuleLink = new ModuleLink(this, applicationModel);
		TaxonomiesHeading = new TaxonomiesHeading(this, applicationModel);
		MMRS71Z1 = new MMRS71Z1(this, applicationModel);
		APPROVEDStateElementNew = new APPROVEDStateElementNew(this, applicationModel);
		FORREVIEWStateElementNew = new FORREVIEWStateElementNew(this, applicationModel);
		MMRS71Z1Program = new MMRS71Z1Program(this, applicationModel);
		PhysicalLinesofCodeEntry = new PhysicalLinesofCodeEntry(this, applicationModel);
		DependencyGraphLink = new DependencyGraphLink(this, applicationModel);
		ddTitle = new ddTitle(this, applicationModel);
		MMRS7101Header = new MMRS7101Header(this, applicationModel);

			setDisplayName("ModuleDetailsPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CodeViewerButton CodeViewerButton() { return CodeViewerButton; }
		public TestAnnotationValue TestAnnotationValue() { return TestAnnotationValue; }
		public StateValue StateValue() { return StateValue; }
		public Annotation1EditButton Annotation1EditButton() { return Annotation1EditButton; }
		public DataDictionary1EditButton DataDictionary1EditButton() { return DataDictionary1EditButton; }
		public EditCodeAnnotationDetailsWindow EditCodeAnnotationDetailsWindow() { return EditCodeAnnotationDetailsWindow; }
		public ModuleDescriptionEditField ModuleDescriptionEditField() { return ModuleDescriptionEditField; }
		public OpenControlFlowGraphButton OpenControlFlowGraphButton() { return OpenControlFlowGraphButton; }
		public CSVLinkAnnotations CSVLinkAnnotations() { return CSVLinkAnnotations; }
		public CSVLinkDependencies CSVLinkDependencies() { return CSVLinkDependencies; }
		public CSVLinkDDEntries CSVLinkDDEntries() { return CSVLinkDDEntries; }
		public ApprovedStateDropdown ApprovedStateDropdown() { return ApprovedStateDropdown; }
		public ForReviewElement ForReviewElement() { return ForReviewElement; }
		public saveWebElement saveWebElement() { return saveWebElement; }
		public ExploreLink ExploreLink() { return ExploreLink; }
		public ModuleDescriptionInitial ModuleDescriptionInitial() { return ModuleDescriptionInitial; }
		public DataDictionaryEntry DataDictionaryEntry() { return DataDictionaryEntry; }
		public TestAnnotationEntry TestAnnotationEntry() { return TestAnnotationEntry; }
		public DataDictionaryEntryEdited DataDictionaryEntryEdited() { return DataDictionaryEntryEdited; }
		public EditDataDictionaryWindow EditDataDictionaryWindow() { return EditDataDictionaryWindow; }
		public ModuleDescriptionEditeddescription ModuleDescriptionEditeddescription() { return ModuleDescriptionEditeddescription; }
		public ModuleDescriptionTestdescription ModuleDescriptionTestdescription() { return ModuleDescriptionTestdescription; }
		public AnnotationDescriptionEditField AnnotationDescriptionEditField() { return AnnotationDescriptionEditField; }
		public DataDictionaryDescriptionEditField DataDictionaryDescriptionEditField() { return DataDictionaryDescriptionEditField; }
		public ChangeModuleDescription ChangeModuleDescription() { return ChangeModuleDescription; }
		public AnnotationsColumn AnnotationsColumn() { return AnnotationsColumn; }
		public DependenciesColumn DependenciesColumn() { return DependenciesColumn; }
		public DataDictionaryColumn DataDictionaryColumn() { return DataDictionaryColumn; }
		public CharacteristicsColumnHeader CharacteristicsColumnHeader() { return CharacteristicsColumnHeader; }
		public CobolTypeTableEntry CobolTypeTableEntry() { return CobolTypeTableEntry; }
		public OpenDependencyGraphLink OpenDependencyGraphLink() { return OpenDependencyGraphLink; }
		public NumberOfResults NumberOfResults() { return NumberOfResults; }
		public CSVExportDetails CSVExportDetails() { return CSVExportDetails; }
		public ApprovedStateElement ApprovedStateElement() { return ApprovedStateElement; }
		public ForReviewStateElement ForReviewStateElement() { return ForReviewStateElement; }
		public ConsistentAnnotationCategoryBDropdown ConsistentAnnotationCategoryBDropdown() { return ConsistentAnnotationCategoryBDropdown; }
		public ConsistentAnnotationStateDropdown ConsistentAnnotationStateDropdown() { return ConsistentAnnotationStateDropdown; }
		public ConsistentAnnotationDeleteButton ConsistentAnnotationDeleteButton() { return ConsistentAnnotationDeleteButton; }
		public ConsistentAnnotationCancelButton ConsistentAnnotationCancelButton() { return ConsistentAnnotationCancelButton; }
		public ConsistentAnnotationDatabaseDropdown ConsistentAnnotationDatabaseDropdown() { return ConsistentAnnotationDatabaseDropdown; }
		public ConsistentAnnotationDescriptionField ConsistentAnnotationDescriptionField() { return ConsistentAnnotationDescriptionField; }
		public MMRS7101SrcPath MMRS7101SrcPath() { return MMRS7101SrcPath; }
		public TwsLink TwsLink() { return TwsLink; }
		public TimestampTableElement TimestampTableElement() { return TimestampTableElement; }
		public BusinessSubSystemLabel BusinessSubSystemLabel() { return BusinessSubSystemLabel; }
		public ARB100Value ARB100Value() { return ARB100Value; }
		public LanguageTableEntry LanguageTableEntry() { return LanguageTableEntry; }
		public TypeTableEntry TypeTableEntry() { return TypeTableEntry; }
		public PathTableEntry PathTableEntry() { return PathTableEntry; }
		public InCodebaseTableEntry InCodebaseTableEntry() { return InCodebaseTableEntry; }
		public ComplexityTableEntry ComplexityTableEntry() { return ComplexityTableEntry; }
		public SourceLinesofCodeTableEntry SourceLinesofCodeTableEntry() { return SourceLinesofCodeTableEntry; }
		public CommentLinesOfCodeTableEntry CommentLinesOfCodeTableEntry() { return CommentLinesOfCodeTableEntry; }
		public NrAnnotationsBadge NrAnnotationsBadge() { return NrAnnotationsBadge; }
		public NrDDBadge NrDDBadge() { return NrDDBadge; }
		public NrDependenciesBadge NrDependenciesBadge() { return NrDependenciesBadge; }
		public ModuleHeaderType ModuleHeaderType() { return ModuleHeaderType; }
		public ConsistentAnnotationCategoryDDropdown ConsistentAnnotationCategoryDDropdown() { return ConsistentAnnotationCategoryDDropdown; }
		public AnnotationEditField AnnotationEditField() { return AnnotationEditField; }
		public SaveButton SaveButton() { return SaveButton; }
		public CancelButton CancelButton() { return CancelButton; }
		public ModuleDescriptionEditButton ModuleDescriptionEditButton() { return ModuleDescriptionEditButton; }
		public TaxonomiesEditLink TaxonomiesEditLink() { return TaxonomiesEditLink; }
		public TaxonomyOverlay TaxonomyOverlay() { return TaxonomyOverlay; }
		public ModuleLink ModuleLink() { return ModuleLink; }
		public TaxonomiesHeading TaxonomiesHeading() { return TaxonomiesHeading; }
		public MMRS71Z1 MMRS71Z1() { return MMRS71Z1; }
		public APPROVEDStateElementNew APPROVEDStateElementNew() { return APPROVEDStateElementNew; }
		public FORREVIEWStateElementNew FORREVIEWStateElementNew() { return FORREVIEWStateElementNew; }
		public MMRS71Z1Program MMRS71Z1Program() { return MMRS71Z1Program; }
		public PhysicalLinesofCodeEntry PhysicalLinesofCodeEntry() { return PhysicalLinesofCodeEntry; }
		public DependencyGraphLink DependencyGraphLink() { return DependencyGraphLink; }
		public ddTitle ddTitle() { return ddTitle; }
		public MMRS7101Header MMRS7101Header() { return MMRS7101Header; }
		
			public class CodeViewerButton extends WebWebElementNodeBase
	{

		
								public CodeViewerButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CodeViewerButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Code Viewer").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestAnnotationValue extends WebWebElementNodeBase
	{

		
								public TestAnnotationValue(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestAnnotationValue");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerHTML(" TestAnnotation ").innerText("TestAnnotation ").tagName("TD").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StateValue extends WebWebElementNodeBase
	{

		
								public StateValue(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("State");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("\"APPROVED\"").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Annotation1EditButton extends WebButtonNodeBase
	{

		
								public Annotation1EditButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Annotation1EditButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("Edit").tagName("BUTTON").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionary1EditButton extends WebButtonNodeBase
	{

		
								public DataDictionary1EditButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionary1EditButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Edit").tagName("BUTTON").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditCodeAnnotationDetailsWindow extends WebWebElementNodeBase
	{

		
			private SourceCodeWebElement SourceCodeWebElement;
						public EditCodeAnnotationDetailsWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SourceCodeWebElement = new SourceCodeWebElement(this, applicationModel);

			setDisplayName("EditCodeAnnotationDetailsWindow");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().role("dialog").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SourceCodeWebElement SourceCodeWebElement() { return SourceCodeWebElement; }
		
			public class SourceCodeWebElement extends WebWebElementNodeBase
	{

		
								public SourceCodeWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SourceCode");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className("CodeMirror-scroll").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ModuleDescriptionEditField extends WebEditFieldNodeBase
	{

		
								public ModuleDescriptionEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleDescriptionEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("TEXTAREA").type("textarea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenControlFlowGraphButton extends WebWebElementNodeBase
	{

		
								public OpenControlFlowGraphButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open Control Flow Graph Button");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").innerText("Open").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSVLinkAnnotations extends WebLinkNodeBase
	{

		
								public CSVLinkAnnotations(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSVLinkAnnotations");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().xpath("/html/body/app-root/app-shell/app-mining-module-detail/main/section[4]/div/div/app-code-annotations/div/div/mn-table/p-table/div/p-paginator/div/div[2]/div/a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSVLinkDependencies extends WebLinkNodeBase
	{

		
								public CSVLinkDependencies(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSVLinkDependencies");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().xpath("/html/body/app-root/app-shell/app-mining-module-detail/main/section[5]/div/div/app-dependencies/mn-table/p-table/div/p-paginator/div/div[2]/div/a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSVLinkDDEntries extends WebLinkNodeBase
	{

		
								public CSVLinkDDEntries(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSVLinkDDEntries");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().xpath("/html/body/app-root/app-shell/app-mining-module-detail/main/section[6]/div/div/app-data-dictionary/div/div/mn-table/p-table/div/p-paginator/div/div[2]/div/a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApprovedStateDropdown extends WebWebElementNodeBase
	{

		
								public ApprovedStateDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApprovedStateDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("APPROVED").tagName("nz-select-top-control").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ForReviewElement extends WebWebElementNodeBase
	{

		
								public ForReviewElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ForReviewElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("FOR_REVIEW").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class saveWebElement extends WebWebElementNodeBase
	{

		
								public saveWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Save").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExploreLink extends WebLinkNodeBase
	{

		
								public ExploreLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExploreLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerHTML("Explore").innerText("Explore").name("Explore").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleDescriptionInitial extends WebWebElementNodeBase
	{

		
								public ModuleDescriptionInitial(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleDescriptionInitial");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("P").innerText("This is a test description to be displayed in the UI.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryEntry extends WebWebElementNodeBase
	{

		
								public DataDictionaryEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").innerText("MY-PROGRAM-NAME ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestAnnotationEntry extends WebWebElementNodeBase
	{

		
								public TestAnnotationEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestAnnotationEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Test Annotation").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryEntryEdited extends WebWebElementNodeBase
	{

		
								public DataDictionaryEntryEdited(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryEntryEdited");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("edited").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditDataDictionaryWindow extends WebWebElementNodeBase
	{

		
								public EditDataDictionaryWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditDataDictionaryWindow");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("textarea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleDescriptionEditeddescription extends WebWebElementNodeBase
	{

		
								public ModuleDescriptionEditeddescription(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleDescriptionEditeddescription");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("edited").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleDescriptionTestdescription extends WebWebElementNodeBase
	{

		
								public ModuleDescriptionTestdescription(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleDescriptionTestdescription");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Testdescription").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationDescriptionEditField extends WebEditFieldNodeBase
	{

		
								public AnnotationDescriptionEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationDescriptionEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().rowsCount(14).tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryDescriptionEditField extends WebEditFieldNodeBase
	{

		
								public DataDictionaryDescriptionEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryDescriptionEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().rowsCount(14).tagName("textarea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChangeModuleDescription extends WebWebElementNodeBase
	{

		
								public ChangeModuleDescription(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ChangeModuleDescription");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("BUTTON").innerText("Edit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationsColumn extends WebWebElementNodeBase
	{

		
								public AnnotationsColumn(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationsColumn");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().role("tab").tagName("div").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DependenciesColumn extends WebWebElementNodeBase
	{

		
								public DependenciesColumn(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DependenciesColumn");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().role("tab").tagName("div").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryColumn extends WebWebElementNodeBase
	{

		
								public DataDictionaryColumn(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryColumn");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().role("tab").tagName("div").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CharacteristicsColumnHeader extends WebWebElementNodeBase
	{

		
								public CharacteristicsColumnHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CharacteristicsColumnHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Characteristics").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolTypeTableEntry extends WebWebElementNodeBase
	{

		
								public CobolTypeTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolTypeTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Cobol").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenDependencyGraphLink extends WebWebElementNodeBase
	{

		
								public OpenDependencyGraphLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OpenDependencyGraphLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Open").tagName("A").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NumberOfResults extends WebWebElementNodeBase
	{

		
								public NumberOfResults(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NumberOfResults");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-col ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSVExportDetails extends WebWebElementNodeBase
	{

		
								public CSVExportDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSVExportDetails");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("CSV").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApprovedStateElement extends WebWebElementNodeBase
	{

		
								public ApprovedStateElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApprovedStateElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("APPROVED").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ForReviewStateElement extends WebWebElementNodeBase
	{

		
								public ForReviewStateElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ForReviewStateElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("FOR_REVIEW").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryBDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryBDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryBDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category B").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationStateDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationStateDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationStateDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("IN_ANALYSIS").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDeleteButton extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDeleteButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDeleteButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Delete").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCancelButton extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCancelButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDatabaseDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDatabaseDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDatabaseDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Database").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDescriptionField extends WebEditFieldNodeBase
	{

		
								public ConsistentAnnotationDescriptionField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDescriptionField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Add your annotation text here...").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101SrcPath extends WebWebElementNodeBase
	{

		
								public MMRS7101SrcPath(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101SrcPath");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("src/cobol/programs/MMRS7101.cbl").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TwsLink extends WebLinkNodeBase
	{

		
								public TwsLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("twsLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("TWS ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TimestampTableElement extends WebWebElementNodeBase
	{

		
								public TimestampTableElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TimestampTableElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BusinessSubSystemLabel extends WebWebElementNodeBase
	{

		
								public BusinessSubSystemLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BusinessSubSystemLabel");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("BusinessSubSystem")).tagName("td").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ARB100Value extends WebWebElementNodeBase
	{

		
								public ARB100Value(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ARB100Value");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("ARB100").tagName("nz-tag").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LanguageTableEntry extends WebWebElementNodeBase
	{

		
								public LanguageTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LanguageTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COBOL").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TypeTableEntry extends WebWebElementNodeBase
	{

		
								public TypeTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TypeTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Program").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PathTableEntry extends WebWebElementNodeBase
	{

		
								public PathTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PathTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("src/cobol/programs/MMRS7101.cbl").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InCodebaseTableEntry extends WebWebElementNodeBase
	{

		
								public InCodebaseTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InCodebaseTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty(".*In Codebase.*")).tagName("TR").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ComplexityTableEntry extends WebWebElementNodeBase
	{

		
								public ComplexityTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ComplexityTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Low").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SourceLinesofCodeTableEntry extends WebWebElementNodeBase
	{

		
								public SourceLinesofCodeTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SourceLinesofCodeTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("107").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CommentLinesOfCodeTableEntry extends WebWebElementNodeBase
	{

		
								public CommentLinesOfCodeTableEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CommentLinesOfCodeTableEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("46 (42%)").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NrAnnotationsBadge extends WebWebElementNodeBase
	{

		
								public NrAnnotationsBadge(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NrAnnotationsBadge");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("nz-badge-sup").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NrDDBadge extends WebWebElementNodeBase
	{

		
								public NrDDBadge(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NrDDBadge");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("nz-badge-sup").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NrDependenciesBadge extends WebWebElementNodeBase
	{

		
								public NrDependenciesBadge(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NrDependenciesBadge");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("nz-badge-sup").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleHeaderType extends WebWebElementNodeBase
	{

		
								public ModuleHeaderType(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleHeaderType");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-PAGE-HEADER-SUBTITLE").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryDDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryDDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryDDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category D").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationEditField extends WebEditFieldNodeBase
	{

		
								public AnnotationEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("annotation").tagName("TEXTAREA").type("textarea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveButton extends WebButtonNodeBase
	{

		
								public SaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Save").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends WebButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleDescriptionEditButton extends WebButtonNodeBase
	{

		
								public ModuleDescriptionEditButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleDescriptionEditButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("submit").name(" Edit ").role("").tagName("BUTTON").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomiesEditLink extends WebWebElementNodeBase
	{

		
								public TaxonomiesEditLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomiesEditLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Edit").tagName("BUTTON").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyOverlay extends WebWebElementNodeBase
	{

		
								public TaxonomyOverlay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyOverlay");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS7101: Assign Taxonomies").tagName("DIV").className("ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleLink extends WebWebElementNodeBase
	{

		
								public ModuleLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Modules").tagName("A").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomiesHeading extends WebWebElementNodeBase
	{

		
								public TaxonomiesHeading(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomiesHeading");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Taxonomies").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS71Z1 extends WebLinkNodeBase
	{

		
								public MMRS71Z1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS71Z1 ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("MMRS71Z1 ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class APPROVEDStateElementNew extends WebWebElementNodeBase
	{

		
								public APPROVEDStateElementNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("APPROVED");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("APPROVED").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FORREVIEWStateElementNew extends WebWebElementNodeBase
	{

		
								public FORREVIEWStateElementNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FOR_REVIEW");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("FOR_REVIEW").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS71Z1Program extends WebWebElementNodeBase
	{

		
								public MMRS71Z1Program(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS71Z1Program");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS71Z1COBOL Program ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PhysicalLinesofCodeEntry extends WebWebElementNodeBase
	{

		
								public PhysicalLinesofCodeEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PhysicalLinesofCodeEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("62").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DependencyGraphLink extends WebLinkNodeBase
	{

		
								public DependencyGraphLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DependencyGraphLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Dependency Graph").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ddTitle extends WebWebElementNodeBase
	{

		
								public ddTitle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ddTitle");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-BADGE-SUP").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101Header extends WebWebElementNodeBase
	{

		
								public MMRS7101Header(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101Header");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS7101").tagName("NZ-PAGE-HEADER-TITLE").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DependencyGraphPage extends WebPageNodeBase
	{

		
			private DisplayOptionDropdownHierarchical DisplayOptionDropdownHierarchical;
	private DisplayOptionBalloon DisplayOptionBalloon;
	private DisplayOptionOrganic DisplayOptionOrganic;
	private DisplayOptionRadial DisplayOptionRadial;
	private DisplayOptionCyclic DisplayOptionCyclic;
	private Depth3Option Depth3Option;
	private DepthDropdown DepthDropdown;
	private ExportGraphmlEntry ExportGraphmlEntry;
	private FilterDropdown FilterDropdown;
	private ExportDropdown ExportDropdown;
	private Depth2Option Depth2Option;
	private FilterCobolProgramOption FilterCobolProgramOption;
	private FilterDropdown2 FilterDropdown2;
	private DepthDropdown2 DepthDropdown2;
	private DisplayOptionDropdownBalloon DisplayOptionDropdownBalloon;
	private DisplayOptionDropdownOrganic DisplayOptionDropdownOrganic;
	private DisplayOptionDropdownRadial DisplayOptionDropdownRadial;
	private FilterDropdown3 FilterDropdown3;
	private FilterDropdown1 FilterDropdown1;
	private MMRS7101 MMRS7101;
	private MMRS71Z1GraphElement MMRS71Z1GraphElement;
	private DisplayOptionHierarchical DisplayOptionHierarchical;
						public DependencyGraphPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DisplayOptionDropdownHierarchical = new DisplayOptionDropdownHierarchical(this, applicationModel);
		DisplayOptionBalloon = new DisplayOptionBalloon(this, applicationModel);
		DisplayOptionOrganic = new DisplayOptionOrganic(this, applicationModel);
		DisplayOptionRadial = new DisplayOptionRadial(this, applicationModel);
		DisplayOptionCyclic = new DisplayOptionCyclic(this, applicationModel);
		Depth3Option = new Depth3Option(this, applicationModel);
		DepthDropdown = new DepthDropdown(this, applicationModel);
		ExportGraphmlEntry = new ExportGraphmlEntry(this, applicationModel);
		FilterDropdown = new FilterDropdown(this, applicationModel);
		ExportDropdown = new ExportDropdown(this, applicationModel);
		Depth2Option = new Depth2Option(this, applicationModel);
		FilterCobolProgramOption = new FilterCobolProgramOption(this, applicationModel);
		FilterDropdown2 = new FilterDropdown2(this, applicationModel);
		DepthDropdown2 = new DepthDropdown2(this, applicationModel);
		DisplayOptionDropdownBalloon = new DisplayOptionDropdownBalloon(this, applicationModel);
		DisplayOptionDropdownOrganic = new DisplayOptionDropdownOrganic(this, applicationModel);
		DisplayOptionDropdownRadial = new DisplayOptionDropdownRadial(this, applicationModel);
		FilterDropdown3 = new FilterDropdown3(this, applicationModel);
		FilterDropdown1 = new FilterDropdown1(this, applicationModel);
		MMRS7101 = new MMRS7101(this, applicationModel);
		MMRS71Z1GraphElement = new MMRS71Z1GraphElement(this, applicationModel);
		DisplayOptionHierarchical = new DisplayOptionHierarchical(this, applicationModel);

			setDisplayName("DependencyGraphPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DisplayOptionDropdownHierarchical DisplayOptionDropdownHierarchical() { return DisplayOptionDropdownHierarchical; }
		public DisplayOptionBalloon DisplayOptionBalloon() { return DisplayOptionBalloon; }
		public DisplayOptionOrganic DisplayOptionOrganic() { return DisplayOptionOrganic; }
		public DisplayOptionRadial DisplayOptionRadial() { return DisplayOptionRadial; }
		public DisplayOptionCyclic DisplayOptionCyclic() { return DisplayOptionCyclic; }
		public Depth3Option Depth3Option() { return Depth3Option; }
		public DepthDropdown DepthDropdown() { return DepthDropdown; }
		public ExportGraphmlEntry ExportGraphmlEntry() { return ExportGraphmlEntry; }
		public FilterDropdown FilterDropdown() { return FilterDropdown; }
		public ExportDropdown ExportDropdown() { return ExportDropdown; }
		public Depth2Option Depth2Option() { return Depth2Option; }
		public FilterCobolProgramOption FilterCobolProgramOption() { return FilterCobolProgramOption; }
		public FilterDropdown2 FilterDropdown2() { return FilterDropdown2; }
		public DepthDropdown2 DepthDropdown2() { return DepthDropdown2; }
		public DisplayOptionDropdownBalloon DisplayOptionDropdownBalloon() { return DisplayOptionDropdownBalloon; }
		public DisplayOptionDropdownOrganic DisplayOptionDropdownOrganic() { return DisplayOptionDropdownOrganic; }
		public DisplayOptionDropdownRadial DisplayOptionDropdownRadial() { return DisplayOptionDropdownRadial; }
		public FilterDropdown3 FilterDropdown3() { return FilterDropdown3; }
		public FilterDropdown1 FilterDropdown1() { return FilterDropdown1; }
		public MMRS7101 MMRS7101() { return MMRS7101; }
		public MMRS71Z1GraphElement MMRS71Z1GraphElement() { return MMRS71Z1GraphElement; }
		public DisplayOptionHierarchical DisplayOptionHierarchical() { return DisplayOptionHierarchical; }
		
			public class DisplayOptionDropdownHierarchical extends WebWebElementNodeBase
	{

		
								public DisplayOptionDropdownHierarchical(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionDropdownHierarchical");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Hierarchical").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionBalloon extends WebWebElementNodeBase
	{

		
								public DisplayOptionBalloon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionBalloon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Balloon ").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionOrganic extends WebWebElementNodeBase
	{

		
								public DisplayOptionOrganic(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionOrganic");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Organic.*")).tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionRadial extends WebWebElementNodeBase
	{

		
								public DisplayOptionRadial(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionRadial");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Radial").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionCyclic extends WebWebElementNodeBase
	{

		
								public DisplayOptionCyclic(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionCyclic");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Cyclic.*")).tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Depth3Option extends WebWebElementNodeBase
	{

		
								public Depth3Option(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Depth3Option");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Depth: 3").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DepthDropdown extends WebWebElementNodeBase
	{

		
								public DepthDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DepthDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Depth: 1").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExportGraphmlEntry extends WebWebElementNodeBase
	{

		
								public ExportGraphmlEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportGraphml");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("li").innerText("graphml").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterDropdown extends WebWebElementNodeBase
	{

		
								public FilterDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("(9 selected)  ").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExportDropdown extends WebWebElementNodeBase
	{

		
								public ExportDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("button").className("ant-btn ant-dropdown-trigger ant-btn-icon-only").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Depth2Option extends WebWebElementNodeBase
	{

		
								public Depth2Option(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Depth2Option");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Depth: 2").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterCobolProgramOption extends WebWebElementNodeBase
	{

		
								public FilterCobolProgramOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterCobolProgramOption");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COBOL PROGRAM ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterDropdown2 extends WebWebElementNodeBase
	{

		
								public FilterDropdown2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterDropdown2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("(8 selected)  ").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DepthDropdown2 extends WebWebElementNodeBase
	{

		
								public DepthDropdown2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DepthDropdown2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Depth: 2").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionDropdownBalloon extends WebWebElementNodeBase
	{

		
								public DisplayOptionDropdownBalloon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionDropdownBalloon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Balloon").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionDropdownOrganic extends WebWebElementNodeBase
	{

		
								public DisplayOptionDropdownOrganic(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionDropdownOrganic");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Organic").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionDropdownRadial extends WebWebElementNodeBase
	{

		
								public DisplayOptionDropdownRadial(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionDropdownRadial");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Radial").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterDropdown3 extends WebWebElementNodeBase
	{

		
								public FilterDropdown3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterDropdown3");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("(7 selected)  ").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterDropdown1 extends WebWebElementNodeBase
	{

		
								public FilterDropdown1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterDropdown1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("(10 selected) ").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101 extends WebWebElementNodeBase
	{

		
								public MMRS7101(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS7101").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS71Z1GraphElement extends WebWebElementNodeBase
	{

		
								public MMRS71Z1GraphElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS71Z1GraphElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS71Z1").tagName("tspan").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DisplayOptionHierarchical extends WebWebElementNodeBase
	{

		
								public DisplayOptionHierarchical(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DisplayOptionHierarchical");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Hierarchical").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class HomeMenuEntry extends WebLinkNodeBase
	{

		
								public HomeMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HomeMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Dashboard").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationUIPage extends WebPageNodeBase
	{

		
			private ModuleNameInputField ModuleNameInputField;
	private SearchButton SearchButton;
	private UserInputField UserInputField;
	private RuleEntry RuleEntry;
	private AnnotationTypeDropdown AnnotationTypeDropdown;
	private AnnotationCategoryDropdown AnnotationCategoryDropdown;
	private AnnotationCategoryBEntry AnnotationCategoryBEntry;
	private AnnotationCategoryAEntry AnnotationCategoryAEntry;
	private DescriptionInputField DescriptionInputField;
	private CreateInvoicesEntry CreateInvoicesEntry;
	private ClearButton ClearButton;
	private TaxonomyDropdown TaxonomyDropdown;
	private AnnotationEditButton AnnotationEditButton;
	private NoDataFound NoDataFound;
	private AnnotationCategoryDropdownCategorySelected AnnotationCategoryDropdownCategorySelected;
	private AnnotationTypeDropdownTypeSelected AnnotationTypeDropdownTypeSelected;
	private MMRS7101Link MMRS7101Link;
	private CategoryFilterButton CategoryFilterButton;
	private FilterAnnotationCategoryA FilterAnnotationCategoryA;
	private OKButton OKButton;
	private MagnifierButton MagnifierButton;
	private SearchField SearchField;
	private SearchModuleNameButton SearchModuleNameButton;
	private ResetModuleNameButton ResetModuleNameButton;
	private CancelEditAnnotationDetails CancelEditAnnotationDetails;
	private ConsistentAnnotationCategoryBDropdown ConsistentAnnotationCategoryBDropdown;
	private ConsistentAnnotationStateDropdown ConsistentAnnotationStateDropdown;
	private ConsistentAnnotationDeleteButton ConsistentAnnotationDeleteButton;
	private ConsistentAnnotationCancelButton ConsistentAnnotationCancelButton;
	private ConsistentAnnotationDatabaseDropdown ConsistentAnnotationDatabaseDropdown;
	private ConsistentAnnotationDescriptionField ConsistentAnnotationDescriptionField;
	private Results5 Results5;
	private ConsistentAnnotationCategoryDDropdown ConsistentAnnotationCategoryDDropdown;
	private AnnotationEditButton1 AnnotationEditButton1;
	private CategoryFilterButtonNew CategoryFilterButtonNew;
	private SearchModuleNameButtonNew SearchModuleNameButtonNew;
	private ResetButton ResetButton;
	private AnnotationCategoryDEntry AnnotationCategoryDEntry;
	private AnnotationTable AnnotationTable;
	private LoopCondition LoopCondition;
						public AnnotationUIPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ModuleNameInputField = new ModuleNameInputField(this, applicationModel);
		SearchButton = new SearchButton(this, applicationModel);
		UserInputField = new UserInputField(this, applicationModel);
		RuleEntry = new RuleEntry(this, applicationModel);
		AnnotationTypeDropdown = new AnnotationTypeDropdown(this, applicationModel);
		AnnotationCategoryDropdown = new AnnotationCategoryDropdown(this, applicationModel);
		AnnotationCategoryBEntry = new AnnotationCategoryBEntry(this, applicationModel);
		AnnotationCategoryAEntry = new AnnotationCategoryAEntry(this, applicationModel);
		DescriptionInputField = new DescriptionInputField(this, applicationModel);
		CreateInvoicesEntry = new CreateInvoicesEntry(this, applicationModel);
		ClearButton = new ClearButton(this, applicationModel);
		TaxonomyDropdown = new TaxonomyDropdown(this, applicationModel);
		AnnotationEditButton = new AnnotationEditButton(this, applicationModel);
		NoDataFound = new NoDataFound(this, applicationModel);
		AnnotationCategoryDropdownCategorySelected = new AnnotationCategoryDropdownCategorySelected(this, applicationModel);
		AnnotationTypeDropdownTypeSelected = new AnnotationTypeDropdownTypeSelected(this, applicationModel);
		MMRS7101Link = new MMRS7101Link(this, applicationModel);
		CategoryFilterButton = new CategoryFilterButton(this, applicationModel);
		FilterAnnotationCategoryA = new FilterAnnotationCategoryA(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		MagnifierButton = new MagnifierButton(this, applicationModel);
		SearchField = new SearchField(this, applicationModel);
		SearchModuleNameButton = new SearchModuleNameButton(this, applicationModel);
		ResetModuleNameButton = new ResetModuleNameButton(this, applicationModel);
		CancelEditAnnotationDetails = new CancelEditAnnotationDetails(this, applicationModel);
		ConsistentAnnotationCategoryBDropdown = new ConsistentAnnotationCategoryBDropdown(this, applicationModel);
		ConsistentAnnotationStateDropdown = new ConsistentAnnotationStateDropdown(this, applicationModel);
		ConsistentAnnotationDeleteButton = new ConsistentAnnotationDeleteButton(this, applicationModel);
		ConsistentAnnotationCancelButton = new ConsistentAnnotationCancelButton(this, applicationModel);
		ConsistentAnnotationDatabaseDropdown = new ConsistentAnnotationDatabaseDropdown(this, applicationModel);
		ConsistentAnnotationDescriptionField = new ConsistentAnnotationDescriptionField(this, applicationModel);
		Results5 = new Results5(this, applicationModel);
		ConsistentAnnotationCategoryDDropdown = new ConsistentAnnotationCategoryDDropdown(this, applicationModel);
		AnnotationEditButton1 = new AnnotationEditButton1(this, applicationModel);
		CategoryFilterButtonNew = new CategoryFilterButtonNew(this, applicationModel);
		SearchModuleNameButtonNew = new SearchModuleNameButtonNew(this, applicationModel);
		ResetButton = new ResetButton(this, applicationModel);
		AnnotationCategoryDEntry = new AnnotationCategoryDEntry(this, applicationModel);
		AnnotationTable = new AnnotationTable(this, applicationModel);
		LoopCondition = new LoopCondition(this, applicationModel);

			setDisplayName("AnnotationUIPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ModuleNameInputField ModuleNameInputField() { return ModuleNameInputField; }
		public SearchButton SearchButton() { return SearchButton; }
		public UserInputField UserInputField() { return UserInputField; }
		public RuleEntry RuleEntry() { return RuleEntry; }
		public AnnotationTypeDropdown AnnotationTypeDropdown() { return AnnotationTypeDropdown; }
		public AnnotationCategoryDropdown AnnotationCategoryDropdown() { return AnnotationCategoryDropdown; }
		public AnnotationCategoryBEntry AnnotationCategoryBEntry() { return AnnotationCategoryBEntry; }
		public AnnotationCategoryAEntry AnnotationCategoryAEntry() { return AnnotationCategoryAEntry; }
		public DescriptionInputField DescriptionInputField() { return DescriptionInputField; }
		public CreateInvoicesEntry CreateInvoicesEntry() { return CreateInvoicesEntry; }
		public ClearButton ClearButton() { return ClearButton; }
		public TaxonomyDropdown TaxonomyDropdown() { return TaxonomyDropdown; }
		public AnnotationEditButton AnnotationEditButton() { return AnnotationEditButton; }
		public NoDataFound NoDataFound() { return NoDataFound; }
		public AnnotationCategoryDropdownCategorySelected AnnotationCategoryDropdownCategorySelected() { return AnnotationCategoryDropdownCategorySelected; }
		public AnnotationTypeDropdownTypeSelected AnnotationTypeDropdownTypeSelected() { return AnnotationTypeDropdownTypeSelected; }
		public MMRS7101Link MMRS7101Link() { return MMRS7101Link; }
		public CategoryFilterButton CategoryFilterButton() { return CategoryFilterButton; }
		public FilterAnnotationCategoryA FilterAnnotationCategoryA() { return FilterAnnotationCategoryA; }
		public OKButton OKButton() { return OKButton; }
		public MagnifierButton MagnifierButton() { return MagnifierButton; }
		public SearchField SearchField() { return SearchField; }
		public SearchModuleNameButton SearchModuleNameButton() { return SearchModuleNameButton; }
		public ResetModuleNameButton ResetModuleNameButton() { return ResetModuleNameButton; }
		public CancelEditAnnotationDetails CancelEditAnnotationDetails() { return CancelEditAnnotationDetails; }
		public ConsistentAnnotationCategoryBDropdown ConsistentAnnotationCategoryBDropdown() { return ConsistentAnnotationCategoryBDropdown; }
		public ConsistentAnnotationStateDropdown ConsistentAnnotationStateDropdown() { return ConsistentAnnotationStateDropdown; }
		public ConsistentAnnotationDeleteButton ConsistentAnnotationDeleteButton() { return ConsistentAnnotationDeleteButton; }
		public ConsistentAnnotationCancelButton ConsistentAnnotationCancelButton() { return ConsistentAnnotationCancelButton; }
		public ConsistentAnnotationDatabaseDropdown ConsistentAnnotationDatabaseDropdown() { return ConsistentAnnotationDatabaseDropdown; }
		public ConsistentAnnotationDescriptionField ConsistentAnnotationDescriptionField() { return ConsistentAnnotationDescriptionField; }
		public Results5 Results5() { return Results5; }
		public ConsistentAnnotationCategoryDDropdown ConsistentAnnotationCategoryDDropdown() { return ConsistentAnnotationCategoryDDropdown; }
		public AnnotationEditButton1 AnnotationEditButton1() { return AnnotationEditButton1; }
		public CategoryFilterButtonNew CategoryFilterButtonNew() { return CategoryFilterButtonNew; }
		public SearchModuleNameButtonNew SearchModuleNameButtonNew() { return SearchModuleNameButtonNew; }
		public ResetButton ResetButton() { return ResetButton; }
		public AnnotationCategoryDEntry AnnotationCategoryDEntry() { return AnnotationCategoryDEntry; }
		public AnnotationTable AnnotationTable() { return AnnotationTable; }
		public LoopCondition LoopCondition() { return LoopCondition; }
		
			public class ModuleNameInputField extends WebEditFieldNodeBase
	{

		
								public ModuleNameInputField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleNameInputField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("TEXT").placeholder("Search...").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchButton extends WebButtonNodeBase
	{

		
								public SearchButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Button");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().innerText("Search").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserInputField extends WebEditFieldNodeBase
	{

		
								public UserInputField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UserInputField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").placeholder("User").tagName("INPUT").type("text").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RuleEntry extends WebWebElementNodeBase
	{

		
								public RuleEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RuleEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("RULE").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationTypeDropdown extends WebWebElementNodeBase
	{

		
								public AnnotationTypeDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationTypeDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT").attribute("formcontrolname", "annotationType").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryDropdown extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Select Category|Annotation Category B")).tagName("nz-select-placeholder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryBEntry extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryBEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryBEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category B").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryAEntry extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryAEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryAEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category A").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DescriptionInputField extends WebEditFieldNodeBase
	{

		
								public DescriptionInputField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DescriptionInputField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("TEXT").placeholder("Description").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateInvoicesEntry extends WebWebElementNodeBase
	{

		
								public CreateInvoicesEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CreateInvoicesEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Create Invoices").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClearButton extends WebButtonNodeBase
	{

		
								public ClearButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Clear Button");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().innerText("Clear").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyDropdown extends WebWebElementNodeBase
	{

		
								public TaxonomyDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Select Taxonomy").tagName("nz-select-placeholder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationEditButton extends WebWebElementNodeBase
	{

		
								public AnnotationEditButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationEditButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("EDIT").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoDataFound extends WebWebElementNodeBase
	{

		
								public NoDataFound(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NoDataFound");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty(".*No Data.*")).tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryDropdownCategorySelected extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryDropdownCategorySelected(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryDropdownCategorySelected");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category B").tagName("nz-select-item").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationTypeDropdownTypeSelected extends WebWebElementNodeBase
	{

		
								public AnnotationTypeDropdownTypeSelected(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationTypeDropdownTypeSelected");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("DATABASE").tagName("nz-select-item").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101Link extends WebWebElementNodeBase
	{

		
								public MMRS7101Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101Link");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" MMRS7101 ").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CategoryFilterButton extends WebWebElementNodeBase
	{

		
								public CategoryFilterButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CategoryFilterButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").className("ant-table-filter-trigger ant-dropdown-trigger").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FilterAnnotationCategoryA extends WebWebElementNodeBase
	{

		
								public FilterAnnotationCategoryA(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FilterAnnotationCategoryA");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").innerText("Annotation Category A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends WebWebElementNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("OK").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MagnifierButton extends WebWebElementNodeBase
	{

		
								public MagnifierButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MagnifierButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").attribute("nztype", "search").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchField extends WebEditFieldNodeBase
	{

		
								public SearchField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SearchField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("Search...").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchModuleNameButton extends WebButtonNodeBase
	{

		
								public SearchModuleNameButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SearchModuleNameButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").className("mining-table__search-box-button mining-table__search-box-button--search ant-btn ant-btn-primary ant-btn-sm").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResetModuleNameButton extends WebButtonNodeBase
	{

		
								public ResetModuleNameButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResetModuleNameButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").className("mining-table__search-box-button ant-btn ant-btn-sm").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelEditAnnotationDetails extends WebWebElementNodeBase
	{

		
								public CancelEditAnnotationDetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelEditAnnotationDetails");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("BUTTON").innerText("Cancel").className("cancel_editor ant-btn ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryBDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryBDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryBDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category B").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationStateDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationStateDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationStateDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("IN_ANALYSIS").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDeleteButton extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDeleteButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDeleteButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Delete").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCancelButton extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCancelButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDatabaseDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationDatabaseDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDatabaseDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Database").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationDescriptionField extends WebEditFieldNodeBase
	{

		
								public ConsistentAnnotationDescriptionField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationDescriptionField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Add your annotation text here...").tagName("TEXTAREA").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Results5 extends WebWebElementNodeBase
	{

		
								public Results5(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Results5");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-col ng-star-inserted").innerHTML(" Results: 5").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsistentAnnotationCategoryDDropdown extends WebWebElementNodeBase
	{

		
								public ConsistentAnnotationCategoryDDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConsistentAnnotationCategoryDDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotation Category D").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationEditButton1 extends WebButtonNodeBase
	{

		
								public AnnotationEditButton1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationEditButton1");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name(" Edit ").tagName("BUTTON").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CategoryFilterButtonNew extends WebWebElementNodeBase
	{

		
								public CategoryFilterButtonNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CategoryFilterButtonNew");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("anticon anticon-filter type-based-filter__filter-icon--not-selected").tagName("i").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchModuleNameButtonNew extends WebButtonNodeBase
	{

		
								public SearchModuleNameButtonNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SearchModuleNameButtonNew");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Search").tagName("BUTTON").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResetButton extends WebButtonNodeBase
	{

		
								public ResetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Reset");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Reset").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryDEntry extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryDEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryDEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty(".*Annotation Category D.*")).tagName("TR").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationTable extends WebTableNodeBase
	{

		
								public AnnotationTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationTable");
		}

		@Override
		protected com.hp.lft.sdk.web.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.TableDescription.Builder().tagName("TABLE").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoopCondition extends WebWebElementNodeBase
	{

		
								public LoopCondition(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoopCondition");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("LOOP_CONDITION").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ControlFlowGraphPage extends WebPageNodeBase
	{

		
			private ExportGraphmlEntryCF ExportGraphmlEntryCF;
	private FitContentWebButton FitContentWebButton;
	private ExportDropdown ExportDropdown;
	private ReloadControlFlowGraph ReloadControlFlowGraph;
	private RecalculateControlFlowGraph RecalculateControlFlowGraph;
	private OpenControlFlowGraph OpenControlFlowGraph;
	private ZoomInControlFlowGraph ZoomInControlFlowGraph;
	private ZoomOutControlFlowGraph ZoomOutControlFlowGraph;
						public ControlFlowGraphPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ExportGraphmlEntryCF = new ExportGraphmlEntryCF(this, applicationModel);
		FitContentWebButton = new FitContentWebButton(this, applicationModel);
		ExportDropdown = new ExportDropdown(this, applicationModel);
		ReloadControlFlowGraph = new ReloadControlFlowGraph(this, applicationModel);
		RecalculateControlFlowGraph = new RecalculateControlFlowGraph(this, applicationModel);
		OpenControlFlowGraph = new OpenControlFlowGraph(this, applicationModel);
		ZoomInControlFlowGraph = new ZoomInControlFlowGraph(this, applicationModel);
		ZoomOutControlFlowGraph = new ZoomOutControlFlowGraph(this, applicationModel);

			setDisplayName("ControlFlowGraphPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ExportGraphmlEntryCF ExportGraphmlEntryCF() { return ExportGraphmlEntryCF; }
		public FitContentWebButton FitContentWebButton() { return FitContentWebButton; }
		public ExportDropdown ExportDropdown() { return ExportDropdown; }
		public ReloadControlFlowGraph ReloadControlFlowGraph() { return ReloadControlFlowGraph; }
		public RecalculateControlFlowGraph RecalculateControlFlowGraph() { return RecalculateControlFlowGraph; }
		public OpenControlFlowGraph OpenControlFlowGraph() { return OpenControlFlowGraph; }
		public ZoomInControlFlowGraph ZoomInControlFlowGraph() { return ZoomInControlFlowGraph; }
		public ZoomOutControlFlowGraph ZoomOutControlFlowGraph() { return ZoomOutControlFlowGraph; }
		
			public class ExportGraphmlEntryCF extends WebWebElementNodeBase
	{

		
								public ExportGraphmlEntryCF(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportGraphmlEntryCF");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("li").innerText("GraphML").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FitContentWebButton extends WebButtonNodeBase
	{

		
								public FitContentWebButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FitContentWebButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("submit").name("        ").role("").tagName("BUTTON").title("Fit Content").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExportDropdown extends WebWebElementNodeBase
	{

		
								public ExportDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("button").className("ant-btn ant-dropdown-trigger ant-btn-icon-only").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReloadControlFlowGraph extends WebWebElementNodeBase
	{

		
								public ReloadControlFlowGraph(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReloadControlFlowGraph");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-redo").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RecalculateControlFlowGraph extends WebWebElementNodeBase
	{

		
								public RecalculateControlFlowGraph(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RecalculateControlFlowGraph");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("Recalculate").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenControlFlowGraph extends WebWebElementNodeBase
	{

		
								public OpenControlFlowGraph(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OpenControlFlowGraph");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("Open").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ZoomInControlFlowGraph extends WebWebElementNodeBase
	{

		
								public ZoomInControlFlowGraph(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ZoomInControlFlowGraph");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-zoom-in").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ZoomOutControlFlowGraph extends WebWebElementNodeBase
	{

		
								public ZoomOutControlFlowGraph(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ZoomOutControlFlowGraph");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon anticon-zoom-out").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class LogonPage extends WebPageNodeBase
	{

		
			private UsernameField UsernameField;
	private PasswordField PasswordField;
	private LoginButton LoginButton;
	private UsernameFieldWithoutKeycloak UsernameFieldWithoutKeycloak;
	private PasswordFieldWithoutKeycloak PasswordFieldWithoutKeycloak;
	private LoginButtonWithoutKeycloak LoginButtonWithoutKeycloak;
	private VersionHolder VersionHolder;
	private LogonVersionHolder LogonVersionHolder;
	private LoginButtonLocalhost LoginButtonLocalhost;
						public LogonPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					UsernameField = new UsernameField(this, applicationModel);
		PasswordField = new PasswordField(this, applicationModel);
		LoginButton = new LoginButton(this, applicationModel);
		UsernameFieldWithoutKeycloak = new UsernameFieldWithoutKeycloak(this, applicationModel);
		PasswordFieldWithoutKeycloak = new PasswordFieldWithoutKeycloak(this, applicationModel);
		LoginButtonWithoutKeycloak = new LoginButtonWithoutKeycloak(this, applicationModel);
		VersionHolder = new VersionHolder(this, applicationModel);
		LogonVersionHolder = new LogonVersionHolder(this, applicationModel);
		LoginButtonLocalhost = new LoginButtonLocalhost(this, applicationModel);

			setDisplayName("LogonPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public UsernameField UsernameField() { return UsernameField; }
		public PasswordField PasswordField() { return PasswordField; }
		public LoginButton LoginButton() { return LoginButton; }
		public UsernameFieldWithoutKeycloak UsernameFieldWithoutKeycloak() { return UsernameFieldWithoutKeycloak; }
		public PasswordFieldWithoutKeycloak PasswordFieldWithoutKeycloak() { return PasswordFieldWithoutKeycloak; }
		public LoginButtonWithoutKeycloak LoginButtonWithoutKeycloak() { return LoginButtonWithoutKeycloak; }
		public VersionHolder VersionHolder() { return VersionHolder; }
		public LogonVersionHolder LogonVersionHolder() { return LogonVersionHolder; }
		public LoginButtonLocalhost LoginButtonLocalhost() { return LoginButtonLocalhost; }
		
			public class UsernameField extends WebEditFieldNodeBase
	{

		
								public UsernameField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UsernameField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("username").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordField extends WebEditFieldNodeBase
	{

		
								public PasswordField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Password").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoginButton extends WebButtonNodeBase
	{

		
								public LoginButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoginButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().innerText("Sign In").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UsernameFieldWithoutKeycloak extends WebEditFieldNodeBase
	{

		
								public UsernameFieldWithoutKeycloak(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UsernameFieldWithoutKeycloak");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").placeholder("Username").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordFieldWithoutKeycloak extends WebEditFieldNodeBase
	{

		
								public PasswordFieldWithoutKeycloak(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordFieldWithoutKeycloak");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Password").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoginButtonWithoutKeycloak extends WebButtonNodeBase
	{

		
								public LoginButtonWithoutKeycloak(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoginButtonWithoutKeycloak");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").buttonType("submit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VersionHolder extends WebWebElementNodeBase
	{

		
								public VersionHolder(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VersionHolder");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className("mining-footer__content-box").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LogonVersionHolder extends WebWebElementNodeBase
	{

		
								public LogonVersionHolder(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Logonversion-holder");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().attribute("Id", "version-holder").tagName("SPAN").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoginButtonLocalhost extends WebButtonNodeBase
	{

		
								public LoginButtonLocalhost(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoginButtonLocalhost");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().innerText("Login").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ViewButton extends WebButtonNodeBase
	{

		
								public ViewButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ViewButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("View").buttonType("submit").role("").accessibilityName("").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestAnnotationEditButton extends WebButtonNodeBase
	{

		
								public TestAnnotationEditButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestAnnotationEditButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Edit").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EclipseIconAnnotation extends WebWebElementNodeBase
	{

		
								public EclipseIconAnnotation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("path").index(65).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GlobalWebElement extends WebWebElementNodeBase
	{

		
								public GlobalWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GlobalWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Global ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientsAndProjectsElement extends WebWebElementNodeBase
	{

		
								public ClientsAndProjectsElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClientsAndProjectsElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Client and Project Management").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientsPage extends WebPageNodeBase
	{

		
			private EditClientDetailsEntry EditClientDetailsEntry;
	private EditClientAdministratorsEntry EditClientAdministratorsEntry;
	private ProjectAmount0 ProjectAmount0;
	private ProjectAmount1 ProjectAmount1;
	private DemoClient1Card DemoClient1Card;
	private TestclientCard TestclientCard;
	private AddClientButton AddClientButton;
	private TestclientEditedCard TestclientEditedCard;
	private UploadClientLogoIcon UploadClientLogoIcon;
	private EnterClientNameField EnterClientNameField;
	private AddClientMemberField AddClientMemberField;
	private ClientAdminRoleDisplay ClientAdminRoleDisplay;
	private VersionFooter VersionFooter;
	private DemoClient2Card DemoClient2Card;
	private SampleClientCard SampleClientCard;
						public ClientsPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EditClientDetailsEntry = new EditClientDetailsEntry(this, applicationModel);
		EditClientAdministratorsEntry = new EditClientAdministratorsEntry(this, applicationModel);
		ProjectAmount0 = new ProjectAmount0(this, applicationModel);
		ProjectAmount1 = new ProjectAmount1(this, applicationModel);
		DemoClient1Card = new DemoClient1Card(this, applicationModel);
		TestclientCard = new TestclientCard(this, applicationModel);
		AddClientButton = new AddClientButton(this, applicationModel);
		TestclientEditedCard = new TestclientEditedCard(this, applicationModel);
		UploadClientLogoIcon = new UploadClientLogoIcon(this, applicationModel);
		EnterClientNameField = new EnterClientNameField(this, applicationModel);
		AddClientMemberField = new AddClientMemberField(this, applicationModel);
		ClientAdminRoleDisplay = new ClientAdminRoleDisplay(this, applicationModel);
		VersionFooter = new VersionFooter(this, applicationModel);
		DemoClient2Card = new DemoClient2Card(this, applicationModel);
		SampleClientCard = new SampleClientCard(this, applicationModel);

			setDisplayName("ClientsPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EditClientDetailsEntry EditClientDetailsEntry() { return EditClientDetailsEntry; }
		public EditClientAdministratorsEntry EditClientAdministratorsEntry() { return EditClientAdministratorsEntry; }
		public ProjectAmount0 ProjectAmount0() { return ProjectAmount0; }
		public ProjectAmount1 ProjectAmount1() { return ProjectAmount1; }
		public DemoClient1Card DemoClient1Card() { return DemoClient1Card; }
		public TestclientCard TestclientCard() { return TestclientCard; }
		public AddClientButton AddClientButton() { return AddClientButton; }
		public TestclientEditedCard TestclientEditedCard() { return TestclientEditedCard; }
		public UploadClientLogoIcon UploadClientLogoIcon() { return UploadClientLogoIcon; }
		public EnterClientNameField EnterClientNameField() { return EnterClientNameField; }
		public AddClientMemberField AddClientMemberField() { return AddClientMemberField; }
		public ClientAdminRoleDisplay ClientAdminRoleDisplay() { return ClientAdminRoleDisplay; }
		public VersionFooter VersionFooter() { return VersionFooter; }
		public DemoClient2Card DemoClient2Card() { return DemoClient2Card; }
		public SampleClientCard SampleClientCard() { return SampleClientCard; }
		
			public class EditClientDetailsEntry extends WebWebElementNodeBase
	{

		
								public EditClientDetailsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditClientDetailsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Edit Client Details").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditClientAdministratorsEntry extends WebWebElementNodeBase
	{

		
								public EditClientAdministratorsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditClientAdministratorsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Edit Client Administrators").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectAmount0 extends WebWebElementNodeBase
	{

		
								public ProjectAmount0(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectAmount0");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("0 Project(s)").tagName("SPAN").className("ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectAmount1 extends WebWebElementNodeBase
	{

		
								public ProjectAmount1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectAmount1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("1 Project(s)").tagName("SPAN").className("ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DemoClient1Card extends WebWebElementNodeBase
	{

		
								public DemoClient1Card(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DemoClient1Card");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Client 1").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestclientCard extends WebWebElementNodeBase
	{

		
								public TestclientCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestclientCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Testclient").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddClientButton extends WebWebElementNodeBase
	{

		
								public AddClientButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddClientButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Add Client ").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestclientEditedCard extends WebWebElementNodeBase
	{

		
								public TestclientEditedCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestclientEditedCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("TestclientEdited").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UploadClientLogoIcon extends WebWebElementNodeBase
	{

		
								public UploadClientLogoIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UploadClientLogoIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Upload").tagName("DIV").className("ant-upload ant-upload-drag ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnterClientNameField extends WebEditFieldNodeBase
	{

		
								public EnterClientNameField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterClientNameField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Enter client name").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddClientMemberField extends WebEditFieldNodeBase
	{

		
								public AddClientMemberField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddClientMemberField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("client.admin@company.org").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientAdminRoleDisplay extends WebWebElementNodeBase
	{

		
								public ClientAdminRoleDisplay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClientAdminRoleDisplay");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Client Administrators ").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VersionFooter extends WebWebElementNodeBase
	{

		
								public VersionFooter(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VersionFooter");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("mining-footer__content-box").tagName("DIV").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DemoClient2Card extends WebWebElementNodeBase
	{

		
								public DemoClient2Card(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Demo Client 2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Client 2").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SampleClientCard extends WebWebElementNodeBase
	{

		
								public SampleClientCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SampleClientCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Sampleclient").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProjectsPage extends WebPageNodeBase
	{

		
			private ViewerRoleMenuItem ViewerRoleMenuItem;
	private ManagerRoleMenuItem ManagerRoleMenuItem;
	private EditorRoleMenuItem EditorRoleMenuItem;
	private SelectRoleMenuEditor SelectRoleMenuEditor;
	private SelectRoleMenu SelectRoleMenu;
	private EnterProjectTitleField EnterProjectTitleField;
	private AddProjectMemberField AddProjectMemberField;
	private AddProjectButton AddProjectButton;
	private TestprojectEditedCard TestprojectEditedCard;
	private TestprojectCard TestprojectCard;
	private DemoProjectACard DemoProjectACard;
	private MemberAmount1 MemberAmount1;
	private DeleteProject DeleteProject;
	private EditProjectMembersEntry EditProjectMembersEntry;
	private EditProjectDetailsEntry EditProjectDetailsEntry;
	private NoData NoData;
	private DemoProjectBCard DemoProjectBCard;
	private IncrementalModulesTestCard IncrementalModulesTestCard;
	private ManagerMember ManagerMember;
	private ClientSelectionDropdown ClientSelectionDropdown;
	private editorMember editorMember;
	private viewerMember viewerMember;
	private TxDMVTestCard TxDMVTestCard;
	private TxdmvCard TxdmvCard;
	private SampleProjectCard SampleProjectCard;
						public ProjectsPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ViewerRoleMenuItem = new ViewerRoleMenuItem(this, applicationModel);
		ManagerRoleMenuItem = new ManagerRoleMenuItem(this, applicationModel);
		EditorRoleMenuItem = new EditorRoleMenuItem(this, applicationModel);
		SelectRoleMenuEditor = new SelectRoleMenuEditor(this, applicationModel);
		SelectRoleMenu = new SelectRoleMenu(this, applicationModel);
		EnterProjectTitleField = new EnterProjectTitleField(this, applicationModel);
		AddProjectMemberField = new AddProjectMemberField(this, applicationModel);
		AddProjectButton = new AddProjectButton(this, applicationModel);
		TestprojectEditedCard = new TestprojectEditedCard(this, applicationModel);
		TestprojectCard = new TestprojectCard(this, applicationModel);
		DemoProjectACard = new DemoProjectACard(this, applicationModel);
		MemberAmount1 = new MemberAmount1(this, applicationModel);
		DeleteProject = new DeleteProject(this, applicationModel);
		EditProjectMembersEntry = new EditProjectMembersEntry(this, applicationModel);
		EditProjectDetailsEntry = new EditProjectDetailsEntry(this, applicationModel);
		NoData = new NoData(this, applicationModel);
		DemoProjectBCard = new DemoProjectBCard(this, applicationModel);
		IncrementalModulesTestCard = new IncrementalModulesTestCard(this, applicationModel);
		ManagerMember = new ManagerMember(this, applicationModel);
		ClientSelectionDropdown = new ClientSelectionDropdown(this, applicationModel);
		editorMember = new editorMember(this, applicationModel);
		viewerMember = new viewerMember(this, applicationModel);
		TxDMVTestCard = new TxDMVTestCard(this, applicationModel);
		TxdmvCard = new TxdmvCard(this, applicationModel);
		SampleProjectCard = new SampleProjectCard(this, applicationModel);

			setDisplayName("ProjectsPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ViewerRoleMenuItem ViewerRoleMenuItem() { return ViewerRoleMenuItem; }
		public ManagerRoleMenuItem ManagerRoleMenuItem() { return ManagerRoleMenuItem; }
		public EditorRoleMenuItem EditorRoleMenuItem() { return EditorRoleMenuItem; }
		public SelectRoleMenuEditor SelectRoleMenuEditor() { return SelectRoleMenuEditor; }
		public SelectRoleMenu SelectRoleMenu() { return SelectRoleMenu; }
		public EnterProjectTitleField EnterProjectTitleField() { return EnterProjectTitleField; }
		public AddProjectMemberField AddProjectMemberField() { return AddProjectMemberField; }
		public AddProjectButton AddProjectButton() { return AddProjectButton; }
		public TestprojectEditedCard TestprojectEditedCard() { return TestprojectEditedCard; }
		public TestprojectCard TestprojectCard() { return TestprojectCard; }
		public DemoProjectACard DemoProjectACard() { return DemoProjectACard; }
		public MemberAmount1 MemberAmount1() { return MemberAmount1; }
		public DeleteProject DeleteProject() { return DeleteProject; }
		public EditProjectMembersEntry EditProjectMembersEntry() { return EditProjectMembersEntry; }
		public EditProjectDetailsEntry EditProjectDetailsEntry() { return EditProjectDetailsEntry; }
		public NoData NoData() { return NoData; }
		public DemoProjectBCard DemoProjectBCard() { return DemoProjectBCard; }
		public IncrementalModulesTestCard IncrementalModulesTestCard() { return IncrementalModulesTestCard; }
		public ManagerMember ManagerMember() { return ManagerMember; }
		public ClientSelectionDropdown ClientSelectionDropdown() { return ClientSelectionDropdown; }
		public editorMember editorMember() { return editorMember; }
		public viewerMember viewerMember() { return viewerMember; }
		public TxDMVTestCard TxDMVTestCard() { return TxDMVTestCard; }
		public TxdmvCard TxdmvCard() { return TxdmvCard; }
		public SampleProjectCard SampleProjectCard() { return SampleProjectCard; }
		
			public class ViewerRoleMenuItem extends WebWebElementNodeBase
	{

		
								public ViewerRoleMenuItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ViewerRoleMenuItem");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Viewer").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ManagerRoleMenuItem extends WebWebElementNodeBase
	{

		
								public ManagerRoleMenuItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ManagerRoleMenuItem");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Manager").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditorRoleMenuItem extends WebWebElementNodeBase
	{

		
								public EditorRoleMenuItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditorRoleMenuItem");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Editor").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectRoleMenuEditor extends WebWebElementNodeBase
	{

		
								public SelectRoleMenuEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectRoleMenuEditor");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-TOP-CONTROL").innerText("Editor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectRoleMenu extends WebWebElementNodeBase
	{

		
								public SelectRoleMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectRoleMenu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-TOP-CONTROL").innerText("Select role ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnterProjectTitleField extends WebEditFieldNodeBase
	{

		
								public EnterProjectTitleField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterProjectTitleField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Enter project title").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddProjectMemberField extends WebEditFieldNodeBase
	{

		
								public AddProjectMemberField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddProjectMemberField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("project.member@company.org").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddProjectButton extends WebWebElementNodeBase
	{

		
								public AddProjectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddProjectButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Add Project ").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestprojectEditedCard extends WebWebElementNodeBase
	{

		
								public TestprojectEditedCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestprojectEditedCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("TestprojectEdited").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestprojectCard extends WebWebElementNodeBase
	{

		
								public TestprojectCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestprojectCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Testproject").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DemoProjectACard extends WebWebElementNodeBase
	{

		
								public DemoProjectACard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DemoProjectACard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Project A").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MemberAmount1 extends WebWebElementNodeBase
	{

		
								public MemberAmount1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MemberAmount1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("1 member(s)").tagName("SPAN").className("ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteProject extends WebWebElementNodeBase
	{

		
								public DeleteProject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteProject");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Delete Project").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditProjectMembersEntry extends WebWebElementNodeBase
	{

		
								public EditProjectMembersEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditProjectMembersEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Edit Members").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditProjectDetailsEntry extends WebWebElementNodeBase
	{

		
								public EditProjectDetailsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditProjectDetailsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Edit Project Details").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoData extends WebWebElementNodeBase
	{

		
								public NoData(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NoData");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("No Data").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DemoProjectBCard extends WebWebElementNodeBase
	{

		
								public DemoProjectBCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DemoProjectBCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Project B").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IncrementalModulesTestCard extends WebWebElementNodeBase
	{

		
								public IncrementalModulesTestCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IncrementalModulesTestCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("IncrementalModulesTest").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ManagerMember extends WebWebElementNodeBase
	{

		
								public ManagerMember(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("managerMember");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerHTML("manager@deloitte.com").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientSelectionDropdown extends WebWebElementNodeBase
	{

		
								public ClientSelectionDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("clientSelectionDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class editorMember extends WebWebElementNodeBase
	{

		
								public editorMember(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("editorMember");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerHTML("editor@deloitte.com").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class viewerMember extends WebWebElementNodeBase
	{

		
								public viewerMember(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("viewerMember");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerHTML("viewer@deloitte.com").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TxDMVTestCard extends WebWebElementNodeBase
	{

		
								public TxDMVTestCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TxDMVTestCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("TxDMVTest").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TxdmvCard extends WebWebElementNodeBase
	{

		
								public TxdmvCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Txdmv");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Txdmv").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SampleProjectCard extends WebWebElementNodeBase
	{

		
								public SampleProjectCard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SampleProjectCard");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SampleProject").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ClientsAndProjectsPage extends WebPageNodeBase
	{

		
			private AddProjectButton AddProjectButton;
	private AddClientButton AddClientButton;
	private EditRow1 EditRow1;
	private EditRow2 EditRow2;
	private AddProjectEntry AddProjectEntry;
	private EnterProjectTitleField EnterProjectTitleField;
	private CancelButton CancelButton;
	private EditClientAdministratorsEntry EditClientAdministratorsEntry;
	private EditClientDetailsEntry EditClientDetailsEntry;
	private AddMemberButton AddMemberButton;
	private AddClientMemberField AddClientMemberField;
	private TestMailAdressDisplay TestMailAdressDisplay;
	private ClientAdminRoleDisplay ClientAdminRoleDisplay;
	private DeleteClient DeleteClient;
	private ExpandButtonRow1 ExpandButtonRow1;
	private ClientProjectRowEntry ClientProjectRowEntry;
	private ClientAdminRowEntry ClientAdminRowEntry;
	private ProjectNatureRowEntry ProjectNatureRowEntry;
	private MemberRowEntry MemberRowEntry;
	private AddProjectMemberField AddProjectMemberField;
	private EditProjectDetailsEntry EditProjectDetailsEntry;
	private EditProjectMembersEntry EditProjectMembersEntry;
	private SelectRoleMenu SelectRoleMenu;
	private SelectRoleMenu2 SelectRoleMenu2;
	private EditorRoleMenuItem EditorRoleMenuItem;
	private DeleteProject DeleteProject;
	private ViewProject ViewProject;
	private ExpandButtonRow2 ExpandButtonRow2;
	private RemoveProjectMember1 RemoveProjectMember1;
	private RemoveProjectMember2 RemoveProjectMember2;
	private ExpandButtonRow3 ExpandButtonRow3;
	private EditRow3 EditRow3;
	private EditRow4 EditRow4;
	private MemberCount MemberCount;
						public ClientsAndProjectsPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddProjectButton = new AddProjectButton(this, applicationModel);
		AddClientButton = new AddClientButton(this, applicationModel);
		EditRow1 = new EditRow1(this, applicationModel);
		EditRow2 = new EditRow2(this, applicationModel);
		AddProjectEntry = new AddProjectEntry(this, applicationModel);
		EnterProjectTitleField = new EnterProjectTitleField(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		EditClientAdministratorsEntry = new EditClientAdministratorsEntry(this, applicationModel);
		EditClientDetailsEntry = new EditClientDetailsEntry(this, applicationModel);
		AddMemberButton = new AddMemberButton(this, applicationModel);
		AddClientMemberField = new AddClientMemberField(this, applicationModel);
		TestMailAdressDisplay = new TestMailAdressDisplay(this, applicationModel);
		ClientAdminRoleDisplay = new ClientAdminRoleDisplay(this, applicationModel);
		DeleteClient = new DeleteClient(this, applicationModel);
		ExpandButtonRow1 = new ExpandButtonRow1(this, applicationModel);
		ClientProjectRowEntry = new ClientProjectRowEntry(this, applicationModel);
		ClientAdminRowEntry = new ClientAdminRowEntry(this, applicationModel);
		ProjectNatureRowEntry = new ProjectNatureRowEntry(this, applicationModel);
		MemberRowEntry = new MemberRowEntry(this, applicationModel);
		AddProjectMemberField = new AddProjectMemberField(this, applicationModel);
		EditProjectDetailsEntry = new EditProjectDetailsEntry(this, applicationModel);
		EditProjectMembersEntry = new EditProjectMembersEntry(this, applicationModel);
		SelectRoleMenu = new SelectRoleMenu(this, applicationModel);
		SelectRoleMenu2 = new SelectRoleMenu2(this, applicationModel);
		EditorRoleMenuItem = new EditorRoleMenuItem(this, applicationModel);
		DeleteProject = new DeleteProject(this, applicationModel);
		ViewProject = new ViewProject(this, applicationModel);
		ExpandButtonRow2 = new ExpandButtonRow2(this, applicationModel);
		RemoveProjectMember1 = new RemoveProjectMember1(this, applicationModel);
		RemoveProjectMember2 = new RemoveProjectMember2(this, applicationModel);
		ExpandButtonRow3 = new ExpandButtonRow3(this, applicationModel);
		EditRow3 = new EditRow3(this, applicationModel);
		EditRow4 = new EditRow4(this, applicationModel);
		MemberCount = new MemberCount(this, applicationModel);

			setDisplayName("ClientsAndProjectsPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddProjectButton AddProjectButton() { return AddProjectButton; }
		public AddClientButton AddClientButton() { return AddClientButton; }
		public EditRow1 EditRow1() { return EditRow1; }
		public EditRow2 EditRow2() { return EditRow2; }
		public AddProjectEntry AddProjectEntry() { return AddProjectEntry; }
		public EnterProjectTitleField EnterProjectTitleField() { return EnterProjectTitleField; }
		public CancelButton CancelButton() { return CancelButton; }
		public EditClientAdministratorsEntry EditClientAdministratorsEntry() { return EditClientAdministratorsEntry; }
		public EditClientDetailsEntry EditClientDetailsEntry() { return EditClientDetailsEntry; }
		public AddMemberButton AddMemberButton() { return AddMemberButton; }
		public AddClientMemberField AddClientMemberField() { return AddClientMemberField; }
		public TestMailAdressDisplay TestMailAdressDisplay() { return TestMailAdressDisplay; }
		public ClientAdminRoleDisplay ClientAdminRoleDisplay() { return ClientAdminRoleDisplay; }
		public DeleteClient DeleteClient() { return DeleteClient; }
		public ExpandButtonRow1 ExpandButtonRow1() { return ExpandButtonRow1; }
		public ClientProjectRowEntry ClientProjectRowEntry() { return ClientProjectRowEntry; }
		public ClientAdminRowEntry ClientAdminRowEntry() { return ClientAdminRowEntry; }
		public ProjectNatureRowEntry ProjectNatureRowEntry() { return ProjectNatureRowEntry; }
		public MemberRowEntry MemberRowEntry() { return MemberRowEntry; }
		public AddProjectMemberField AddProjectMemberField() { return AddProjectMemberField; }
		public EditProjectDetailsEntry EditProjectDetailsEntry() { return EditProjectDetailsEntry; }
		public EditProjectMembersEntry EditProjectMembersEntry() { return EditProjectMembersEntry; }
		public SelectRoleMenu SelectRoleMenu() { return SelectRoleMenu; }
		public SelectRoleMenu2 SelectRoleMenu2() { return SelectRoleMenu2; }
		public EditorRoleMenuItem EditorRoleMenuItem() { return EditorRoleMenuItem; }
		public DeleteProject DeleteProject() { return DeleteProject; }
		public ViewProject ViewProject() { return ViewProject; }
		public ExpandButtonRow2 ExpandButtonRow2() { return ExpandButtonRow2; }
		public RemoveProjectMember1 RemoveProjectMember1() { return RemoveProjectMember1; }
		public RemoveProjectMember2 RemoveProjectMember2() { return RemoveProjectMember2; }
		public ExpandButtonRow3 ExpandButtonRow3() { return ExpandButtonRow3; }
		public EditRow3 EditRow3() { return EditRow3; }
		public EditRow4 EditRow4() { return EditRow4; }
		public MemberCount MemberCount() { return MemberCount; }
		
			public class AddProjectButton extends WebWebElementNodeBase
	{

		
								public AddProjectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddProjectButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Add Project ").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddClientButton extends WebWebElementNodeBase
	{

		
								public AddClientButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddClientButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Add Client ").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditRow1 extends WebWebElementNodeBase
	{

		
								public EditRow1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditRow1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").className("ant-dropdown-link ant-dropdown-trigger ng-star-inserted").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditRow2 extends WebWebElementNodeBase
	{

		
								public EditRow2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditRow2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").className("ant-dropdown-link ant-dropdown-trigger ng-star-inserted").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddProjectEntry extends WebWebElementNodeBase
	{

		
								public AddProjectEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddProjectEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Add Project ").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnterProjectTitleField extends WebEditFieldNodeBase
	{

		
								public EnterProjectTitleField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterProjectTitleField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Enter project title").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends WebWebElementNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Cancel").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditClientAdministratorsEntry extends WebWebElementNodeBase
	{

		
								public EditClientAdministratorsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditClientAdministratorsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Edit Client Administrators ").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditClientDetailsEntry extends WebWebElementNodeBase
	{

		
								public EditClientDetailsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditClientDetailsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Edit Client Details ").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddMemberButton extends WebWebElementNodeBase
	{

		
								public AddMemberButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddMemberButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Add").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddClientMemberField extends WebEditFieldNodeBase
	{

		
								public AddClientMemberField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddClientMemberField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("client.admin@company.org").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestMailAdressDisplay extends WebWebElementNodeBase
	{

		
								public TestMailAdressDisplay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestMailAdressDisplay");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("innowakesupport@deloitte.com").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientAdminRoleDisplay extends WebWebElementNodeBase
	{

		
								public ClientAdminRoleDisplay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClientAdminRoleDisplay");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Client Administrators ").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteClient extends WebWebElementNodeBase
	{

		
								public DeleteClient(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteClient");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Delete Client and Projects ").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpandButtonRow1 extends WebWebElementNodeBase
	{

		
								public ExpandButtonRow1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExpandButtonRow1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("BUTTON").className("ant-table-row-expand-icon ant-table-row-expand-icon-collapsed ng-star-inserted").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientProjectRowEntry extends WebWebElementNodeBase
	{

		
								public ClientProjectRowEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClientProjectRowEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Project A").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientAdminRowEntry extends WebWebElementNodeBase
	{

		
								public ClientAdminRowEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClientAdminRowEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("innowakesupport@deloitte.com").tagName("TD").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectNatureRowEntry extends WebWebElementNodeBase
	{

		
								public ProjectNatureRowEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectNatureRowEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MINING").tagName("TD").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MemberRowEntry extends WebWebElementNodeBase
	{

		
								public MemberRowEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MemberRowEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddProjectMemberField extends WebEditFieldNodeBase
	{

		
								public AddProjectMemberField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddProjectMemberField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("project.member@company.org").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditProjectDetailsEntry extends WebWebElementNodeBase
	{

		
								public EditProjectDetailsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditProjectDetailsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Edit Project Details").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditProjectMembersEntry extends WebWebElementNodeBase
	{

		
								public EditProjectMembersEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditProjectMembersEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Edit Members").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectRoleMenu extends WebWebElementNodeBase
	{

		
								public SelectRoleMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectRoleMenu");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Select role ").tagName("NZ-SELECT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectRoleMenu2 extends WebWebElementNodeBase
	{

		
								public SelectRoleMenu2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectRoleMenu2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Editor").tagName("NZ-SELECT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditorRoleMenuItem extends WebWebElementNodeBase
	{

		
								public EditorRoleMenuItem(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditorRoleMenuItem");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Editor").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteProject extends WebWebElementNodeBase
	{

		
								public DeleteProject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteProject");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Delete Project").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ViewProject extends WebWebElementNodeBase
	{

		
								public ViewProject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ViewProject");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("View Project").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpandButtonRow2 extends WebButtonNodeBase
	{

		
								public ExpandButtonRow2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExpandButtonRow2");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("button").name("").role("").tagName("BUTTON").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveProjectMember1 extends WebWebElementNodeBase
	{

		
								public RemoveProjectMember1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RemoveProjectMember1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("svg").index(22).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveProjectMember2 extends WebWebElementNodeBase
	{

		
								public RemoveProjectMember2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RemoveProjectMember2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("svg").index(24).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpandButtonRow3 extends WebButtonNodeBase
	{

		
								public ExpandButtonRow3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExpandButtonRow3");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("button").name("").role("").tagName("BUTTON").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditRow3 extends WebWebElementNodeBase
	{

		
								public EditRow3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditRow3");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("svg").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditRow4 extends WebWebElementNodeBase
	{

		
								public EditRow4(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditRow4");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("svg").index(16).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MemberCount extends WebWebElementNodeBase
	{

		
								public MemberCount(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MemberCount");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("1 Member").tagName("TD").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class LogoutWebElement extends WebWebElementNodeBase
	{

		
								public LogoutWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Logout");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Logout").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EclipseIconButton extends WebButtonNodeBase
	{

		
								public EclipseIconButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EclipseIconButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").tagName("BUTTON").className("eclipse-btn").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EclipseAnnotationButton extends WebButtonNodeBase
	{

		
								public EclipseAnnotationButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EclipseAnnotationButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("button").name("    Eclipse Icon/Online                                                                                                                                                                                                                                                                                                                                                                                                                        ").role("").tagName("BUTTON").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteClient extends WebWebElementNodeBase
	{

		
								public DeleteClient(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteClient");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").className(new RegExpProperty("ant-helper__highlight-text ant-dropdown-menu-item.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Settings extends WebWebElementNodeBase
	{

		
								public Settings(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Settings");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Settings").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PencilButton extends WebButtonNodeBase
	{

		
								public PencilButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PencilButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").className("ant-typography-edit ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PortEditField extends WebEditFieldNodeBase
	{

		
								public PortEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PortEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("textarea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EclipseOfflineButton extends WebButtonNodeBase
	{

		
								public EclipseOfflineButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EclipseOfflineButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").tagName("BUTTON").enabled(false).className("eclipse-btn").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CollapsableNavigation extends WebWebElementNodeBase
	{

		
								public CollapsableNavigation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Collapsable Navigation");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("i").className(new RegExpProperty("anticon trigger-icon.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomiesLink extends WebLinkNodeBase
	{

		
								public TaxonomiesLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomiesLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Taxonomies").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenCode extends WebWebElementNodeBase
	{

		
								public OpenCode(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("openCode ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LABEL").className("contextual-toolbar__label").attribute("for", "open-code").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NavigationPane extends WebWebElementNodeBase
	{

		
								public NavigationPane(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Navigation Pane");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("UL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenInEclipseOption extends WebWebElementNodeBase
	{

		
								public OpenInEclipseOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open in Eclipse");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Open in Eclipse").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS7101GraphLink extends WebWebElementNodeBase
	{

		
								public MMRS7101GraphLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS7101graphlink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MMRS7101").tagName("tspan").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CollapsedNavigationIcon extends WebWebElementNodeBase
	{

		
								public CollapsedNavigationIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CollapsedNavigationIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").className("mining-sider__trigger ant-layout-sider-trigger ant-menu ant-menu-root ant-menu-light ant-menu-vertical ant-menu-inline-collapsed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditCardField3 extends WebWebElementNodeBase
	{

		
								public EditCardField3(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditCardField3");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon preview-card__elipsis-action ant-dropdown-trigger anticon-ellipsis ng-star-inserted").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MiningHomeIcon extends WebWebElementNodeBase
	{

		
								public MiningHomeIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MiningHomeIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("A").attribute("href", "#/clients").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FitContentButton extends WebWebElementNodeBase
	{

		
								public FitContentButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FitContentButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("svg").index(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PNGSpan extends WebWebElementNodeBase
	{

		
								public PNGSpan(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PNGSpan");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("PNG").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PNGButton extends WebButtonNodeBase
	{

		
								public PNGButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PNG");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("PNG").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class openDependencyGraphButton extends WebButtonNodeBase
	{

		
								public openDependencyGraphButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OpenDependencyGraphButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("submit").name("Open").role("").tagName("BUTTON").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClientAdminMailAdressDisplay extends WebWebElementNodeBase
	{

		
								public ClientAdminMailAdressDisplay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClientAdminMailAdressDisplay");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("clientadmin@deloitte.com").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectRoleOption extends WebWebElementNodeBase
	{

		
								public ProjectRoleOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectRoleOption");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Please select ").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ViewerOption extends WebWebElementNodeBase
	{

		
								public ViewerOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ViewerOption");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Viewer").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditMembersAddButton extends WebButtonNodeBase
	{

		
								public EditMembersAddButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditMembersAddButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Add").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditMembersCloseButton extends WebButtonNodeBase
	{

		
								public EditMembersCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditMembersCloseButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditCardField4 extends WebWebElementNodeBase
	{

		
								public EditCardField4(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditCardField4");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className("anticon preview-card__elipsis-action ant-dropdown-trigger anticon-ellipsis ng-star-inserted").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CopybookOption extends WebWebElementNodeBase
	{

		
								public CopybookOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CopybookOption");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-select-item-option-content").innerText("COPYBOOK").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ByNameButton extends WebWebElementNodeBase
	{

		
								public ByNameButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("By name");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("By name").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ABENDOption extends WebWebElementNodeBase
	{

		
								public ABENDOption(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ABEND");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("ABEND").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FILEWebElement extends WebWebElementNodeBase
	{

		
								public FILEWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FILE");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("FILE").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectExportPage extends WebPageNodeBase
	{

		
			private DownloadCSVButton DownloadCSVButton;
	private DownloadExcelButton DownloadExcelButton;
	private DownloadGraphMLButton DownloadGraphMLButton;
	private DownloadEffortSummaryButton DownloadEffortSummaryButton;
	private DownloadzODMButton DownloadzODMButton;
						public ProjectExportPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DownloadCSVButton = new DownloadCSVButton(this, applicationModel);
		DownloadExcelButton = new DownloadExcelButton(this, applicationModel);
		DownloadGraphMLButton = new DownloadGraphMLButton(this, applicationModel);
		DownloadEffortSummaryButton = new DownloadEffortSummaryButton(this, applicationModel);
		DownloadzODMButton = new DownloadzODMButton(this, applicationModel);

			setDisplayName("ProjectExportPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DownloadCSVButton DownloadCSVButton() { return DownloadCSVButton; }
		public DownloadExcelButton DownloadExcelButton() { return DownloadExcelButton; }
		public DownloadGraphMLButton DownloadGraphMLButton() { return DownloadGraphMLButton; }
		public DownloadEffortSummaryButton DownloadEffortSummaryButton() { return DownloadEffortSummaryButton; }
		public DownloadzODMButton DownloadzODMButton() { return DownloadzODMButton; }
		
			public class DownloadCSVButton extends WebWebElementNodeBase
	{

		
								public DownloadCSVButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DownloadCSVButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Download CSV").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DownloadExcelButton extends WebWebElementNodeBase
	{

		
								public DownloadExcelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DownloadExcelButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Download Excel").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DownloadGraphMLButton extends WebWebElementNodeBase
	{

		
								public DownloadGraphMLButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DownloadGraphMLButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Download").tagName("BUTTON").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DownloadEffortSummaryButton extends WebWebElementNodeBase
	{

		
								public DownloadEffortSummaryButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DownloadEffortSummaryButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Download Effort Summary Excel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DownloadzODMButton extends WebWebElementNodeBase
	{

		
								public DownloadzODMButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DownloadzODMButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("ng-star-inserted").innerText("Download").tagName("SPAN").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ExportLink extends WebLinkNodeBase
	{

		
								public ExportLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Export").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Endlabel1 extends WebWebElementNodeBase
	{

		
								public Endlabel1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Endlabel1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COPYBOOK ").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelAnnotationButton extends WebWebElementNodeBase
	{

		
								public CancelAnnotationButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelAnnotationButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerHTML("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MetricsMenuEntry extends WebWebElementNodeBase
	{

		
								public MetricsMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MetricsMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Metrics").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SummaryMenuEntry extends WebWebElementNodeBase
	{

		
								public SummaryMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SummaryMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Summary").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ArtifactsMenuEntry extends WebWebElementNodeBase
	{

		
								public ArtifactsMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ArtifactsMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Artifacts").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilitiesMenuEntry extends WebWebElementNodeBase
	{

		
								public UtilitiesMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilitiesMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Utilities").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InterfacesMenuEntry extends WebWebElementNodeBase
	{

		
								public InterfacesMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InterfacesMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Interfaces").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SQLMenuEntry extends WebWebElementNodeBase
	{

		
								public SQLMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SQLMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SQL").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DecompositionMenuEntry extends WebWebElementNodeBase
	{

		
								public DecompositionMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DecompositionMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Decomposition").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CodeQualityEntry extends WebWebElementNodeBase
	{

		
								public CodeQualityEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CodeQualityMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Code Quality").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CandidatesMenuEntry extends WebWebElementNodeBase
	{

		
								public CandidatesMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CandidatesMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Candidates").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ArtifactsPage extends WebPageNodeBase
	{

		
			private Tooltip Tooltip;
	private AssemblerHeader AssemblerHeader;
	private AssemblerDiagram AssemblerDiagram;
	private BasicHeader BasicHeader;
	private BasicDiagram BasicDiagram;
	private CHeader CHeader;
	private CDiagram CDiagram;
	private CobolHeader CobolHeader;
	private CobolDiagram CobolDiagram;
	private CSDHeader CSDHeader;
	private CSDDiagram CSDDiagram;
	private EasytrieveHeader EasytrieveHeader;
	private EasytrieveDiagram EasytrieveDiagram;
	private ECLHeader ECLHeader;
	private ECLDiagram ECLDiagram;
	private IMSHeader IMSHeader;
	private IMSDiagram IMSDiagram;
	private JavaHeader JavaHeader;
	private JavaDiagram JavaDiagram;
	private JCLHeader JCLHeader;
	private JCLDiagram JCLDiagram;
	private NaturalHeader NaturalHeader;
	private NaturalDiagram NaturalDiagram;
	private OracleHeader OracleHeader;
	private OracleDiagram OracleDiagram;
	private PL1Header PL1Header;
	private PL1Diagram PL1Diagram;
	private ResourceHeader ResourceHeader;
	private ResourceDiagram ResourceDiagram;
	private SQLHeader SQLHeader;
	private SQLDiagram SQLDiagram;
	private UnknownHeader UnknownHeader;
	private UnknownDiagram UnknownDiagram;
	private VMSHeader VMSHeader;
	private VMSDiagram VMSDiagram;
	private ArtifactsHeader ArtifactsHeader;
	private AssemblerPNG AssemblerPNG;
	private InterfacePNG InterfacePNG;
	private UtilityPNG UtilityPNG;
	private BackButton BackButton;
						public ArtifactsPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tooltip = new Tooltip(this, applicationModel);
		AssemblerHeader = new AssemblerHeader(this, applicationModel);
		AssemblerDiagram = new AssemblerDiagram(this, applicationModel);
		BasicHeader = new BasicHeader(this, applicationModel);
		BasicDiagram = new BasicDiagram(this, applicationModel);
		CHeader = new CHeader(this, applicationModel);
		CDiagram = new CDiagram(this, applicationModel);
		CobolHeader = new CobolHeader(this, applicationModel);
		CobolDiagram = new CobolDiagram(this, applicationModel);
		CSDHeader = new CSDHeader(this, applicationModel);
		CSDDiagram = new CSDDiagram(this, applicationModel);
		EasytrieveHeader = new EasytrieveHeader(this, applicationModel);
		EasytrieveDiagram = new EasytrieveDiagram(this, applicationModel);
		ECLHeader = new ECLHeader(this, applicationModel);
		ECLDiagram = new ECLDiagram(this, applicationModel);
		IMSHeader = new IMSHeader(this, applicationModel);
		IMSDiagram = new IMSDiagram(this, applicationModel);
		JavaHeader = new JavaHeader(this, applicationModel);
		JavaDiagram = new JavaDiagram(this, applicationModel);
		JCLHeader = new JCLHeader(this, applicationModel);
		JCLDiagram = new JCLDiagram(this, applicationModel);
		NaturalHeader = new NaturalHeader(this, applicationModel);
		NaturalDiagram = new NaturalDiagram(this, applicationModel);
		OracleHeader = new OracleHeader(this, applicationModel);
		OracleDiagram = new OracleDiagram(this, applicationModel);
		PL1Header = new PL1Header(this, applicationModel);
		PL1Diagram = new PL1Diagram(this, applicationModel);
		ResourceHeader = new ResourceHeader(this, applicationModel);
		ResourceDiagram = new ResourceDiagram(this, applicationModel);
		SQLHeader = new SQLHeader(this, applicationModel);
		SQLDiagram = new SQLDiagram(this, applicationModel);
		UnknownHeader = new UnknownHeader(this, applicationModel);
		UnknownDiagram = new UnknownDiagram(this, applicationModel);
		VMSHeader = new VMSHeader(this, applicationModel);
		VMSDiagram = new VMSDiagram(this, applicationModel);
		ArtifactsHeader = new ArtifactsHeader(this, applicationModel);
		AssemblerPNG = new AssemblerPNG(this, applicationModel);
		InterfacePNG = new InterfacePNG(this, applicationModel);
		UtilityPNG = new UtilityPNG(this, applicationModel);
		BackButton = new BackButton(this, applicationModel);

			setDisplayName("ArtifactsPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tooltip Tooltip() { return Tooltip; }
		public AssemblerHeader AssemblerHeader() { return AssemblerHeader; }
		public AssemblerDiagram AssemblerDiagram() { return AssemblerDiagram; }
		public BasicHeader BasicHeader() { return BasicHeader; }
		public BasicDiagram BasicDiagram() { return BasicDiagram; }
		public CHeader CHeader() { return CHeader; }
		public CDiagram CDiagram() { return CDiagram; }
		public CobolHeader CobolHeader() { return CobolHeader; }
		public CobolDiagram CobolDiagram() { return CobolDiagram; }
		public CSDHeader CSDHeader() { return CSDHeader; }
		public CSDDiagram CSDDiagram() { return CSDDiagram; }
		public EasytrieveHeader EasytrieveHeader() { return EasytrieveHeader; }
		public EasytrieveDiagram EasytrieveDiagram() { return EasytrieveDiagram; }
		public ECLHeader ECLHeader() { return ECLHeader; }
		public ECLDiagram ECLDiagram() { return ECLDiagram; }
		public IMSHeader IMSHeader() { return IMSHeader; }
		public IMSDiagram IMSDiagram() { return IMSDiagram; }
		public JavaHeader JavaHeader() { return JavaHeader; }
		public JavaDiagram JavaDiagram() { return JavaDiagram; }
		public JCLHeader JCLHeader() { return JCLHeader; }
		public JCLDiagram JCLDiagram() { return JCLDiagram; }
		public NaturalHeader NaturalHeader() { return NaturalHeader; }
		public NaturalDiagram NaturalDiagram() { return NaturalDiagram; }
		public OracleHeader OracleHeader() { return OracleHeader; }
		public OracleDiagram OracleDiagram() { return OracleDiagram; }
		public PL1Header PL1Header() { return PL1Header; }
		public PL1Diagram PL1Diagram() { return PL1Diagram; }
		public ResourceHeader ResourceHeader() { return ResourceHeader; }
		public ResourceDiagram ResourceDiagram() { return ResourceDiagram; }
		public SQLHeader SQLHeader() { return SQLHeader; }
		public SQLDiagram SQLDiagram() { return SQLDiagram; }
		public UnknownHeader UnknownHeader() { return UnknownHeader; }
		public UnknownDiagram UnknownDiagram() { return UnknownDiagram; }
		public VMSHeader VMSHeader() { return VMSHeader; }
		public VMSDiagram VMSDiagram() { return VMSDiagram; }
		public ArtifactsHeader ArtifactsHeader() { return ArtifactsHeader; }
		public AssemblerPNG AssemblerPNG() { return AssemblerPNG; }
		public InterfacePNG InterfacePNG() { return InterfacePNG; }
		public UtilityPNG UtilityPNG() { return UtilityPNG; }
		public BackButton BackButton() { return BackButton; }
		
			public class Tooltip extends WebWebElementNodeBase
	{

		
								public Tooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Missing : ASSEMBLER|ASSEMBLER")).className("g2-tooltip-title").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AssemblerHeader extends WebWebElementNodeBase
	{

		
								public AssemblerHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AssemblerHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("ASSEMBLER").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AssemblerDiagram extends WebWebElementNodeBase
	{

		
								public AssemblerDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AssemblerDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BasicHeader extends WebWebElementNodeBase
	{

		
								public BasicHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BasicHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("BASIC").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BasicDiagram extends WebWebElementNodeBase
	{

		
								public BasicDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BasicDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CHeader extends WebWebElementNodeBase
	{

		
								public CHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("C").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CDiagram extends WebWebElementNodeBase
	{

		
								public CDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolHeader extends WebWebElementNodeBase
	{

		
								public CobolHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COBOL").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolDiagram extends WebWebElementNodeBase
	{

		
								public CobolDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSDHeader extends WebWebElementNodeBase
	{

		
								public CSDHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSDHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("CSD").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSDDiagram extends WebWebElementNodeBase
	{

		
								public CSDDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSDDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EasytrieveHeader extends WebWebElementNodeBase
	{

		
								public EasytrieveHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EasytrieveHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("EASYTRIEVE").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EasytrieveDiagram extends WebWebElementNodeBase
	{

		
								public EasytrieveDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EasytrieveDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ECLHeader extends WebWebElementNodeBase
	{

		
								public ECLHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ECLHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("ECL").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ECLDiagram extends WebWebElementNodeBase
	{

		
								public ECLDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ECLDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IMSHeader extends WebWebElementNodeBase
	{

		
								public IMSHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IMSHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("IMS").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IMSDiagram extends WebWebElementNodeBase
	{

		
								public IMSDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IMSDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JavaHeader extends WebWebElementNodeBase
	{

		
								public JavaHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("JAVA").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JavaDiagram extends WebWebElementNodeBase
	{

		
								public JavaDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JCLHeader extends WebWebElementNodeBase
	{

		
								public JCLHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JCLHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("JCL").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JCLDiagram extends WebWebElementNodeBase
	{

		
								public JCLDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JCLDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalHeader extends WebWebElementNodeBase
	{

		
								public NaturalHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("NATURAL").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalDiagram extends WebWebElementNodeBase
	{

		
								public NaturalDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OracleHeader extends WebWebElementNodeBase
	{

		
								public OracleHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OracleHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Oracle").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OracleDiagram extends WebWebElementNodeBase
	{

		
								public OracleDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OracleDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(11).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PL1Header extends WebWebElementNodeBase
	{

		
								public PL1Header(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PL1Header");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("PL1").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PL1Diagram extends WebWebElementNodeBase
	{

		
								public PL1Diagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PL1Diagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(12).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResourceHeader extends WebWebElementNodeBase
	{

		
								public ResourceHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResourceHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("RESOURCE").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResourceDiagram extends WebWebElementNodeBase
	{

		
								public ResourceDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResourceDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SQLHeader extends WebWebElementNodeBase
	{

		
								public SQLHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SQLHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SQL").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SQLDiagram extends WebWebElementNodeBase
	{

		
								public SQLDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SQLDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(14).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UnknownHeader extends WebWebElementNodeBase
	{

		
								public UnknownHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UnknownHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("UNKNOWN").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UnknownDiagram extends WebWebElementNodeBase
	{

		
								public UnknownDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UnknownDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VMSHeader extends WebWebElementNodeBase
	{

		
								public VMSHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VMSHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("VMS").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VMSDiagram extends WebWebElementNodeBase
	{

		
								public VMSDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VMSDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(16).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ArtifactsHeader extends WebWebElementNodeBase
	{

		
								public ArtifactsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Artifacts");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Artifacts").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AssemblerPNG extends WebButtonNodeBase
	{

		
								public AssemblerPNG(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AssemblerPNG");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("").name("PNG").role("").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InterfacePNG extends WebButtonNodeBase
	{

		
								public InterfacePNG(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InterfacePNG");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("").name("PNG").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilityPNG extends WebButtonNodeBase
	{

		
								public UtilityPNG(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilityPNG");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("").name("PNG").role("").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BackButton extends WebButtonNodeBase
	{

		
								public BackButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BackButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().className("ant-page-header-back-button").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CandidatesPage extends WebPageNodeBase
	{

		
			private Tooltip Tooltip;
	private BusinessRulesCandidatesDiagram BusinessRulesCandidatesDiagram;
	private BusinessRulesCandidatesHeader BusinessRulesCandidatesHeader;
	private DatabaseCandidatesHeader DatabaseCandidatesHeader;
	private DataDictionaryCandidatesHeader DataDictionaryCandidatesHeader;
	private DatabaseCandidatesDiagram DatabaseCandidatesDiagram;
	private DataDictionaryCandidatesDiagram DataDictionaryCandidatesDiagram;
	private BusinessRulePNG BusinessRulePNG;
	private DatabasePNG DatabasePNG;
	private DataDictionaryPNG DataDictionaryPNG;
	private BusinessRulesCandidatesDescription BusinessRulesCandidatesDescription;
	private DatabaseCandidatesDescription DatabaseCandidatesDescription;
	private DataDictionaryCandidatesDescription DataDictionaryCandidatesDescription;
	private NoCandidates NoCandidates;
						public CandidatesPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tooltip = new Tooltip(this, applicationModel);
		BusinessRulesCandidatesDiagram = new BusinessRulesCandidatesDiagram(this, applicationModel);
		BusinessRulesCandidatesHeader = new BusinessRulesCandidatesHeader(this, applicationModel);
		DatabaseCandidatesHeader = new DatabaseCandidatesHeader(this, applicationModel);
		DataDictionaryCandidatesHeader = new DataDictionaryCandidatesHeader(this, applicationModel);
		DatabaseCandidatesDiagram = new DatabaseCandidatesDiagram(this, applicationModel);
		DataDictionaryCandidatesDiagram = new DataDictionaryCandidatesDiagram(this, applicationModel);
		BusinessRulePNG = new BusinessRulePNG(this, applicationModel);
		DatabasePNG = new DatabasePNG(this, applicationModel);
		DataDictionaryPNG = new DataDictionaryPNG(this, applicationModel);
		BusinessRulesCandidatesDescription = new BusinessRulesCandidatesDescription(this, applicationModel);
		DatabaseCandidatesDescription = new DatabaseCandidatesDescription(this, applicationModel);
		DataDictionaryCandidatesDescription = new DataDictionaryCandidatesDescription(this, applicationModel);
		NoCandidates = new NoCandidates(this, applicationModel);

			setDisplayName("CandidatesPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tooltip Tooltip() { return Tooltip; }
		public BusinessRulesCandidatesDiagram BusinessRulesCandidatesDiagram() { return BusinessRulesCandidatesDiagram; }
		public BusinessRulesCandidatesHeader BusinessRulesCandidatesHeader() { return BusinessRulesCandidatesHeader; }
		public DatabaseCandidatesHeader DatabaseCandidatesHeader() { return DatabaseCandidatesHeader; }
		public DataDictionaryCandidatesHeader DataDictionaryCandidatesHeader() { return DataDictionaryCandidatesHeader; }
		public DatabaseCandidatesDiagram DatabaseCandidatesDiagram() { return DatabaseCandidatesDiagram; }
		public DataDictionaryCandidatesDiagram DataDictionaryCandidatesDiagram() { return DataDictionaryCandidatesDiagram; }
		public BusinessRulePNG BusinessRulePNG() { return BusinessRulePNG; }
		public DatabasePNG DatabasePNG() { return DatabasePNG; }
		public DataDictionaryPNG DataDictionaryPNG() { return DataDictionaryPNG; }
		public BusinessRulesCandidatesDescription BusinessRulesCandidatesDescription() { return BusinessRulesCandidatesDescription; }
		public DatabaseCandidatesDescription DatabaseCandidatesDescription() { return DatabaseCandidatesDescription; }
		public DataDictionaryCandidatesDescription DataDictionaryCandidatesDescription() { return DataDictionaryCandidatesDescription; }
		public NoCandidates NoCandidates() { return NoCandidates; }
		
			public class Tooltip extends WebWebElementNodeBase
	{

		
								public Tooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Business Rule")).className("g2-tooltip-title").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BusinessRulesCandidatesDiagram extends WebWebElementNodeBase
	{

		
								public BusinessRulesCandidatesDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BusinessRulesCandidatesDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BusinessRulesCandidatesHeader extends WebWebElementNodeBase
	{

		
								public BusinessRulesCandidatesHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BusinessRulesCandidatesHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Business Rules Candidates").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DatabaseCandidatesHeader extends WebWebElementNodeBase
	{

		
								public DatabaseCandidatesHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DatabaseCandidates");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Database Candidates").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryCandidatesHeader extends WebWebElementNodeBase
	{

		
								public DataDictionaryCandidatesHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryCandidates");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Data Dictionary Candidates").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DatabaseCandidatesDiagram extends WebWebElementNodeBase
	{

		
								public DatabaseCandidatesDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DatabaseCandidatesDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryCandidatesDiagram extends WebWebElementNodeBase
	{

		
								public DataDictionaryCandidatesDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryCandidatesDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BusinessRulePNG extends WebButtonNodeBase
	{

		
								public BusinessRulePNG(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BusinessRulePNG");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("PNG").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DatabasePNG extends WebButtonNodeBase
	{

		
								public DatabasePNG(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DatabasePNG");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("PNG").tagName("A").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryPNG extends WebButtonNodeBase
	{

		
								public DataDictionaryPNG(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryPNG");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("PNG").tagName("A").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BusinessRulesCandidatesDescription extends WebWebElementNodeBase
	{

		
								public BusinessRulesCandidatesDescription(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BusinessRulesCandidatesDescription");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Reveals the relevance of unique module execution paths and mining opportunities").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DatabaseCandidatesDescription extends WebWebElementNodeBase
	{

		
								public DatabaseCandidatesDescription(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DatabaseCandidatesDescription");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("System identified database-related operations and potential mining opportunities.").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryCandidatesDescription extends WebWebElementNodeBase
	{

		
								public DataDictionaryCandidatesDescription(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataDictionaryCandidatesDescription");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("System identified file I/O, database, and map-related variables and potential mining opportunities.").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoCandidates extends WebWebElementNodeBase
	{

		
								public NoCandidates(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NoCandidates");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("There are no candidates yet. You can perform automated candidate identification in Eclipse if not yet executed.").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InterfacesPage extends WebPageNodeBase
	{

		
			private Tooltip Tooltip;
	private UtilitiesDiagram UtilitiesDiagram;
	private UtilitiesHeader UtilitiesHeader;
						public InterfacesPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tooltip = new Tooltip(this, applicationModel);
		UtilitiesDiagram = new UtilitiesDiagram(this, applicationModel);
		UtilitiesHeader = new UtilitiesHeader(this, applicationModel);

			setDisplayName("InterfacesPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tooltip Tooltip() { return Tooltip; }
		public UtilitiesDiagram UtilitiesDiagram() { return UtilitiesDiagram; }
		public UtilitiesHeader UtilitiesHeader() { return UtilitiesHeader; }
		
			public class Tooltip extends WebWebElementNodeBase
	{

		
								public Tooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("IMS region controller").className("g2-tooltip-title").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilitiesDiagram extends WebWebElementNodeBase
	{

		
								public UtilitiesDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilitiesDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilitiesHeader extends WebWebElementNodeBase
	{

		
								public UtilitiesHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilitiesHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Utilities by Interface Type and Direction").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CodeQualityPage extends WebPageNodeBase
	{

		
			private PCCTooltip PCCTooltip;
	private ProgramCyclomaticComplDiagram ProgramCyclomaticComplDiagram;
	private LoCDiagram LoCDiagram;
	private LoCvsCommentsDiagram LoCvsCommentsDiagram;
	private DeadCodebyLanguageTypeDiagram DeadCodebyLanguageTypeDiagram;
	private SQLStatemtmentsComplDiagram SQLStatemtmentsComplDiagram;
	private AverageDistinctSQLTableDiagram AverageDistinctSQLTableDiagram;
	private SQLStatementsPerLengthDiagram SQLStatementsPerLengthDiagram;
	private ProgramCyclomaticComplHeader ProgramCyclomaticComplHeader;
	private LoCByCyclomaticComplHeader LoCByCyclomaticComplHeader;
	private ScreenComplHeader ScreenComplHeader;
	private ProgramLoCvsComHeader ProgramLoCvsComHeader;
	private DeadCodeByLanguageTypeHeader DeadCodeByLanguageTypeHeader;
	private SQLStatementsComplHeader SQLStatementsComplHeader;
	private AverageDistinctSQLTablesHeader AverageDistinctSQLTablesHeader;
	private SQLStatementsPerLengthHeader SQLStatementsPerLengthHeader;
	private ScreenComplDiagram ScreenComplDiagram;
	private PCCChart PCCChart;
	private JobStepCountHeader JobStepCountHeader;
	private JobStepCountDiagram JobStepCountDiagram;
	private TooltipName TooltipName;
	private TooltipValue TooltipValue;
	private TooltipTitle TooltipTitle;
	private LOCTooltip LOCTooltip;
						public CodeQualityPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PCCTooltip = new PCCTooltip(this, applicationModel);
		ProgramCyclomaticComplDiagram = new ProgramCyclomaticComplDiagram(this, applicationModel);
		LoCDiagram = new LoCDiagram(this, applicationModel);
		LoCvsCommentsDiagram = new LoCvsCommentsDiagram(this, applicationModel);
		DeadCodebyLanguageTypeDiagram = new DeadCodebyLanguageTypeDiagram(this, applicationModel);
		SQLStatemtmentsComplDiagram = new SQLStatemtmentsComplDiagram(this, applicationModel);
		AverageDistinctSQLTableDiagram = new AverageDistinctSQLTableDiagram(this, applicationModel);
		SQLStatementsPerLengthDiagram = new SQLStatementsPerLengthDiagram(this, applicationModel);
		ProgramCyclomaticComplHeader = new ProgramCyclomaticComplHeader(this, applicationModel);
		LoCByCyclomaticComplHeader = new LoCByCyclomaticComplHeader(this, applicationModel);
		ScreenComplHeader = new ScreenComplHeader(this, applicationModel);
		ProgramLoCvsComHeader = new ProgramLoCvsComHeader(this, applicationModel);
		DeadCodeByLanguageTypeHeader = new DeadCodeByLanguageTypeHeader(this, applicationModel);
		SQLStatementsComplHeader = new SQLStatementsComplHeader(this, applicationModel);
		AverageDistinctSQLTablesHeader = new AverageDistinctSQLTablesHeader(this, applicationModel);
		SQLStatementsPerLengthHeader = new SQLStatementsPerLengthHeader(this, applicationModel);
		ScreenComplDiagram = new ScreenComplDiagram(this, applicationModel);
		PCCChart = new PCCChart(this, applicationModel);
		JobStepCountHeader = new JobStepCountHeader(this, applicationModel);
		JobStepCountDiagram = new JobStepCountDiagram(this, applicationModel);
		TooltipName = new TooltipName(this, applicationModel);
		TooltipValue = new TooltipValue(this, applicationModel);
		TooltipTitle = new TooltipTitle(this, applicationModel);
		LOCTooltip = new LOCTooltip(this, applicationModel);

			setDisplayName("CodeQualityPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PCCTooltip PCCTooltip() { return PCCTooltip; }
		public ProgramCyclomaticComplDiagram ProgramCyclomaticComplDiagram() { return ProgramCyclomaticComplDiagram; }
		public LoCDiagram LoCDiagram() { return LoCDiagram; }
		public LoCvsCommentsDiagram LoCvsCommentsDiagram() { return LoCvsCommentsDiagram; }
		public DeadCodebyLanguageTypeDiagram DeadCodebyLanguageTypeDiagram() { return DeadCodebyLanguageTypeDiagram; }
		public SQLStatemtmentsComplDiagram SQLStatemtmentsComplDiagram() { return SQLStatemtmentsComplDiagram; }
		public AverageDistinctSQLTableDiagram AverageDistinctSQLTableDiagram() { return AverageDistinctSQLTableDiagram; }
		public SQLStatementsPerLengthDiagram SQLStatementsPerLengthDiagram() { return SQLStatementsPerLengthDiagram; }
		public ProgramCyclomaticComplHeader ProgramCyclomaticComplHeader() { return ProgramCyclomaticComplHeader; }
		public LoCByCyclomaticComplHeader LoCByCyclomaticComplHeader() { return LoCByCyclomaticComplHeader; }
		public ScreenComplHeader ScreenComplHeader() { return ScreenComplHeader; }
		public ProgramLoCvsComHeader ProgramLoCvsComHeader() { return ProgramLoCvsComHeader; }
		public DeadCodeByLanguageTypeHeader DeadCodeByLanguageTypeHeader() { return DeadCodeByLanguageTypeHeader; }
		public SQLStatementsComplHeader SQLStatementsComplHeader() { return SQLStatementsComplHeader; }
		public AverageDistinctSQLTablesHeader AverageDistinctSQLTablesHeader() { return AverageDistinctSQLTablesHeader; }
		public SQLStatementsPerLengthHeader SQLStatementsPerLengthHeader() { return SQLStatementsPerLengthHeader; }
		public ScreenComplDiagram ScreenComplDiagram() { return ScreenComplDiagram; }
		public PCCChart PCCChart() { return PCCChart; }
		public JobStepCountHeader JobStepCountHeader() { return JobStepCountHeader; }
		public JobStepCountDiagram JobStepCountDiagram() { return JobStepCountDiagram; }
		public TooltipName TooltipName() { return TooltipName; }
		public TooltipValue TooltipValue() { return TooltipValue; }
		public TooltipTitle TooltipTitle() { return TooltipTitle; }
		public LOCTooltip LOCTooltip() { return LOCTooltip; }
		
			public class PCCTooltip extends WebWebElementNodeBase
	{

		
								public PCCTooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PCCTooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-list").visible(true).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProgramCyclomaticComplDiagram extends WebWebElementNodeBase
	{

		
								public ProgramCyclomaticComplDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProgramCyclomaticComplDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoCDiagram extends WebWebElementNodeBase
	{

		
								public LoCDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoCDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoCvsCommentsDiagram extends WebWebElementNodeBase
	{

		
								public LoCvsCommentsDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoCvsCommentsDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeadCodebyLanguageTypeDiagram extends WebWebElementNodeBase
	{

		
								public DeadCodebyLanguageTypeDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeadCodebyLanguageTypeDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SQLStatemtmentsComplDiagram extends WebWebElementNodeBase
	{

		
								public SQLStatemtmentsComplDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SQLStatemtmentsComplDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AverageDistinctSQLTableDiagram extends WebWebElementNodeBase
	{

		
								public AverageDistinctSQLTableDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AverageDistinctSQLTableDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SQLStatementsPerLengthDiagram extends WebWebElementNodeBase
	{

		
								public SQLStatementsPerLengthDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SQLStatementsPerLengthDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProgramCyclomaticComplHeader extends WebWebElementNodeBase
	{

		
								public ProgramCyclomaticComplHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProgramCyclomaticComplHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Program Cyclomatic Complexity").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoCByCyclomaticComplHeader extends WebWebElementNodeBase
	{

		
								public LoCByCyclomaticComplHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoCByCyclomaticComplHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("LoC by Cyclomatic Complexity").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ScreenComplHeader extends WebWebElementNodeBase
	{

		
								public ScreenComplHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ScreenComplHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Screen Complexity").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProgramLoCvsComHeader extends WebWebElementNodeBase
	{

		
								public ProgramLoCvsComHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProgramLoCvsComHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Source vs. Comment Lines of Code").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeadCodeByLanguageTypeHeader extends WebWebElementNodeBase
	{

		
								public DeadCodeByLanguageTypeHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeadCodeByLanguageTypeHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Dead Code by Language Type").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SQLStatementsComplHeader extends WebWebElementNodeBase
	{

		
								public SQLStatementsComplHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SQLStatementsComplHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SQL Statements Complexity").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AverageDistinctSQLTablesHeader extends WebWebElementNodeBase
	{

		
								public AverageDistinctSQLTablesHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AverageDistinctSQLTablesHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Average Distinct SQL Tables").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SQLStatementsPerLengthHeader extends WebWebElementNodeBase
	{

		
								public SQLStatementsPerLengthHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SQLStatementsPerLengthHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("SQL Statements per Length").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ScreenComplDiagram extends WebWebElementNodeBase
	{

		
								public ScreenComplDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ScreenComplDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PCCChart extends WebWebElementNodeBase
	{

		
								public PCCChart(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PCCChart");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JobStepCountHeader extends WebWebElementNodeBase
	{

		
								public JobStepCountHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JobStepCountHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Job Step Count").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JobStepCountDiagram extends WebWebElementNodeBase
	{

		
								public JobStepCountDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JobStepCountDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipName extends WebWebElementNodeBase
	{

		
								public TooltipName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipName");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-name").visible(true).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipValue extends WebWebElementNodeBase
	{

		
								public TooltipValue(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipValue");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-value").visible(true).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipTitle extends WebWebElementNodeBase
	{

		
								public TooltipTitle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipTitle");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-title").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LOCTooltip extends WebWebElementNodeBase
	{

		
								public LOCTooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LOCTooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().visible(true).className("g2-tooltip-list").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DecompositionPage extends WebPageNodeBase
	{

		
			private TooltipName TooltipName;
	private TechnicalTaxonomiesDiagram TechnicalTaxonomiesDiagram;
	private TechnicalTaxonomiesHeader TechnicalTaxonomiesHeader;
	private TooltipValue TooltipValue;
						public DecompositionPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TooltipName = new TooltipName(this, applicationModel);
		TechnicalTaxonomiesDiagram = new TechnicalTaxonomiesDiagram(this, applicationModel);
		TechnicalTaxonomiesHeader = new TechnicalTaxonomiesHeader(this, applicationModel);
		TooltipValue = new TooltipValue(this, applicationModel);

			setDisplayName("DecompositionPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TooltipName TooltipName() { return TooltipName; }
		public TechnicalTaxonomiesDiagram TechnicalTaxonomiesDiagram() { return TechnicalTaxonomiesDiagram; }
		public TechnicalTaxonomiesHeader TechnicalTaxonomiesHeader() { return TechnicalTaxonomiesHeader; }
		public TooltipValue TooltipValue() { return TooltipValue; }
		
			public class TooltipName extends WebWebElementNodeBase
	{

		
								public TooltipName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipName");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-name").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TechnicalTaxonomiesDiagram extends WebWebElementNodeBase
	{

		
								public TechnicalTaxonomiesDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TechnicalTaxonomiesDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TechnicalTaxonomiesHeader extends WebWebElementNodeBase
	{

		
								public TechnicalTaxonomiesHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TechnicalTaxonomiesHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Technical Taxonomies").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipValue extends WebWebElementNodeBase
	{

		
								public TooltipValue(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipValue");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-value").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SQLPage extends WebPageNodeBase
	{

		
			private Tooltip Tooltip;
	private AllSQLStatementsDiagram AllSQLStatementsDiagram;
	private AllSQLStatementsHeader AllSQLStatementsHeader;
	private DMLSQLStatementsDiagram DMLSQLStatementsDiagram;
	private DMLSQLStatementsHeader DMLSQLStatementsHeader;
	private OTHERSQLStatementsHeader OTHERSQLStatementsHeader;
	private OTHERSQLStatementsDiagram OTHERSQLStatementsDiagram;
						public SQLPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tooltip = new Tooltip(this, applicationModel);
		AllSQLStatementsDiagram = new AllSQLStatementsDiagram(this, applicationModel);
		AllSQLStatementsHeader = new AllSQLStatementsHeader(this, applicationModel);
		DMLSQLStatementsDiagram = new DMLSQLStatementsDiagram(this, applicationModel);
		DMLSQLStatementsHeader = new DMLSQLStatementsHeader(this, applicationModel);
		OTHERSQLStatementsHeader = new OTHERSQLStatementsHeader(this, applicationModel);
		OTHERSQLStatementsDiagram = new OTHERSQLStatementsDiagram(this, applicationModel);

			setDisplayName("SQLPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tooltip Tooltip() { return Tooltip; }
		public AllSQLStatementsDiagram AllSQLStatementsDiagram() { return AllSQLStatementsDiagram; }
		public AllSQLStatementsHeader AllSQLStatementsHeader() { return AllSQLStatementsHeader; }
		public DMLSQLStatementsDiagram DMLSQLStatementsDiagram() { return DMLSQLStatementsDiagram; }
		public DMLSQLStatementsHeader DMLSQLStatementsHeader() { return DMLSQLStatementsHeader; }
		public OTHERSQLStatementsHeader OTHERSQLStatementsHeader() { return OTHERSQLStatementsHeader; }
		public OTHERSQLStatementsDiagram OTHERSQLStatementsDiagram() { return OTHERSQLStatementsDiagram; }
		
			public class Tooltip extends WebWebElementNodeBase
	{

		
								public Tooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("OTHER|QUERY|DML|ERROR")).className("g2-tooltip-name").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AllSQLStatementsDiagram extends WebWebElementNodeBase
	{

		
								public AllSQLStatementsDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AllSQLStatementsDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AllSQLStatementsHeader extends WebWebElementNodeBase
	{

		
								public AllSQLStatementsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AllSQLStatementsHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("ALL SQL STATEMENTS").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DMLSQLStatementsDiagram extends WebWebElementNodeBase
	{

		
								public DMLSQLStatementsDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DMLSQLStatementsDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DMLSQLStatementsHeader extends WebWebElementNodeBase
	{

		
								public DMLSQLStatementsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DMLSQLStatementsHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("DML SQL STATEMENTS").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OTHERSQLStatementsHeader extends WebWebElementNodeBase
	{

		
								public OTHERSQLStatementsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OTHERSQLStatementsHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("OTHER SQL STATEMENTS").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OTHERSQLStatementsDiagram extends WebWebElementNodeBase
	{

		
								public OTHERSQLStatementsDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OTHERSQLStatementsDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class UtilitiesPage extends WebPageNodeBase
	{

		
			private Tooltip Tooltip;
	private UtilityInvocationsDiagram UtilityInvocationsDiagram;
	private UtilityInvocationsHeader UtilityInvocationsHeader;
	private UtilitiesByCategoryDiagram UtilitiesByCategoryDiagram;
	private UtilitiesByCategoryHeader UtilitiesByCategoryHeader;
	private UtilitiesHeader UtilitiesHeader;
						public UtilitiesPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tooltip = new Tooltip(this, applicationModel);
		UtilityInvocationsDiagram = new UtilityInvocationsDiagram(this, applicationModel);
		UtilityInvocationsHeader = new UtilityInvocationsHeader(this, applicationModel);
		UtilitiesByCategoryDiagram = new UtilitiesByCategoryDiagram(this, applicationModel);
		UtilitiesByCategoryHeader = new UtilitiesByCategoryHeader(this, applicationModel);
		UtilitiesHeader = new UtilitiesHeader(this, applicationModel);

			setDisplayName("UtilitiesPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tooltip Tooltip() { return Tooltip; }
		public UtilityInvocationsDiagram UtilityInvocationsDiagram() { return UtilityInvocationsDiagram; }
		public UtilityInvocationsHeader UtilityInvocationsHeader() { return UtilityInvocationsHeader; }
		public UtilitiesByCategoryDiagram UtilitiesByCategoryDiagram() { return UtilitiesByCategoryDiagram; }
		public UtilitiesByCategoryHeader UtilitiesByCategoryHeader() { return UtilitiesByCategoryHeader; }
		public UtilitiesHeader UtilitiesHeader() { return UtilitiesHeader; }
		
			public class Tooltip extends WebWebElementNodeBase
	{

		
								public Tooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("File Manipulation")).className("g2-tooltip-title").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilityInvocationsDiagram extends WebWebElementNodeBase
	{

		
								public UtilityInvocationsDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilityInvocationsDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilityInvocationsHeader extends WebWebElementNodeBase
	{

		
								public UtilityInvocationsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilityInvocationsHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Utility Invocations").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilitiesByCategoryDiagram extends WebWebElementNodeBase
	{

		
								public UtilitiesByCategoryDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilitiesByCategoryDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilitiesByCategoryHeader extends WebWebElementNodeBase
	{

		
								public UtilitiesByCategoryHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UtilitiesByCategoryHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Utilities By Category").tagName("DIV").className("ant-card-head-title ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilitiesHeader extends WebWebElementNodeBase
	{

		
								public UtilitiesHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Utilities");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Utilities").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class MetricsMenuExpanded extends WebWebElementNodeBase
	{

		
								public MetricsMenuExpanded(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MetricsMenuExpanded");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("LI").className("ant-menu-submenu ant-menu-submenu-inline ng-star-inserted ant-menu-submenu-open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GraphBackButton extends WebButtonNodeBase
	{

		
								public GraphBackButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GraphBackButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("").buttonType("submit").role("").accessibilityName("").tagName("BUTTON").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StartRuleCandidatesJobInEclipse extends WebWebElementNodeBase
	{

		
								public StartRuleCandidatesJobInEclipse(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StartRuleCandidatesJobInEclipse");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("There are no candidates yet. You can perform automated candidate identification in Eclipse if not yet executed.").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StartDecompositionJobInEclipse extends WebWebElementNodeBase
	{

		
								public StartDecompositionJobInEclipse(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StartDecompositionJobInEclipse");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Application decomposition cannot be shown due to missing technical taxonomies. You can perform automated technical taxonomy identification in Eclipse if not yet executed.").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DemoClient1 extends WebWebElementNodeBase
	{

		
								public DemoClient1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DemoClient1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Client 1").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteProjectConfirmationCheckBox extends WebCheckBoxNodeBase
	{

		
								public DeleteProjectConfirmationCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteProjectConfirmationCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.web.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.CheckBoxDescription.Builder().name("").tagName("INPUT").type("checkbox").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteProjectButton extends WebButtonNodeBase
	{

		
								public DeleteProjectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteProject");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Delete").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DiscoveryExpertExcelImportProject1 extends WebWebElementNodeBase
	{

		
								public DiscoveryExpertExcelImportProject1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DiscoveryExpertExcelImportProject1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("default-card-cover").innerText("ImportDiscoveryExpertExcelTest1").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DiscoveryExpertExcelImportProject2 extends WebWebElementNodeBase
	{

		
								public DiscoveryExpertExcelImportProject2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DiscoveryExpertExcelImportProject2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("default-card-cover").innerText("ImportDiscoveryExpertExcelTest2").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CallChainPage extends WebPageNodeBase
	{

		
			private EXECPGM EXECPGM;
	private CallChainTab CallChainTab;
	private CancelCSVButton CancelCSVButton;
	private ModuleByNameSelector ModuleByNameSelector;
	private ModuleByTypeSelector ModuleByTypeSelector;
	private InboundDropDown InboundDropDown;
	private ExecPgmClose ExecPgmClose;
	private Depth4link Depth4link;
	private Depth2 Depth2;
	private DepthEdit DepthEdit;
	private ResetButton ResetButton;
	private CSVButton CSVButton;
	private EndLabel EndLabel;
	private ByTypeLink ByTypeLink;
	private endLabel2 endLabel2;
	private JCLExecPGMByTypeSelector JCLExecPGMByTypeSelector;
	private NoDataWebElement NoDataWebElement;
	private P446681Page P446681Page;
	private DirectionDropDown DirectionDropDown;
	private StartModule StartModule;
	private InAndOutboundDropDown InAndOutboundDropDown;
	private OutboundDropDown OutboundDropDown;
	private DropDownOverlay DropDownOverlay;
	private Depth1 Depth1;
	private COBOLBMSMap COBOLBMSMap;
	private COBOLBMSMapset COBOLBMSMapset;
	private HideFromCallChain HideFromCallChain;
						public CallChainPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EXECPGM = new EXECPGM(this, applicationModel);
		CallChainTab = new CallChainTab(this, applicationModel);
		CancelCSVButton = new CancelCSVButton(this, applicationModel);
		ModuleByNameSelector = new ModuleByNameSelector(this, applicationModel);
		ModuleByTypeSelector = new ModuleByTypeSelector(this, applicationModel);
		InboundDropDown = new InboundDropDown(this, applicationModel);
		ExecPgmClose = new ExecPgmClose(this, applicationModel);
		Depth4link = new Depth4link(this, applicationModel);
		Depth2 = new Depth2(this, applicationModel);
		DepthEdit = new DepthEdit(this, applicationModel);
		ResetButton = new ResetButton(this, applicationModel);
		CSVButton = new CSVButton(this, applicationModel);
		EndLabel = new EndLabel(this, applicationModel);
		ByTypeLink = new ByTypeLink(this, applicationModel);
		endLabel2 = new endLabel2(this, applicationModel);
		JCLExecPGMByTypeSelector = new JCLExecPGMByTypeSelector(this, applicationModel);
		NoDataWebElement = new NoDataWebElement(this, applicationModel);
		P446681Page = new P446681Page(this, applicationModel);
		DirectionDropDown = new DirectionDropDown(this, applicationModel);
		StartModule = new StartModule(this, applicationModel);
		InAndOutboundDropDown = new InAndOutboundDropDown(this, applicationModel);
		OutboundDropDown = new OutboundDropDown(this, applicationModel);
		DropDownOverlay = new DropDownOverlay(this, applicationModel);
		Depth1 = new Depth1(this, applicationModel);
		COBOLBMSMap = new COBOLBMSMap(this, applicationModel);
		COBOLBMSMapset = new COBOLBMSMapset(this, applicationModel);
		HideFromCallChain = new HideFromCallChain(this, applicationModel);

			setDisplayName("CallChainPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EXECPGM EXECPGM() { return EXECPGM; }
		public CallChainTab CallChainTab() { return CallChainTab; }
		public CancelCSVButton CancelCSVButton() { return CancelCSVButton; }
		public ModuleByNameSelector ModuleByNameSelector() { return ModuleByNameSelector; }
		public ModuleByTypeSelector ModuleByTypeSelector() { return ModuleByTypeSelector; }
		public InboundDropDown InboundDropDown() { return InboundDropDown; }
		public ExecPgmClose ExecPgmClose() { return ExecPgmClose; }
		public Depth4link Depth4link() { return Depth4link; }
		public Depth2 Depth2() { return Depth2; }
		public DepthEdit DepthEdit() { return DepthEdit; }
		public ResetButton ResetButton() { return ResetButton; }
		public CSVButton CSVButton() { return CSVButton; }
		public EndLabel EndLabel() { return EndLabel; }
		public ByTypeLink ByTypeLink() { return ByTypeLink; }
		public endLabel2 endLabel2() { return endLabel2; }
		public JCLExecPGMByTypeSelector JCLExecPGMByTypeSelector() { return JCLExecPGMByTypeSelector; }
		public NoDataWebElement NoDataWebElement() { return NoDataWebElement; }
		public P446681Page P446681Page() { return P446681Page; }
		public DirectionDropDown DirectionDropDown() { return DirectionDropDown; }
		public StartModule StartModule() { return StartModule; }
		public InAndOutboundDropDown InAndOutboundDropDown() { return InAndOutboundDropDown; }
		public OutboundDropDown OutboundDropDown() { return OutboundDropDown; }
		public DropDownOverlay DropDownOverlay() { return DropDownOverlay; }
		public Depth1 Depth1() { return Depth1; }
		public COBOLBMSMap COBOLBMSMap() { return COBOLBMSMap; }
		public COBOLBMSMapset COBOLBMSMapset() { return COBOLBMSMapset; }
		public HideFromCallChain HideFromCallChain() { return HideFromCallChain; }
		
			public class EXECPGM extends WebWebElementNodeBase
	{

		
								public EXECPGM(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EXEC_PGM");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("JCL Exec PGM").tagName("DIV").className("ant-select-item-option-content").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CallChainTab extends WebWebElementNodeBase
	{

		
								public CallChainTab(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CallChainTab");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().role("tab").tagName("div").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelCSVButton extends WebButtonNodeBase
	{

		
								public CancelCSVButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelCSVButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name("Cancel").buttonType("button").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleByNameSelector extends WebWebElementNodeBase
	{

		
								public ModuleByNameSelector(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleByNameSelector");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("[object Text] Start with at least two characters ").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleByTypeSelector extends WebEditFieldNodeBase
	{

		
								public ModuleByTypeSelector(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleByTypeSelector");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").className(new RegExpProperty(".*ant-select-selection-search-input.*")).index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InboundDropDown extends WebWebElementNodeBase
	{

		
								public InboundDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InboundDropDown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-OPTION-ITEM").innerText(new RegExpProperty(".*Inbound.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExecPgmClose extends WebWebElementNodeBase
	{

		
								public ExecPgmClose(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExecPgmClose");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").innerText("").tagName("path").index(28).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Depth4link extends WebWebElementNodeBase
	{

		
								public Depth4link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Depth4");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("4").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Depth2 extends WebWebElementNodeBase
	{

		
								public Depth2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Depth2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("2").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DepthEdit extends WebWebElementNodeBase
	{

		
								public DepthEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DepthEdit");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT").attribute("formcontrolname", "depth").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResetButton extends WebButtonNodeBase
	{

		
								public ResetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResetButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("button").name("Reset").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CSVButton extends WebButtonNodeBase
	{

		
								public CSVButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CSVButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("CSV").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EndLabel extends WebWebElementNodeBase
	{

		
			private ClearModule ClearModule;
						public EndLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ClearModule = new ClearModule(this, applicationModel);

			setDisplayName("EndLabel");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT").attribute("formcontrolname", "endModule").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ClearModule ClearModule() { return ClearModule; }
		
			public class ClearModule extends WebWebElementNodeBase
	{

		
								public ClearModule(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClearModule");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className(new RegExpProperty(".*anticon-close.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ByTypeLink extends WebWebElementNodeBase
	{

		
								public ByTypeLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BytypeLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("By type").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class endLabel2 extends WebWebElementNodeBase
	{

		
								public endLabel2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("endLabel2");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("EXEC_PGM[object Text]").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JCLExecPGMByTypeSelector extends WebWebElementNodeBase
	{

		
								public JCLExecPGMByTypeSelector(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JCLExecPGMByTypeSelector");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("JCL Exec PGM[object Text]").tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NoDataWebElement extends WebWebElementNodeBase
	{

		
								public NoDataWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("No Data ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().accessibilityName("").className("ant-select-item-empty ng-star-inserted").innerText("No Data ").tagName("DIV").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class P446681Page extends WebPageNodeBase
	{

		
			private P446676 P446676;
	private NaturalGDA NaturalGDA;
						public P446681Page(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					P446676 = new P446676(this, applicationModel);
		NaturalGDA = new NaturalGDA(this, applicationModel);

			setDisplayName("P446681 - Call Chain - Module Details - TxDMVTest");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public P446676 P446676() { return P446676; }
		public NaturalGDA NaturalGDA() { return NaturalGDA; }
		
			public class P446676 extends WebWebElementNodeBase
	{

		
								public P446676(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("P446676");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("P446676").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalGDA extends WebWebElementNodeBase
	{

		
								public NaturalGDA(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Natural GDA");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Natural GDA").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DirectionDropDown extends WebWebElementNodeBase
	{

		
								public DirectionDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DirectionDropDown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().attribute("formcontrolname", "direction").tagName("NZ-SELECT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StartModule extends WebWebElementNodeBase
	{

		
			private ClearModule ClearModule;
						public StartModule(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ClearModule = new ClearModule(this, applicationModel);

			setDisplayName("StartModule");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT").attribute("formcontrolname", "startModule").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ClearModule ClearModule() { return ClearModule; }
		
			public class ClearModule extends WebWebElementNodeBase
	{

		
								public ClearModule(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClearModule");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className(new RegExpProperty(".*anticon-close.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InAndOutboundDropDown extends WebWebElementNodeBase
	{

		
								public InAndOutboundDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InAndOutboundDropDown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-OPTION-ITEM").innerText(new RegExpProperty(".*In- & outbound*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OutboundDropDown extends WebWebElementNodeBase
	{

		
								public OutboundDropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OutboundDropDown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-OPTION-ITEM").innerText(new RegExpProperty("Outbound*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DropDownOverlay extends WebWebElementNodeBase
	{

		
			private ByNameRadioButton ByNameRadioButton;
	private ModuleFilterTextField ModuleFilterTextField;
	private AllModulesRadioButton AllModulesRadioButton;
	private ByTypeRadioButton ByTypeRadioButton;
	private ClearModule ClearModule;
						public DropDownOverlay(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ByNameRadioButton = new ByNameRadioButton(this, applicationModel);
		ModuleFilterTextField = new ModuleFilterTextField(this, applicationModel);
		AllModulesRadioButton = new AllModulesRadioButton(this, applicationModel);
		ByTypeRadioButton = new ByTypeRadioButton(this, applicationModel);
		ClearModule = new ClearModule(this, applicationModel);

			setDisplayName("DropDownOverlay");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className(new RegExpProperty("call-chain__module-select-dropdown.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ByNameRadioButton ByNameRadioButton() { return ByNameRadioButton; }
		public ModuleFilterTextField ModuleFilterTextField() { return ModuleFilterTextField; }
		public AllModulesRadioButton AllModulesRadioButton() { return AllModulesRadioButton; }
		public ByTypeRadioButton ByTypeRadioButton() { return ByTypeRadioButton; }
		public ClearModule ClearModule() { return ClearModule; }
		
			public class ByNameRadioButton extends WebWebElementNodeBase
	{

		
								public ByNameRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ByNameRadioButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("By name").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleFilterTextField extends WebEditFieldNodeBase
	{

		
								public ModuleFilterTextField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleFilterTextField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().tagName("INPUT").className("ant-select-selection-search-input ng-untouched ng-pristine").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AllModulesRadioButton extends WebWebElementNodeBase
	{

		
								public AllModulesRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AllModulesRadioButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("All Modules").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ByTypeRadioButton extends WebWebElementNodeBase
	{

		
								public ByTypeRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ByTypeRadioButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("By type").tagName("LABEL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClearModule extends WebWebElementNodeBase
	{

		
								public ClearModule(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClearModule");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className(new RegExpProperty(".*anticon-close.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Depth1 extends WebWebElementNodeBase
	{

		
								public Depth1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Depth1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("1").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class COBOLBMSMap extends WebWebElementNodeBase
	{

		
								public COBOLBMSMap(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("COBOLBMSMap");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COBOL BMS Map").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class COBOLBMSMapset extends WebWebElementNodeBase
	{

		
								public COBOLBMSMapset(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("COBOLBMSMapset");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("COBOL BMS Mapset").tagName("NZ-OPTION-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HideFromCallChain extends WebWebElementNodeBase
	{

		
			private DropDown DropDown;
						public HideFromCallChain(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DropDown = new DropDown(this, applicationModel);

			setDisplayName("HideFromCallChain");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty(".*Hide from call chain.*")).tagName("NZ-FORM-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DropDown DropDown() { return DropDown; }
		
			public class DropDown extends WebWebElementNodeBase
	{

		
								public DropDown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DropDown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-TOP-CONTROL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class ExportAllAssignmentsButton extends WebButtonNodeBase
	{

		
								public ExportAllAssignmentsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportAllAssignments");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name(" Export All Assignments ").buttonType("submit").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DemoClient1DemoProjectAWebElement1 extends WebWebElementNodeBase
	{

		
								public DemoClient1DemoProjectAWebElement1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("[Demo Client 1] Demo Project A1");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("[Demo Client 1] Demo Project A").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectProjectBreadCrumb extends WebWebElementNodeBase
	{

		
								public SelectProjectBreadCrumb(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectProjectBreadCrumb");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Select Project").tagName("SPAN").className("ant-breadcrumb-link ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DemoClient1BreadCrumb extends WebWebElementNodeBase
	{

		
								public DemoClient1BreadCrumb(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DemoClient1BreadCrumb");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Demo Client 1").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class P446681Link extends WebLinkNodeBase
	{

		
								public P446681Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("P446681 ");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().accessibilityName("").innerText("P446681 ").role("").tagName("A").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdown extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TREE-SELECT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdownText extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdownText(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdownText");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DBAccessReadEntry extends WebWebElementNodeBase
	{

		
								public DBAccessReadEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DBAccessReadEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("Read").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdownDBAccessRead extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdownDBAccessRead(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdownDBAccessRead");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TREE-NODE-TITLE").innerText("Read").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterClearButton extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterClearButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterClearButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-CLEAR").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProgramTypeUIEntry extends WebWebElementNodeBase
	{

		
								public ProgramTypeUIEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProgramTypeUIEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("UI").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdownProgramTypeUI extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdownProgramTypeUI(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdownProgramTypeUI");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TREE-NODE-TITLE").innerText("UI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdownDBAccessReadSelected extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdownDBAccessReadSelected(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdownDBAccessReadSelected");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("div").innerText("Technical Taxonomies: DB Access").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdownProgramTypeUISelected extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdownProgramTypeUISelected(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdownProgramTypeUISelected");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-ITEM").innerText("Program Type: UI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExportFormatsJSON extends WebWebElementNodeBase
	{

		
								public ExportFormatsJSON(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportFormatsJSON");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("PRE").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenButton extends WebWebElementNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OpenButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Open").tagName("A").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CAELineNumber11 extends WebWebElementNodeBase
	{

		
								public CAELineNumber11(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CAELineNumber11");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("11").tagName("div").className("line-numbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IMSMenuEntry extends WebWebElementNodeBase
	{

		
								public IMSMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IMSMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("IMS").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CAELineNumber12 extends WebWebElementNodeBase
	{

		
								public CAELineNumber12(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CAELineNumber12");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("12").tagName("div").className("line-numbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CAELineNumber13 extends WebWebElementNodeBase
	{

		
								public CAELineNumber13(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CAELineNumber13");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("13").tagName("div").className("line-numbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CAELineNumber14 extends WebWebElementNodeBase
	{

		
								public CAELineNumber14(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CAELineNumber14");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("14").tagName("div").className("line-numbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HoveredElement extends WebWebElementNodeBase
	{

		
								public HoveredElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HoveredElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty("ant-tooltip-inner ng-tns-c.*")).innerText("4 modules were modified by the last scan. Please review their meta data (annotations, data dictionary, module description, taxonomies).").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HoveredElementNew extends WebWebElementNodeBase
	{

		
								public HoveredElementNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HoveredElementNew");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty("ant-tooltip-inner ng-tns-c.*")).innerText("3 modules were modified by the last scan. Please review their meta data (annotations, data dictionary, module description, taxonomies).").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResultsNum extends WebWebElementNodeBase
	{

		
								public ResultsNum(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResultsNum");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-col ng-star-inserted").innerHTML(new RegExpProperty(" Results: [0-9]+")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditAnnotationEclipseButton extends WebButtonNodeBase
	{

		
								public EditAnnotationEclipseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditAnnotationEclipseButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("button").name("    Eclipse Icon/Online                                                                                                                                                                                                                                                                                                                                                                                                                        ").role("").tagName("BUTTON").className("eclipse-btn").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditAnnotationCancelButton extends WebButtonNodeBase
	{

		
								public EditAnnotationCancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditAnnotationCancelButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DNAMenuEntry extends WebWebElementNodeBase
	{

		
								public DNAMenuEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DNAMenuEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("DNA").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DNAPage extends WebPageNodeBase
	{

		
			private NoDNADataFound NoDNADataFound;
	private InfoContainer InfoContainer;
	private CobolMethodsHeader CobolMethodsHeader;
	private TooltipValue TooltipValue;
	private TooltipName TooltipName;
	private InfoIcon InfoIcon;
	private CobolSkeletonHeader CobolSkeletonHeader;
	private PL1SkeletonHeader PL1SkeletonHeader;
	private PL1MethodsHeader PL1MethodsHeader;
	private CobolMethodsDiagram CobolMethodsDiagram;
	private PL1MethodsDiagram PL1MethodsDiagram;
	private PL1SkeletonDiagram PL1SkeletonDiagram;
	private CobolSkeletonDiagram CobolSkeletonDiagram;
						public DNAPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NoDNADataFound = new NoDNADataFound(this, applicationModel);
		InfoContainer = new InfoContainer(this, applicationModel);
		CobolMethodsHeader = new CobolMethodsHeader(this, applicationModel);
		TooltipValue = new TooltipValue(this, applicationModel);
		TooltipName = new TooltipName(this, applicationModel);
		InfoIcon = new InfoIcon(this, applicationModel);
		CobolSkeletonHeader = new CobolSkeletonHeader(this, applicationModel);
		PL1SkeletonHeader = new PL1SkeletonHeader(this, applicationModel);
		PL1MethodsHeader = new PL1MethodsHeader(this, applicationModel);
		CobolMethodsDiagram = new CobolMethodsDiagram(this, applicationModel);
		PL1MethodsDiagram = new PL1MethodsDiagram(this, applicationModel);
		PL1SkeletonDiagram = new PL1SkeletonDiagram(this, applicationModel);
		CobolSkeletonDiagram = new CobolSkeletonDiagram(this, applicationModel);

			setDisplayName("DNAPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NoDNADataFound NoDNADataFound() { return NoDNADataFound; }
		public InfoContainer InfoContainer() { return InfoContainer; }
		public CobolMethodsHeader CobolMethodsHeader() { return CobolMethodsHeader; }
		public TooltipValue TooltipValue() { return TooltipValue; }
		public TooltipName TooltipName() { return TooltipName; }
		public InfoIcon InfoIcon() { return InfoIcon; }
		public CobolSkeletonHeader CobolSkeletonHeader() { return CobolSkeletonHeader; }
		public PL1SkeletonHeader PL1SkeletonHeader() { return PL1SkeletonHeader; }
		public PL1MethodsHeader PL1MethodsHeader() { return PL1MethodsHeader; }
		public CobolMethodsDiagram CobolMethodsDiagram() { return CobolMethodsDiagram; }
		public PL1MethodsDiagram PL1MethodsDiagram() { return PL1MethodsDiagram; }
		public PL1SkeletonDiagram PL1SkeletonDiagram() { return PL1SkeletonDiagram; }
		public CobolSkeletonDiagram CobolSkeletonDiagram() { return CobolSkeletonDiagram; }
		
			public class NoDNADataFound extends WebWebElementNodeBase
	{

		
								public NoDNADataFound(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NoDNADataFound");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-EMPTY").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InfoContainer extends WebWebElementNodeBase
	{

		
								public InfoContainer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InfoContainer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className("cdk-overlay-container").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolMethodsHeader extends WebWebElementNodeBase
	{

		
								public CobolMethodsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolMethodsHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("COBOL Methods").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipValue extends WebWebElementNodeBase
	{

		
								public TooltipValue(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipValue");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-value").visible(true).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipName extends WebWebElementNodeBase
	{

		
								public TooltipName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipName");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-name").visible(true).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InfoIcon extends WebWebElementNodeBase
	{

		
								public InfoIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InfoIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("").className("ant-space-item ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolSkeletonHeader extends WebWebElementNodeBase
	{

		
								public CobolSkeletonHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolSkeletonHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("COBOL Skeleton").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PL1SkeletonHeader extends WebWebElementNodeBase
	{

		
								public PL1SkeletonHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PL1SkeletonHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("PL/1 Skeleton").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PL1MethodsHeader extends WebWebElementNodeBase
	{

		
								public PL1MethodsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PL1MethodsHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").innerText("PL/1 Methods").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolMethodsDiagram extends WebWebElementNodeBase
	{

		
								public CobolMethodsDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolMethodsDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PL1MethodsDiagram extends WebWebElementNodeBase
	{

		
								public PL1MethodsDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PL1MethodsDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PL1SkeletonDiagram extends WebWebElementNodeBase
	{

		
								public PL1SkeletonDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PL1SkeletonDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolSkeletonDiagram extends WebWebElementNodeBase
	{

		
								public CobolSkeletonDiagram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolSkeletonDiagram");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("CANVAS").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Alert extends WebWebElementNodeBase
	{

		
								public Alert(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Alert");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("3 modules were modified by the last code scan. Please review their meta data (annotations, data dictionary, module description, taxonomies).").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteWarning extends WebButtonNodeBase
	{

		
								public DeleteWarning(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteWarning");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name(" Delete Warning ").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WarningDialog extends WebWebElementNodeBase
	{

		
								public WarningDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WarningDialog");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty("ant-popover-inner-content ng-tns-c.*")).innerText("You will delete 3 warnings for every member of the project.CancelDelete All").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteAll extends WebButtonNodeBase
	{

		
								public DeleteAll(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DeleteAll");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Delete All").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Badge extends WebWebElementNodeBase
	{

		
								public Badge(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Badge");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("anticon ant-helper__warning-icon project-shell__warning-badge anticon-exclamation-circle ng-star-inserted").tagName("i").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoadingCancelButton extends WebButtonNodeBase
	{

		
								public LoadingCancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Cancel").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdownDBSwitcher extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdownDBSwitcher(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdownDBSwitcher");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TREE-NODE-SWITCHER").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyFilterDropdownPTSwitcher extends WebWebElementNodeBase
	{

		
								public TaxonomyFilterDropdownPTSwitcher(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyFilterDropdownPTSwitcher");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-TREE-NODE-SWITCHER").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SupportLink extends WebLinkNodeBase
	{

		
								public SupportLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Support");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Support").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Mining extends WebWebElementNodeBase
	{

		
								public Mining(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Mining");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("backgroung-overlay").innerText("").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProgressToast extends WebWebElementNodeBase
	{

		
								public ProgressToast(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProgressToast");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className(new RegExpProperty(".*ant-message-loading.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IMSPage extends WebPageNodeBase
	{

		
			private UpdateCallsResult UpdateCallsResult;
	private ReadResults ReadResults;
	private TooltipValue TooltipValue;
	private AllIMSCalls AllIMSCalls;
	private StoreCallsResult StoreCallsResult;
	private UnknownCallsResult UnknownCallsResult;
						public IMSPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					UpdateCallsResult = new UpdateCallsResult(this, applicationModel);
		ReadResults = new ReadResults(this, applicationModel);
		TooltipValue = new TooltipValue(this, applicationModel);
		AllIMSCalls = new AllIMSCalls(this, applicationModel);
		StoreCallsResult = new StoreCallsResult(this, applicationModel);
		UnknownCallsResult = new UnknownCallsResult(this, applicationModel);

			setDisplayName("IMSPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public UpdateCallsResult UpdateCallsResult() { return UpdateCallsResult; }
		public ReadResults ReadResults() { return ReadResults; }
		public TooltipValue TooltipValue() { return TooltipValue; }
		public AllIMSCalls AllIMSCalls() { return AllIMSCalls; }
		public StoreCallsResult StoreCallsResult() { return StoreCallsResult; }
		public UnknownCallsResult UnknownCallsResult() { return UnknownCallsResult; }
		
			public class UpdateCallsResult extends WebWebElementNodeBase
	{

		
								public UpdateCallsResult(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UpdateCallsResult");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Results: 8 ").tagName("NZ-COL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReadResults extends WebWebElementNodeBase
	{

		
								public ReadResults(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReadResults");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Results: 24 ").tagName("NZ-COL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipValue extends WebWebElementNodeBase
	{

		
								public TooltipValue(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipValue");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-value").visible(true).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AllIMSCalls extends WebWebElementNodeBase
	{

		
								public AllIMSCalls(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AllIMSCalls");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Results: 36 ").tagName("NZ-COL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StoreCallsResult extends WebWebElementNodeBase
	{

		
								public StoreCallsResult(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StoreCallsResult");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Results: 1 ").tagName("NZ-COL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UnknownCallsResult extends WebWebElementNodeBase
	{

		
								public UnknownCallsResult(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UnknownCallsResult");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Results: 3 ").tagName("NZ-COL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Openmoduledetails extends WebWebElementNodeBase
	{

		
								public Openmoduledetails(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("openmoduledetails");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().attribute("for", "open-module-details").tagName("LABEL").className("contextual-toolbar__label").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AllIMSCalls extends WebWebElementNodeBase
	{

		
								public AllIMSCalls(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("All IMS Calls");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("All IMS Calls").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RedAnnotationColorProperty extends WebWebElementNodeBase
	{

		
								public RedAnnotationColorProperty(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RedAnnotationColorProperty");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("red").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Rule1AnnotationRuleProperty extends WebWebElementNodeBase
	{

		
								public Rule1AnnotationRuleProperty(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Rule1AnnotationRuleProperty");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Rule1").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Rule1PropertyDropdown extends WebWebElementNodeBase
	{

		
								public Rule1PropertyDropdown(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Rule1PropertyDropdown");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-select-item-option-content").innerText("Rule1").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RedPropertyDropdownElement extends WebWebElementNodeBase
	{

		
								public RedPropertyDropdownElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RedPropertyDropdownElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-select-item-option-content").innerText("red").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TooltipList extends WebWebElementNodeBase
	{

		
								public TooltipList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TooltipList");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("g2-tooltip-list").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChartBackButton extends WebWebElementNodeBase
	{

		
								public ChartBackButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("chartBackButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("i").className("anticon anticon-arrow-left ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfigurationLink extends WebWebElementNodeBase
	{

		
								public ConfigurationLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConfigurationLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Configuration").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfigurationPage extends WebPageNodeBase
	{

		
			private TaxonomiesTab TaxonomiesTab;
	private AnnotationsTab AnnotationsTab;
	private ImportAssignmentsButton ImportAssignmentsButton;
	private ExportAssignmentsButton ExportAssignmentsButton;
	private HelpTooltip HelpTooltip;
	private ConfigurationTable ConfigurationTable;
	private DownloadTemplate DownloadTemplate;
	private StartImportButton StartImportButton;
	private WarningMessage WarningMessage;
	private CancelButton CancelButton;
	private ImportAssignmentsTitle ImportAssignmentsTitle;
	private learnHowLink learnHowLink;
	private QuestionMarkIcon QuestionMarkIcon;
	private ModuleNameEditField ModuleNameEditField;
	private SearchButton SearchButton;
	private MagnifierButton MagnifierButton;
	private ResetButton ResetButton;
	private AssignedModulesInfo AssignedModulesInfo;
	private InfoContainer InfoContainer;
	private TaxonomyPropagation TaxonomyPropagation;
	private IncomingReferences IncomingReferences;
	private Outgoingreferences Outgoingreferences;
	private SelectTaxonomyField SelectTaxonomyField;
	private SelectTaxonomy SelectTaxonomy;
	private StartPropagation StartPropagation;
	private ActiveTab ActiveTab;
	private SelectFile SelectFile;
						public ConfigurationPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TaxonomiesTab = new TaxonomiesTab(this, applicationModel);
		AnnotationsTab = new AnnotationsTab(this, applicationModel);
		ImportAssignmentsButton = new ImportAssignmentsButton(this, applicationModel);
		ExportAssignmentsButton = new ExportAssignmentsButton(this, applicationModel);
		HelpTooltip = new HelpTooltip(this, applicationModel);
		ConfigurationTable = new ConfigurationTable(this, applicationModel);
		DownloadTemplate = new DownloadTemplate(this, applicationModel);
		StartImportButton = new StartImportButton(this, applicationModel);
		WarningMessage = new WarningMessage(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		ImportAssignmentsTitle = new ImportAssignmentsTitle(this, applicationModel);
		learnHowLink = new learnHowLink(this, applicationModel);
		QuestionMarkIcon = new QuestionMarkIcon(this, applicationModel);
		ModuleNameEditField = new ModuleNameEditField(this, applicationModel);
		SearchButton = new SearchButton(this, applicationModel);
		MagnifierButton = new MagnifierButton(this, applicationModel);
		ResetButton = new ResetButton(this, applicationModel);
		AssignedModulesInfo = new AssignedModulesInfo(this, applicationModel);
		InfoContainer = new InfoContainer(this, applicationModel);
		TaxonomyPropagation = new TaxonomyPropagation(this, applicationModel);
		IncomingReferences = new IncomingReferences(this, applicationModel);
		Outgoingreferences = new Outgoingreferences(this, applicationModel);
		SelectTaxonomyField = new SelectTaxonomyField(this, applicationModel);
		SelectTaxonomy = new SelectTaxonomy(this, applicationModel);
		StartPropagation = new StartPropagation(this, applicationModel);
		ActiveTab = new ActiveTab(this, applicationModel);
		SelectFile = new SelectFile(this, applicationModel);

			setDisplayName("ConfigurationPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TaxonomiesTab TaxonomiesTab() { return TaxonomiesTab; }
		public AnnotationsTab AnnotationsTab() { return AnnotationsTab; }
		public ImportAssignmentsButton ImportAssignmentsButton() { return ImportAssignmentsButton; }
		public ExportAssignmentsButton ExportAssignmentsButton() { return ExportAssignmentsButton; }
		public HelpTooltip HelpTooltip() { return HelpTooltip; }
		public ConfigurationTable ConfigurationTable() { return ConfigurationTable; }
		public DownloadTemplate DownloadTemplate() { return DownloadTemplate; }
		public StartImportButton StartImportButton() { return StartImportButton; }
		public WarningMessage WarningMessage() { return WarningMessage; }
		public CancelButton CancelButton() { return CancelButton; }
		public ImportAssignmentsTitle ImportAssignmentsTitle() { return ImportAssignmentsTitle; }
		public learnHowLink learnHowLink() { return learnHowLink; }
		public QuestionMarkIcon QuestionMarkIcon() { return QuestionMarkIcon; }
		public ModuleNameEditField ModuleNameEditField() { return ModuleNameEditField; }
		public SearchButton SearchButton() { return SearchButton; }
		public MagnifierButton MagnifierButton() { return MagnifierButton; }
		public ResetButton ResetButton() { return ResetButton; }
		public AssignedModulesInfo AssignedModulesInfo() { return AssignedModulesInfo; }
		public InfoContainer InfoContainer() { return InfoContainer; }
		public TaxonomyPropagation TaxonomyPropagation() { return TaxonomyPropagation; }
		public IncomingReferences IncomingReferences() { return IncomingReferences; }
		public Outgoingreferences Outgoingreferences() { return Outgoingreferences; }
		public SelectTaxonomyField SelectTaxonomyField() { return SelectTaxonomyField; }
		public SelectTaxonomy SelectTaxonomy() { return SelectTaxonomy; }
		public StartPropagation StartPropagation() { return StartPropagation; }
		public ActiveTab ActiveTab() { return ActiveTab; }
		public SelectFile SelectFile() { return SelectFile; }
		
			public class TaxonomiesTab extends WebLinkNodeBase
	{

		
								public TaxonomiesTab(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomiesTab");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().className(new RegExpProperty("mining__tabs.*")).innerText("Taxonomies").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationsTab extends WebWebElementNodeBase
	{

		
								public AnnotationsTab(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationsTab");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-tabs-tab-btn").innerText("Annotations ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ImportAssignmentsButton extends WebWebElementNodeBase
	{

		
								public ImportAssignmentsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ImportAssignmentsButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("SPAN").innerText("Import Assignments").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExportAssignmentsButton extends WebButtonNodeBase
	{

		
								public ExportAssignmentsButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportAssignmentsButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText(new RegExpProperty(".*Export All Assignments.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HelpTooltip extends WebWebElementNodeBase
	{

		
								public HelpTooltip(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HelpTooltip");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().attribute("NZTYPE", "question-circle").tagName("I").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfigurationTable extends WebTableNodeBase
	{

		
								public ConfigurationTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ConfigurationTable");
		}

		@Override
		protected com.hp.lft.sdk.web.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.TableDescription.Builder().tagName("TABLE").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DownloadTemplate extends WebWebElementNodeBase
	{

		
								public DownloadTemplate(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DownloadTemplate");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Download Template ").tagName("span").className("ng-star-inserted").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StartImportButton extends WebButtonNodeBase
	{

		
								public StartImportButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StartImportButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText("Start Import").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WarningMessage extends WebWebElementNodeBase
	{

		
								public WarningMessage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WarningMessage");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className("text-container-error-warning").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends WebButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText("Cancel").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ImportAssignmentsTitle extends WebWebElementNodeBase
	{

		
								public ImportAssignmentsTitle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ImportAssignmentsTitle");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("div").className("ant-modal-title").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class learnHowLink extends WebWebElementNodeBase
	{

		
								public learnHowLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("learnHowLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Learn how ").tagName("a").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QuestionMarkIcon extends WebWebElementNodeBase
	{

		
								public QuestionMarkIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("questionMarkIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("i").className(new RegExpProperty(".*question-circle-icon.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModuleNameEditField extends WebEditFieldNodeBase
	{

		
								public ModuleNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ModuleNameEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().type("text").placeholder("Search...").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchButton extends WebButtonNodeBase
	{

		
								public SearchButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SearchButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").className("ant-btn ant-btn-primary ant-btn-sm").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MagnifierButton extends WebWebElementNodeBase
	{

		
								public MagnifierButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MagnifierButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className(new RegExpProperty(".*anticon-search.*")).innerText("").tagName("I").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ResetButton extends WebButtonNodeBase
	{

		
								public ResetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ResetButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().tagName("BUTTON").innerText("Reset").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AssignedModulesInfo extends WebWebElementNodeBase
	{

		
								public AssignedModulesInfo(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AssignedModulesInfo");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").className(new RegExpProperty(".*anticon-info-circle.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InfoContainer extends WebWebElementNodeBase
	{

		
								public InfoContainer(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("InfoContainer");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className("cdk-overlay-container").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyPropagation extends WebWebElementNodeBase
	{

		
								public TaxonomyPropagation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Taxonomy Propagation ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Taxonomy Propagation ").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IncomingReferences extends WebWebElementNodeBase
	{

		
								public IncomingReferences(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IncomingReferences");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("[object Text] Please select ").tagName("NZ-SELECT-TOP-CONTROL").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Outgoingreferences extends WebWebElementNodeBase
	{

		
								public Outgoingreferences(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Outgoingreferences");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("[object Text] Please select ").tagName("NZ-SELECT-TOP-CONTROL").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectTaxonomyField extends WebWebElementNodeBase
	{

		
								public SelectTaxonomyField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectTaxonomyField");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("NZ-SELECT-SEARCH").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectTaxonomy extends WebWebElementNodeBase
	{

		
								public SelectTaxonomy(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectTaxonomy");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(new RegExpProperty("Search or select taxonomy...")).tagName("nz-select-placeholder").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StartPropagation extends WebButtonNodeBase
	{

		
								public StartPropagation(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Start Propagation");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Start Propagation").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ActiveTab extends WebWebElementNodeBase
	{

		
								public ActiveTab(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ActiveTab");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").className(new RegExpProperty(".*ant-tabs-tab-active.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectFile extends WebButtonNodeBase
	{

		
								public SelectFile(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SelectFile");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().name(new RegExpProperty(".*Select File.*")).tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class pagesCount extends WebWebElementNodeBase
	{

		
								public pagesCount(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("pagesCount");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-pagination-simple-pager ng-star-inserted").tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Annotations extends WebWebElementNodeBase
	{

		
								public Annotations(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Annotations");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Annotations").tagName("SPAN").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TableData extends WebTableNodeBase
	{

		
								public TableData(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TableData");
		}

		@Override
		protected com.hp.lft.sdk.web.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.TableDescription.Builder().tagName("TABLE").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TableHeader extends WebTableNodeBase
	{

		
								public TableHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TableHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.TableDescription.Builder().tagName("TABLE").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class chartCSV extends WebButtonNodeBase
	{

		
								public chartCSV(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("chartCSV");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name(" CSV").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MMRS71D1Link extends WebLinkNodeBase
	{

		
								public MMRS71D1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MMRS71D1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText(new RegExpProperty(".*MMRS71D1.*")).tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TaxonomyDropDownBusinessProcessCreateInvoicesSelected extends WebWebElementNodeBase
	{

		
								public TaxonomyDropDownBusinessProcessCreateInvoicesSelected(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TaxonomyDropDownBusinessProcessCreateInvoicesSelected");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Business Process: Create Invoices").tagName("NZ-SELECT-ITEM").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PGM1Link extends WebLinkNodeBase
	{

		
								public PGM1Link(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PGM1Link");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText(new RegExpProperty("PGM1")).tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UtilitiesWebElement extends WebWebElementNodeBase
	{

		
								public UtilitiesWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Utilities");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Utilities").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BABKREULink extends WebLinkNodeBase
	{

		
								public BABKREULink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("'BABKREU'");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().accessibilityName("").innerText("'BABKREU'").role("").tagName("A").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TableHead extends WebWebElementNodeBase
	{

		
								public TableHead(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TableHead");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("thead").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TableBody extends WebWebElementNodeBase
	{

		
								public TableBody(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TableBody");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("tbody").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Table extends WebTableNodeBase
	{

		
								public Table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.web.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.TableDescription.Builder().tagName("table").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionary extends WebLinkNodeBase
	{

		
								public DataDictionary(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Data Dictionary");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Data Dictionary").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataDictionaryPage extends WebPageNodeBase
	{

		
			private DataDictionary DataDictionary;
	private HighlightedLength HighlightedLength;
						public DataDictionaryPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DataDictionary = new DataDictionary(this, applicationModel);
		HighlightedLength = new HighlightedLength(this, applicationModel);

			setDisplayName("Data Dictionary Page");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DataDictionary DataDictionary() { return DataDictionary; }
		public HighlightedLength HighlightedLength() { return HighlightedLength; }
		
			public class DataDictionary extends WebWebElementNodeBase
	{

		
								public DataDictionary(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Data Dictionary");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ant-page-header-heading-title ng-star-inserted").innerText("Data Dictionary").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HighlightedLength extends WebWebElementNodeBase
	{

		
								public HighlightedLength(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HighlightedLength");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("font-highlight").innerText("Length").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NoData extends WebWebElementNodeBase
	{

		
								public NoData(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("No Data ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("No Data ").tagName("TD").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FieldTypeFilterIcon extends WebWebElementNodeBase
	{

		
								public FieldTypeFilterIcon(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FieldTypeFilterIcon");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("I").attribute("nztype", "filter").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GroupCheckbox extends WebWebElementNodeBase
	{

		
								public GroupCheckbox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Group ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().attribute("Nz-checkbox", "").innerText(new RegExpProperty("GROUP")).tagName("LI").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class orientDBStudioPage extends WebPageNodeBase
	{

		
			private DatabaseValue DatabaseValue;
	private UsernameWebEditField UsernameWebEditField;
	private PasswordWebEditField PasswordWebEditField;
	private ConnectButton ConnectButton;
	private QueryEditorWebElement QueryEditorWebElement;
	private RunButton RunButton;
	private MetadataTableElement MetadataTableElement;
	private CandidatesIdentifiedWebElement CandidatesIdentifiedWebElement;
	private MiningRootButton MiningRootButton;
	private LogOutLink LogOutLink;
	private IDPropertyWebElement IDPropertyWebElement;
	private IDTable1stRowElement IDTable1stRowElement;
	private CalculateControlFlow1stRowElement CalculateControlFlow1stRowElement;
	private ClearHistoryButtonWebElement ClearHistoryButtonWebElement;
	private ClearHistoryYesButtonWebElement ClearHistoryYesButtonWebElement;
						public orientDBStudioPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DatabaseValue = new DatabaseValue(this, applicationModel);
		UsernameWebEditField = new UsernameWebEditField(this, applicationModel);
		PasswordWebEditField = new PasswordWebEditField(this, applicationModel);
		ConnectButton = new ConnectButton(this, applicationModel);
		QueryEditorWebElement = new QueryEditorWebElement(this, applicationModel);
		RunButton = new RunButton(this, applicationModel);
		MetadataTableElement = new MetadataTableElement(this, applicationModel);
		CandidatesIdentifiedWebElement = new CandidatesIdentifiedWebElement(this, applicationModel);
		MiningRootButton = new MiningRootButton(this, applicationModel);
		LogOutLink = new LogOutLink(this, applicationModel);
		IDPropertyWebElement = new IDPropertyWebElement(this, applicationModel);
		IDTable1stRowElement = new IDTable1stRowElement(this, applicationModel);
		CalculateControlFlow1stRowElement = new CalculateControlFlow1stRowElement(this, applicationModel);
		ClearHistoryButtonWebElement = new ClearHistoryButtonWebElement(this, applicationModel);
		ClearHistoryYesButtonWebElement = new ClearHistoryYesButtonWebElement(this, applicationModel);

			setDisplayName("OrientDB Studio");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DatabaseValue DatabaseValue() { return DatabaseValue; }
		public UsernameWebEditField UsernameWebEditField() { return UsernameWebEditField; }
		public PasswordWebEditField PasswordWebEditField() { return PasswordWebEditField; }
		public ConnectButton ConnectButton() { return ConnectButton; }
		public QueryEditorWebElement QueryEditorWebElement() { return QueryEditorWebElement; }
		public RunButton RunButton() { return RunButton; }
		public MetadataTableElement MetadataTableElement() { return MetadataTableElement; }
		public CandidatesIdentifiedWebElement CandidatesIdentifiedWebElement() { return CandidatesIdentifiedWebElement; }
		public MiningRootButton MiningRootButton() { return MiningRootButton; }
		public LogOutLink LogOutLink() { return LogOutLink; }
		public IDPropertyWebElement IDPropertyWebElement() { return IDPropertyWebElement; }
		public IDTable1stRowElement IDTable1stRowElement() { return IDTable1stRowElement; }
		public CalculateControlFlow1stRowElement CalculateControlFlow1stRowElement() { return CalculateControlFlow1stRowElement; }
		public ClearHistoryButtonWebElement ClearHistoryButtonWebElement() { return ClearHistoryButtonWebElement; }
		public ClearHistoryYesButtonWebElement ClearHistoryYesButtonWebElement() { return ClearHistoryYesButtonWebElement; }
		
			public class DatabaseValue extends WebListBoxNodeBase
	{

		
								public DatabaseValue(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DatabaseValue");
		}

		@Override
		protected com.hp.lft.sdk.web.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ListBoxDescription.Builder().name("select").tagName("SELECT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UsernameWebEditField extends WebEditFieldNodeBase
	{

		
								public UsernameWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UsernameWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("INPUT").type("text").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordWebEditField extends WebEditFieldNodeBase
	{

		
								public PasswordWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("INPUT").type("password").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConnectButton extends WebButtonNodeBase
	{

		
								public ConnectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Connect Button");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name(" Connect ").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class QueryEditorWebElement extends WebWebElementNodeBase
	{

		
								public QueryEditorWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("?QueryEditorWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("PRE").innerText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunButton extends WebButtonNodeBase
	{

		
								public RunButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Button");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("submit").name(" Run ").role("").tagName("BUTTON").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MetadataTableElement extends WebWebElementNodeBase
	{

		
								public MetadataTableElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MetadataTableElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("METADATA  ").tagName("TH").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CandidatesIdentifiedWebElement extends WebWebElementNodeBase
	{

		
								public CandidatesIdentifiedWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("candidatesIdentified ");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("candidatesIdentified ").tagName("TH").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MiningRootButton extends WebWebElementNodeBase
	{

		
								public MiningRootButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MiningRootButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("username ng-binding").innerText("mining (root)").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LogOutLink extends WebLinkNodeBase
	{

		
								public LogOutLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Log Out");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Log Out").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IDPropertyWebElement extends WebWebElementNodeBase
	{

		
								public IDPropertyWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IDPropertyWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("id ").tagName("TH").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IDTable1stRowElement extends WebWebElementNodeBase
	{

		
								public IDTable1stRowElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IDTable1stRowElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("ng-binding ng-scope").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CalculateControlFlow1stRowElement extends WebWebElementNodeBase
	{

		
								public CalculateControlFlow1stRowElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CalculateControlFlow1stRowElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("TD").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClearHistoryButtonWebElement extends WebButtonNodeBase
	{

		
								public ClearHistoryButtonWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClearHistoryButtonWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClearHistoryYesButtonWebElement extends WebButtonNodeBase
	{

		
								public ClearHistoryYesButtonWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClearHistoryYesButtonWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("submit").name("Ok").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SwaggerUI extends WebPageNodeBase
	{

		
			private SwaggerUITitle SwaggerUITitle;
	private AnnotationCategoryController AnnotationCategoryController;
	private AuthorizeButton AuthorizeButton;
						public SwaggerUI(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SwaggerUITitle = new SwaggerUITitle(this, applicationModel);
		AnnotationCategoryController = new AnnotationCategoryController(this, applicationModel);
		AuthorizeButton = new AuthorizeButton(this, applicationModel);

			setDisplayName("SwaggerUI");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SwaggerUITitle SwaggerUITitle() { return SwaggerUITitle; }
		public AnnotationCategoryController AnnotationCategoryController() { return AnnotationCategoryController; }
		public AuthorizeButton AuthorizeButton() { return AuthorizeButton; }
		
			public class SwaggerUITitle extends WebWebElementNodeBase
	{

		
								public SwaggerUITitle(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SwaggerUITitle");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().xpath("//*[@id=\"swagger-ui\"]/section/div[2]/div[2]/div[1]/section/div/div/hgroup/h2").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AnnotationCategoryController extends WebWebElementNodeBase
	{

		
								public AnnotationCategoryController(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationCategoryController");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().xpath("//*[@id=\"operations-tag-annotation-category-controller\"]/a/span").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AuthorizeButton extends WebButtonNodeBase
	{

		
								public AuthorizeButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AuthorizeButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().xpath("//*[@id=\"swagger-ui\"]/section/div[2]/div[2]/div/section/div/button").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FeatureConsolePage extends WebPageNodeBase
	{

		
			private FeaturesButton FeaturesButton;
						public FeatureConsolePage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FeaturesButton = new FeaturesButton(this, applicationModel);

			setDisplayName("FeatureConsolePage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FeaturesButton FeaturesButton() { return FeaturesButton; }
		
			public class FeaturesButton extends WebWebElementNodeBase
	{

		
								public FeaturesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FeaturesButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Features").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SaveAsDialog extends StdDialogNodeBase
	{

		
			private SaveButton SaveButton;
						public SaveAsDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SaveButton = new SaveButton(this, applicationModel);
			
			setDisplayName("SaveAsDialog");
		}
				public SaveAsDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SaveButton = new SaveButton(this, applicationModel);

			setDisplayName("SaveAsDialog");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("Save As").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SaveButton SaveButton() { return SaveButton; }
		
			public class SaveButton extends StdButtonNodeBase
	{

		
								public SaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SaveButton");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ButtonDescription.Builder().nativeClass("Button").text("&Save").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class KeycloakPage extends WebPageNodeBase
	{

		
			private AdministrationConsoleLinkWebElement AdministrationConsoleLinkWebElement;
	private SessionsEntry SessionsEntry;
	private WebEntry WebEntry;
	private LogoutAllButton LogoutAllButton;
	private LogonPage LogonPage;
						public KeycloakPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AdministrationConsoleLinkWebElement = new AdministrationConsoleLinkWebElement(this, applicationModel);
		SessionsEntry = new SessionsEntry(this, applicationModel);
		WebEntry = new WebEntry(this, applicationModel);
		LogoutAllButton = new LogoutAllButton(this, applicationModel);
		LogonPage = new LogonPage(this, applicationModel);

			setDisplayName("KeycloakPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AdministrationConsoleLinkWebElement AdministrationConsoleLinkWebElement() { return AdministrationConsoleLinkWebElement; }
		public SessionsEntry SessionsEntry() { return SessionsEntry; }
		public WebEntry WebEntry() { return WebEntry; }
		public LogoutAllButton LogoutAllButton() { return LogoutAllButton; }
		public LogonPage LogonPage() { return LogonPage; }
		
			public class AdministrationConsoleLinkWebElement extends WebWebElementNodeBase
	{

		
								public AdministrationConsoleLinkWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AdministrationConsoleLink");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Administration Console").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SessionsEntry extends WebWebElementNodeBase
	{

		
								public SessionsEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SessionsEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText(" Sessions").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WebEntry extends WebWebElementNodeBase
	{

		
								public WebEntry(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebEntry");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("web").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LogoutAllButton extends WebWebElementNodeBase
	{

		
								public LogoutAllButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LogoutAllButton");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().id("logoutAllSessions").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LogonPage extends WebPageNodeBase
	{

		
			private UsernameField UsernameField;
	private PasswordField PasswordField;
	private LoginButton LoginButton;
						public LogonPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					UsernameField = new UsernameField(this, applicationModel);
		PasswordField = new PasswordField(this, applicationModel);
		LoginButton = new LoginButton(this, applicationModel);

			setDisplayName("LogonPage");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public UsernameField UsernameField() { return UsernameField; }
		public PasswordField PasswordField() { return PasswordField; }
		public LoginButton LoginButton() { return LoginButton; }
		
			public class UsernameField extends WebEditFieldNodeBase
	{

		
								public UsernameField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UsernameField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Username").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasswordField extends WebEditFieldNodeBase
	{

		
								public PasswordField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PasswordField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().placeholder("Password").tagName("INPUT").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class LoginButton extends WebButtonNodeBase
	{

		
								public LoginButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LoginButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().innerText("Sign In").tagName("BUTTON").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}


			
	public abstract class WebPageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Page, com.hp.lft.sdk.web.PageDescription> implements com.hp.lft.sdk.web.Page
	{		
		public WebPageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class WebWebElementNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.WebElement, com.hp.lft.sdk.web.WebElementDescription> implements com.hp.lft.sdk.web.WebElement
	{		
		public WebWebElementNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebLinkNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Link, com.hp.lft.sdk.web.LinkDescription> implements com.hp.lft.sdk.web.Link
	{		
		public WebLinkNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColor();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFontName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFontName();
		}

		@Override 
		public java.lang.String getHref() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHref();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getTarget() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTarget();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.EditField, com.hp.lft.sdk.web.EditFieldDescription> implements com.hp.lft.sdk.web.EditField
	{		
		public WebEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMaxCharsInLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxCharsInLine();
		}

		@Override 
		public int getMaxLength() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxLength();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getPattern() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPattern();
		}

		@Override 
		public java.lang.String getPlaceholder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPlaceholder();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public int getRowsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRowsCount();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isRequired() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRequired();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setValue(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setValue(arg0);
		}

		@Override 
		public void submit() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().submit();
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Button, com.hp.lft.sdk.web.ButtonDescription> implements com.hp.lft.sdk.web.Button
	{		
		public WebButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getButtonType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtonType();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebTableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Table, com.hp.lft.sdk.web.TableDescription> implements com.hp.lft.sdk.web.Table
	{		
		public WebTableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellText(java.lang.String arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellText(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellTextInColumn(java.lang.String arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellTextInColumn(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.web.TableRow findRowWithCellTextInColumn(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().findRowWithCellTextInColumn(arg0, arg1, arg2);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public int getBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBorder();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.CheckBox, com.hp.lft.sdk.web.CheckBoxDescription> implements com.hp.lft.sdk.web.CheckBox
	{		
		public WebCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void set(boolean arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebListBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.ListBox, com.hp.lft.sdk.web.ListBoxDescription> implements com.hp.lft.sdk.web.ListBox
	{		
		public WebListBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public com.hp.lft.sdk.web.ListItem getItem(java.lang.String arg0)  
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.web.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public int getVisibleItemsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleItemsCount();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isMultiple() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMultiple();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.web.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
		
	public abstract class StdDialogNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.stdwin.Dialog, com.hp.lft.sdk.stdwin.DialogDescription> implements com.hp.lft.sdk.stdwin.Dialog
	{
		public StdDialogNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public StdDialogNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Button, com.hp.lft.sdk.stdwin.ButtonDescription> implements com.hp.lft.sdk.stdwin.Button
	{		
		public StdButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
