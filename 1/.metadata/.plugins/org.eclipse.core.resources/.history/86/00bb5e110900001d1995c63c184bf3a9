
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package appmodels;

import com.hp.lft.sdk.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.53
public class CobolClipseApplicationModel extends AppModelBase {		private MainWindow MainWindow;

	public CobolClipseApplicationModel() throws GeneralLeanFtException 
	{
		setName("CobolClipseApplicationModel");
			MainWindow = new MainWindow(this);
		rebuildDescriptions();
	}
	
	public CobolClipseApplicationModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("CobolClipseApplicationModel");
				MainWindow = new MainWindow(contextTestObject, this);
		rebuildDescriptions();
	}	

			public MainWindow MainWindow() { return MainWindow; }

		public class MainWindow extends JavaWindowNodeBase
	{

		
			private NewProjectWindowPart1 NewProjectWindowPart1;
	private NewProjectWindowPart2 NewProjectWindowPart2;
	private OpenPerspectiveWindow OpenPerspectiveWindow;
	private BottomTabControl BottomTabControl;
	private preferencesWindow preferencesWindow;
	private WindowMenu WindowMenu;
	private showViewWindow showViewWindow;
	private ProblemsTreeView ProblemsTreeView;
	private NewProjectWindow NewProjectWindow;
	private yesButton yesButton;
	private addCobolNatureWindow addCobolNatureWindow;
	private PropertiesWindow PropertiesWindow;
	private FiltersAndCustomizationMenu FiltersAndCustomizationMenu;
	private NewCobolObjectWindow NewCobolObjectWindow;
	private NavigatorTabControl NavigatorTabControl;
	private ProjectExplorerTabControl ProjectExplorerTabControl;
	private EditorWindow EditorWindow;
	private StyledTextEditor StyledTextEditor;
	private newFolderWindow newFolderWindow;
	private EditorSelectionWindow EditorSelectionWindow;
	private CompositeUiObject CompositeUiObject;
	private Menu Menu;
	private TabFolderTabControl TabFolderTabControl;
	private BMSPreviewStLabel BMSPreviewStLabel;
	private CompositeRulerCompositeRulerCanvasUiObject CompositeRulerCompositeRulerCanvasUiObject;
	private LineNumberRulerColumn2UiObject LineNumberRulerColumn2UiObject;
	private BMSPreviewEditor BMSPreviewEditor;
	private FieldList FieldList;
	private BMSMapView BMSMapView;
	private AttributesEditor AttributesEditor;
	private AutomaticMeeclipseWorkspaceSettingsWindow AutomaticMeeclipseWorkspaceSettingsWindow;
	private CreateNewFileWindow CreateNewFileWindow;
	private ToolBar ToolBar;
	private ImportWindow ImportWindow;
	private AddMeeclipseNatureWindow AddMeeclipseNatureWindow;
	private JavaSourceFolderWindow JavaSourceFolderWindow;
	private FiltersAndCustomizationWindow FiltersAndCustomizationWindow;
	private ProjectMenu ProjectMenu;
	private CleanWindow CleanWindow;
	private FileMenu FileMenu;
	private NewJavaProjectWindow NewJavaProjectWindow;
	private MoveWindow MoveWindow;
	private RenameResourceWindow RenameResourceWindow;
	private SaveResourceWindow SaveResourceWindow;
	private OutlineTabControl OutlineTabControl;
	private NewModuleInfoJavaWindow NewModuleInfoJavaWindow;
	private NewWindow NewWindow;
	private FiltersMenu FiltersMenu;
	private JavaElementFiltersWindow JavaElementFiltersWindow;
	private JARSelectionDialog JARSelectionDialog;
	private AddNatureAndClasspathWindow AddNatureAndClasspathWindow;
	private ExpertConsoleEditor ExpertConsoleEditor;
	private DeleteWindow DeleteWindow;
	private NewTargetWindow NewTargetWindow;
	private SettingsChangedWindow SettingsChangedWindow;
						public MainWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewProjectWindowPart1 = new NewProjectWindowPart1(this, applicationModel);
		NewProjectWindowPart2 = new NewProjectWindowPart2(this, applicationModel);
		OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		preferencesWindow = new preferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		showViewWindow = new showViewWindow(this, applicationModel);
		ProblemsTreeView = new ProblemsTreeView(this, applicationModel);
		NewProjectWindow = new NewProjectWindow(this, applicationModel);
		yesButton = new yesButton(this, applicationModel);
		addCobolNatureWindow = new addCobolNatureWindow(this, applicationModel);
		PropertiesWindow = new PropertiesWindow(this, applicationModel);
		FiltersAndCustomizationMenu = new FiltersAndCustomizationMenu(this, applicationModel);
		NewCobolObjectWindow = new NewCobolObjectWindow(this, applicationModel);
		NavigatorTabControl = new NavigatorTabControl(this, applicationModel);
		ProjectExplorerTabControl = new ProjectExplorerTabControl(this, applicationModel);
		EditorWindow = new EditorWindow(this, applicationModel);
		StyledTextEditor = new StyledTextEditor(this, applicationModel);
		newFolderWindow = new newFolderWindow(this, applicationModel);
		EditorSelectionWindow = new EditorSelectionWindow(this, applicationModel);
		CompositeUiObject = new CompositeUiObject(this, applicationModel);
		Menu = new Menu(this, applicationModel);
		TabFolderTabControl = new TabFolderTabControl(this, applicationModel);
		BMSPreviewStLabel = new BMSPreviewStLabel(this, applicationModel);
		CompositeRulerCompositeRulerCanvasUiObject = new CompositeRulerCompositeRulerCanvasUiObject(this, applicationModel);
		LineNumberRulerColumn2UiObject = new LineNumberRulerColumn2UiObject(this, applicationModel);
		BMSPreviewEditor = new BMSPreviewEditor(this, applicationModel);
		FieldList = new FieldList(this, applicationModel);
		BMSMapView = new BMSMapView(this, applicationModel);
		AttributesEditor = new AttributesEditor(this, applicationModel);
		AutomaticMeeclipseWorkspaceSettingsWindow = new AutomaticMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		CreateNewFileWindow = new CreateNewFileWindow(this, applicationModel);
		ToolBar = new ToolBar(this, applicationModel);
		ImportWindow = new ImportWindow(this, applicationModel);
		AddMeeclipseNatureWindow = new AddMeeclipseNatureWindow(this, applicationModel);
		JavaSourceFolderWindow = new JavaSourceFolderWindow(this, applicationModel);
		FiltersAndCustomizationWindow = new FiltersAndCustomizationWindow(this, applicationModel);
		ProjectMenu = new ProjectMenu(this, applicationModel);
		CleanWindow = new CleanWindow(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		NewJavaProjectWindow = new NewJavaProjectWindow(this, applicationModel);
		MoveWindow = new MoveWindow(this, applicationModel);
		RenameResourceWindow = new RenameResourceWindow(this, applicationModel);
		SaveResourceWindow = new SaveResourceWindow(this, applicationModel);
		OutlineTabControl = new OutlineTabControl(this, applicationModel);
		NewModuleInfoJavaWindow = new NewModuleInfoJavaWindow(this, applicationModel);
		NewWindow = new NewWindow(this, applicationModel);
		FiltersMenu = new FiltersMenu(this, applicationModel);
		JavaElementFiltersWindow = new JavaElementFiltersWindow(this, applicationModel);
		JARSelectionDialog = new JARSelectionDialog(this, applicationModel);
		AddNatureAndClasspathWindow = new AddNatureAndClasspathWindow(this, applicationModel);
		ExpertConsoleEditor = new ExpertConsoleEditor(this, applicationModel);
		DeleteWindow = new DeleteWindow(this, applicationModel);
		NewTargetWindow = new NewTargetWindow(this, applicationModel);
		SettingsChangedWindow = new SettingsChangedWindow(this, applicationModel);
			
			setDisplayName("MainWindow");
		}
				public MainWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewProjectWindowPart1 = new NewProjectWindowPart1(this, applicationModel);
		NewProjectWindowPart2 = new NewProjectWindowPart2(this, applicationModel);
		OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		preferencesWindow = new preferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		showViewWindow = new showViewWindow(this, applicationModel);
		ProblemsTreeView = new ProblemsTreeView(this, applicationModel);
		NewProjectWindow = new NewProjectWindow(this, applicationModel);
		yesButton = new yesButton(this, applicationModel);
		addCobolNatureWindow = new addCobolNatureWindow(this, applicationModel);
		PropertiesWindow = new PropertiesWindow(this, applicationModel);
		FiltersAndCustomizationMenu = new FiltersAndCustomizationMenu(this, applicationModel);
		NewCobolObjectWindow = new NewCobolObjectWindow(this, applicationModel);
		NavigatorTabControl = new NavigatorTabControl(this, applicationModel);
		ProjectExplorerTabControl = new ProjectExplorerTabControl(this, applicationModel);
		EditorWindow = new EditorWindow(this, applicationModel);
		StyledTextEditor = new StyledTextEditor(this, applicationModel);
		newFolderWindow = new newFolderWindow(this, applicationModel);
		EditorSelectionWindow = new EditorSelectionWindow(this, applicationModel);
		CompositeUiObject = new CompositeUiObject(this, applicationModel);
		Menu = new Menu(this, applicationModel);
		TabFolderTabControl = new TabFolderTabControl(this, applicationModel);
		BMSPreviewStLabel = new BMSPreviewStLabel(this, applicationModel);
		CompositeRulerCompositeRulerCanvasUiObject = new CompositeRulerCompositeRulerCanvasUiObject(this, applicationModel);
		LineNumberRulerColumn2UiObject = new LineNumberRulerColumn2UiObject(this, applicationModel);
		BMSPreviewEditor = new BMSPreviewEditor(this, applicationModel);
		FieldList = new FieldList(this, applicationModel);
		BMSMapView = new BMSMapView(this, applicationModel);
		AttributesEditor = new AttributesEditor(this, applicationModel);
		AutomaticMeeclipseWorkspaceSettingsWindow = new AutomaticMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		CreateNewFileWindow = new CreateNewFileWindow(this, applicationModel);
		ToolBar = new ToolBar(this, applicationModel);
		ImportWindow = new ImportWindow(this, applicationModel);
		AddMeeclipseNatureWindow = new AddMeeclipseNatureWindow(this, applicationModel);
		JavaSourceFolderWindow = new JavaSourceFolderWindow(this, applicationModel);
		FiltersAndCustomizationWindow = new FiltersAndCustomizationWindow(this, applicationModel);
		ProjectMenu = new ProjectMenu(this, applicationModel);
		CleanWindow = new CleanWindow(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		NewJavaProjectWindow = new NewJavaProjectWindow(this, applicationModel);
		MoveWindow = new MoveWindow(this, applicationModel);
		RenameResourceWindow = new RenameResourceWindow(this, applicationModel);
		SaveResourceWindow = new SaveResourceWindow(this, applicationModel);
		OutlineTabControl = new OutlineTabControl(this, applicationModel);
		NewModuleInfoJavaWindow = new NewModuleInfoJavaWindow(this, applicationModel);
		NewWindow = new NewWindow(this, applicationModel);
		FiltersMenu = new FiltersMenu(this, applicationModel);
		JavaElementFiltersWindow = new JavaElementFiltersWindow(this, applicationModel);
		JARSelectionDialog = new JARSelectionDialog(this, applicationModel);
		AddNatureAndClasspathWindow = new AddNatureAndClasspathWindow(this, applicationModel);
		ExpertConsoleEditor = new ExpertConsoleEditor(this, applicationModel);
		DeleteWindow = new DeleteWindow(this, applicationModel);
		NewTargetWindow = new NewTargetWindow(this, applicationModel);
		SettingsChangedWindow = new SettingsChangedWindow(this, applicationModel);

			setDisplayName("MainWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty(".* - innoWake")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewProjectWindowPart1 NewProjectWindowPart1() { return NewProjectWindowPart1; }
		public NewProjectWindowPart2 NewProjectWindowPart2() { return NewProjectWindowPart2; }
		public OpenPerspectiveWindow OpenPerspectiveWindow() { return OpenPerspectiveWindow; }
		public BottomTabControl BottomTabControl() { return BottomTabControl; }
		public preferencesWindow preferencesWindow() { return preferencesWindow; }
		public WindowMenu WindowMenu() { return WindowMenu; }
		public showViewWindow showViewWindow() { return showViewWindow; }
		public ProblemsTreeView ProblemsTreeView() { return ProblemsTreeView; }
		public NewProjectWindow NewProjectWindow() { return NewProjectWindow; }
		public yesButton yesButton() { return yesButton; }
		public addCobolNatureWindow addCobolNatureWindow() { return addCobolNatureWindow; }
		public PropertiesWindow PropertiesWindow() { return PropertiesWindow; }
		public FiltersAndCustomizationMenu FiltersAndCustomizationMenu() { return FiltersAndCustomizationMenu; }
		public NewCobolObjectWindow NewCobolObjectWindow() { return NewCobolObjectWindow; }
		public NavigatorTabControl NavigatorTabControl() { return NavigatorTabControl; }
		public ProjectExplorerTabControl ProjectExplorerTabControl() { return ProjectExplorerTabControl; }
		public EditorWindow EditorWindow() { return EditorWindow; }
		public StyledTextEditor StyledTextEditor() { return StyledTextEditor; }
		public newFolderWindow newFolderWindow() { return newFolderWindow; }
		public EditorSelectionWindow EditorSelectionWindow() { return EditorSelectionWindow; }
		public CompositeUiObject CompositeUiObject() { return CompositeUiObject; }
		public Menu Menu() { return Menu; }
		public TabFolderTabControl TabFolderTabControl() { return TabFolderTabControl; }
		public BMSPreviewStLabel BMSPreviewStLabel() { return BMSPreviewStLabel; }
		public CompositeRulerCompositeRulerCanvasUiObject CompositeRulerCompositeRulerCanvasUiObject() { return CompositeRulerCompositeRulerCanvasUiObject; }
		public LineNumberRulerColumn2UiObject LineNumberRulerColumn2UiObject() { return LineNumberRulerColumn2UiObject; }
		public BMSPreviewEditor BMSPreviewEditor() { return BMSPreviewEditor; }
		public FieldList FieldList() { return FieldList; }
		public BMSMapView BMSMapView() { return BMSMapView; }
		public AttributesEditor AttributesEditor() { return AttributesEditor; }
		public AutomaticMeeclipseWorkspaceSettingsWindow AutomaticMeeclipseWorkspaceSettingsWindow() { return AutomaticMeeclipseWorkspaceSettingsWindow; }
		public CreateNewFileWindow CreateNewFileWindow() { return CreateNewFileWindow; }
		public ToolBar ToolBar() { return ToolBar; }
		public ImportWindow ImportWindow() { return ImportWindow; }
		public AddMeeclipseNatureWindow AddMeeclipseNatureWindow() { return AddMeeclipseNatureWindow; }
		public JavaSourceFolderWindow JavaSourceFolderWindow() { return JavaSourceFolderWindow; }
		public FiltersAndCustomizationWindow FiltersAndCustomizationWindow() { return FiltersAndCustomizationWindow; }
		public ProjectMenu ProjectMenu() { return ProjectMenu; }
		public CleanWindow CleanWindow() { return CleanWindow; }
		public FileMenu FileMenu() { return FileMenu; }
		public NewJavaProjectWindow NewJavaProjectWindow() { return NewJavaProjectWindow; }
		public MoveWindow MoveWindow() { return MoveWindow; }
		public RenameResourceWindow RenameResourceWindow() { return RenameResourceWindow; }
		public SaveResourceWindow SaveResourceWindow() { return SaveResourceWindow; }
		public OutlineTabControl OutlineTabControl() { return OutlineTabControl; }
		public NewModuleInfoJavaWindow NewModuleInfoJavaWindow() { return NewModuleInfoJavaWindow; }
		public NewWindow NewWindow() { return NewWindow; }
		public FiltersMenu FiltersMenu() { return FiltersMenu; }
		public JavaElementFiltersWindow JavaElementFiltersWindow() { return JavaElementFiltersWindow; }
		public JARSelectionDialog JARSelectionDialog() { return JARSelectionDialog; }
		public AddNatureAndClasspathWindow AddNatureAndClasspathWindow() { return AddNatureAndClasspathWindow; }
		public ExpertConsoleEditor ExpertConsoleEditor() { return ExpertConsoleEditor; }
		public DeleteWindow DeleteWindow() { return DeleteWindow; }
		public NewTargetWindow NewTargetWindow() { return NewTargetWindow; }
		public SettingsChangedWindow SettingsChangedWindow() { return SettingsChangedWindow; }
		
			public class NewProjectWindowPart1 extends JavaWindowNodeBase
	{

		
			private SelectAWizardScreen SelectAWizardScreen;
						public NewProjectWindowPart1(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);
			
			setDisplayName("New Project Window Part 1");
		}
				public NewProjectWindowPart1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);

			setDisplayName("New Project Window Part 1");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectAWizardScreen SelectAWizardScreen() { return SelectAWizardScreen; }
		
			public class SelectAWizardScreen extends JavaUiObjectNodeBase
	{

		
			private WizardsEditor WizardsEditor;
	private NextButton NextButton;
	private WizardsTreeView WizardsTreeView;
	private finishButton finishButton;
						public SelectAWizardScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardsEditor = new WizardsEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		WizardsTreeView = new WizardsTreeView(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);

			setDisplayName("Select a wizard Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardsEditor WizardsEditor() { return WizardsEditor; }
		public NextButton NextButton() { return NextButton; }
		public WizardsTreeView WizardsTreeView() { return WizardsTreeView; }
		public finishButton finishButton() { return finishButton; }
		
			public class WizardsEditor extends JavaEditorNodeBase
	{

		
								public WizardsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WizardsTreeView extends JavaTreeViewNodeBase
	{

		
								public WizardsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewProjectWindowPart2 extends JavaWindowNodeBase
	{

		
			private CreateApplicationBuilderProjectScreen CreateApplicationBuilderProjectScreen;
						public NewProjectWindowPart2(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CreateApplicationBuilderProjectScreen = new CreateApplicationBuilderProjectScreen(this, applicationModel);
			
			setDisplayName("New Project Window Part 2");
		}
				public NewProjectWindowPart2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateApplicationBuilderProjectScreen = new CreateApplicationBuilderProjectScreen(this, applicationModel);

			setDisplayName("New Project Window Part 2");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateApplicationBuilderProjectScreen CreateApplicationBuilderProjectScreen() { return CreateApplicationBuilderProjectScreen; }
		
			public class CreateApplicationBuilderProjectScreen extends JavaUiObjectNodeBase
	{

		
			private CreateTwoProjectsUiAndCore CreateTwoProjectsUiAndCore;
	private FinishButton FinishButton;
	private ProjectBasenameEditor ProjectBasenameEditor;
						public CreateApplicationBuilderProjectScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateTwoProjectsUiAndCore = new CreateTwoProjectsUiAndCore(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		ProjectBasenameEditor = new ProjectBasenameEditor(this, applicationModel);

			setDisplayName("CreateApplicationBuilderProjectScreen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateTwoProjectsUiAndCore CreateTwoProjectsUiAndCore() { return CreateTwoProjectsUiAndCore; }
		public FinishButton FinishButton() { return FinishButton; }
		public ProjectBasenameEditor ProjectBasenameEditor() { return ProjectBasenameEditor; }
		
			public class CreateTwoProjectsUiAndCore extends JavaCheckBoxNodeBase
	{

		
								public CreateTwoProjectsUiAndCore(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CreateTwoProjectsUiAndCore");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().label("Create two projects (ui and core)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectBasenameEditor extends JavaEditorNodeBase
	{

		
								public ProjectBasenameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project basename:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project basename:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class OpenPerspectiveWindow extends JavaWindowNodeBase
	{

		
			private Table Table;
	private oKButton oKButton;
						public OpenPerspectiveWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Table = new Table(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Open Perspective");
		}
				public OpenPerspectiveWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Table = new Table(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Open Perspective");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Open Perspective").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Table Table() { return Table; }
		public oKButton oKButton() { return oKButton; }
		
			public class Table extends JavaTableNodeBase
	{

		
								public Table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BottomTabControl extends JavaTabControlNodeBase
	{

		
			private problemsView problemsView;
	private ObjectDependenciesTreeView ObjectDependenciesTreeView;
	private ErrorLogTreeView ErrorLogTreeView;
	private ExpertConsoleEditor ExpertConsoleEditor;
	private ErrorLogToolBar ErrorLogToolBar;
	private TargetViewToolBar TargetViewToolBar;
	private TargetViewTreeView TargetViewTreeView;
						public BottomTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					problemsView = new problemsView(this, applicationModel);
		ObjectDependenciesTreeView = new ObjectDependenciesTreeView(this, applicationModel);
		ErrorLogTreeView = new ErrorLogTreeView(this, applicationModel);
		ExpertConsoleEditor = new ExpertConsoleEditor(this, applicationModel);
		ErrorLogToolBar = new ErrorLogToolBar(this, applicationModel);
		TargetViewToolBar = new TargetViewToolBar(this, applicationModel);
		TargetViewTreeView = new TargetViewTreeView(this, applicationModel);

			setDisplayName("Bottom Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_BIG__Y_BIG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public problemsView problemsView() { return problemsView; }
		public ObjectDependenciesTreeView ObjectDependenciesTreeView() { return ObjectDependenciesTreeView; }
		public ErrorLogTreeView ErrorLogTreeView() { return ErrorLogTreeView; }
		public ExpertConsoleEditor ExpertConsoleEditor() { return ExpertConsoleEditor; }
		public ErrorLogToolBar ErrorLogToolBar() { return ErrorLogToolBar; }
		public TargetViewToolBar TargetViewToolBar() { return TargetViewToolBar; }
		public TargetViewTreeView TargetViewTreeView() { return TargetViewTreeView; }
		
			public class problemsView extends JavaTreeViewNodeBase
	{

		
								public problemsView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Problems View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ObjectDependenciesTreeView extends JavaTreeViewNodeBase
	{

		
								public ObjectDependenciesTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Object Dependencies");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ErrorLogTreeView extends JavaTreeViewNodeBase
	{

		
								public ErrorLogTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Error Log");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpertConsoleEditor extends JavaEditorNodeBase
	{

		
								public ExpertConsoleEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Expert Console");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("expert Console").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ErrorLogToolBar extends JavaToolBarNodeBase
	{

		
								public ErrorLogToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Error Log Tool Bar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetViewToolBar extends JavaToolBarNodeBase
	{

		
								public TargetViewToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Target View Tool Bar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetViewTreeView extends JavaTreeViewNodeBase
	{

		
			private DeleteTargetMenu DeleteTargetMenu;
						public TargetViewTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DeleteTargetMenu = new DeleteTargetMenu(this, applicationModel);

			setDisplayName("Target View Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DeleteTargetMenu DeleteTargetMenu() { return DeleteTargetMenu; }
		
			public class DeleteTargetMenu extends JavaMenuNodeBase
	{

		
								public DeleteTargetMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete Target");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Delete Target").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class preferencesWindow extends JavaWindowNodeBase
	{

		
			private Tree Tree;
	private oKButton oKButton;
	private ClasspathVariablesScreen ClasspathVariablesScreen;
	private newVariableEntryWindow newVariableEntryWindow;
	private classpathVariablesChangedWindow classpathVariablesChangedWindow;
	private ApplyAndCloseButton ApplyAndCloseButton;
	private CobolclipseEditorPreferencesWindow CobolclipseEditorPreferencesWindow;
	private HoverEnabledCheckBox HoverEnabledCheckBox;
	private ShowLineNumbersCheckBox ShowLineNumbersCheckBox;
	private SyntaxElementTreeView SyntaxElementTreeView;
	private CodeTranslationScreen CodeTranslationScreen;
	private CobolclipseEditorScreen CobolclipseEditorScreen;
						public preferencesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Tree = new Tree(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		CobolclipseEditorPreferencesWindow = new CobolclipseEditorPreferencesWindow(this, applicationModel);
		HoverEnabledCheckBox = new HoverEnabledCheckBox(this, applicationModel);
		ShowLineNumbersCheckBox = new ShowLineNumbersCheckBox(this, applicationModel);
		SyntaxElementTreeView = new SyntaxElementTreeView(this, applicationModel);
		CodeTranslationScreen = new CodeTranslationScreen(this, applicationModel);
		CobolclipseEditorScreen = new CobolclipseEditorScreen(this, applicationModel);
			
			setDisplayName("Preferences Window");
		}
				public preferencesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tree = new Tree(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		CobolclipseEditorPreferencesWindow = new CobolclipseEditorPreferencesWindow(this, applicationModel);
		HoverEnabledCheckBox = new HoverEnabledCheckBox(this, applicationModel);
		ShowLineNumbersCheckBox = new ShowLineNumbersCheckBox(this, applicationModel);
		SyntaxElementTreeView = new SyntaxElementTreeView(this, applicationModel);
		CodeTranslationScreen = new CodeTranslationScreen(this, applicationModel);
		CobolclipseEditorScreen = new CobolclipseEditorScreen(this, applicationModel);

			setDisplayName("Preferences Window");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tree Tree() { return Tree; }
		public oKButton oKButton() { return oKButton; }
		public ClasspathVariablesScreen ClasspathVariablesScreen() { return ClasspathVariablesScreen; }
		public newVariableEntryWindow newVariableEntryWindow() { return newVariableEntryWindow; }
		public classpathVariablesChangedWindow classpathVariablesChangedWindow() { return classpathVariablesChangedWindow; }
		public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public CobolclipseEditorPreferencesWindow CobolclipseEditorPreferencesWindow() { return CobolclipseEditorPreferencesWindow; }
		public HoverEnabledCheckBox HoverEnabledCheckBox() { return HoverEnabledCheckBox; }
		public ShowLineNumbersCheckBox ShowLineNumbersCheckBox() { return ShowLineNumbersCheckBox; }
		public SyntaxElementTreeView SyntaxElementTreeView() { return SyntaxElementTreeView; }
		public CodeTranslationScreen CodeTranslationScreen() { return CodeTranslationScreen; }
		public CobolclipseEditorScreen CobolclipseEditorScreen() { return CobolclipseEditorScreen; }
		
			public class Tree extends JavaTreeViewNodeBase
	{

		
								public Tree(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClasspathVariablesScreen extends JavaUiObjectNodeBase
	{

		
			private newButton newButton;
						public ClasspathVariablesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					newButton = new newButton(this, applicationModel);

			setDisplayName("Classpath Variables Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public newButton newButton() { return newButton; }
		
			public class newButton extends JavaButtonNodeBase
	{

		
								public newButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("New...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newVariableEntryWindow extends JavaWindowNodeBase
	{

		
			private oKButton oKButton;
	private pathEditor pathEditor;
	private nameEditor nameEditor;
						public newVariableEntryWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
			
			setDisplayName("New Variable Entry");
		}
				public newVariableEntryWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);

			setDisplayName("New Variable Entry");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Variable Entry").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		public pathEditor pathEditor() { return pathEditor; }
		public nameEditor nameEditor() { return nameEditor; }
		
			public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pathEditor extends JavaEditorNodeBase
	{

		
								public pathEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Path:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nameEditor extends JavaEditorNodeBase
	{

		
								public nameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class classpathVariablesChangedWindow extends JavaWindowNodeBase
	{

		
			private yesButton yesButton;
						public classpathVariablesChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					yesButton = new yesButton(this, applicationModel);
			
			setDisplayName("Classpath Variables Changed");
		}
				public classpathVariablesChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					yesButton = new yesButton(this, applicationModel);

			setDisplayName("Classpath Variables Changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Classpath Variables Changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public yesButton yesButton() { return yesButton; }
		
			public class yesButton extends JavaButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ApplyAndCloseButton extends JavaButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply And Close Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolclipseEditorPreferencesWindow extends JavaUiObjectNodeBase
	{

		
								public CobolclipseEditorPreferencesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolclipseEditorPreferencesWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HoverEnabledCheckBox extends JavaCheckBoxNodeBase
	{

		
								public HoverEnabledCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HoverEnabledCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Hover Enabled").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowLineNumbersCheckBox extends JavaCheckBoxNodeBase
	{

		
								public ShowLineNumbersCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show line numbers");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Show line numbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SyntaxElementTreeView extends JavaTreeViewNodeBase
	{

		
								public SyntaxElementTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Syntax Element");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Syntax Element").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CodeTranslationScreen extends JavaUiObjectNodeBase
	{

		
			private CodeTranslationList CodeTranslationList;
	private TranslateCodePartsCheckBox TranslateCodePartsCheckBox;
	private TranslateWhenSavingEditorCheckBox TranslateWhenSavingEditorCheckBox;
						public CodeTranslationScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CodeTranslationList = new CodeTranslationList(this, applicationModel);
		TranslateCodePartsCheckBox = new TranslateCodePartsCheckBox(this, applicationModel);
		TranslateWhenSavingEditorCheckBox = new TranslateWhenSavingEditorCheckBox(this, applicationModel);

			setDisplayName("Code Translation Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CodeTranslationList CodeTranslationList() { return CodeTranslationList; }
		public TranslateCodePartsCheckBox TranslateCodePartsCheckBox() { return TranslateCodePartsCheckBox; }
		public TranslateWhenSavingEditorCheckBox TranslateWhenSavingEditorCheckBox() { return TranslateWhenSavingEditorCheckBox; }
		
			public class CodeTranslationList extends JavaListNodeBase
	{

		
								public CodeTranslationList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Code Translation");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TranslateCodePartsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public TranslateCodePartsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Translate code parts");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Translate code parts").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TranslateWhenSavingEditorCheckBox extends JavaCheckBoxNodeBase
	{

		
								public TranslateWhenSavingEditorCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Translate when saving editor");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Translate when saving editor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CobolclipseEditorScreen extends JavaUiObjectNodeBase
	{

		
			private RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox;
						public CobolclipseEditorScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox = new RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox(this, applicationModel);

			setDisplayName("Cobolclipse Editor Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox() { return RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox; }
		
			public class RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox extends JavaCheckBoxNodeBase
	{

		
								public RemoveTrailingWhiteSpacesOnAllLinesOnEditorSaveCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Remove trailing white spaces on all lines on editor save");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Remove trailing white spaces on all lines on editor save").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class WindowMenu extends JavaMenuNodeBase
	{

		
			private PreferencesMenu PreferencesMenu;
	private ShowViewMenu ShowViewMenu;
	private EditorMenu EditorMenu;
						public WindowMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PreferencesMenu = new PreferencesMenu(this, applicationModel);
		ShowViewMenu = new ShowViewMenu(this, applicationModel);
		EditorMenu = new EditorMenu(this, applicationModel);

			setDisplayName("Window Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Window").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PreferencesMenu PreferencesMenu() { return PreferencesMenu; }
		public ShowViewMenu ShowViewMenu() { return ShowViewMenu; }
		public EditorMenu EditorMenu() { return EditorMenu; }
		
			public class PreferencesMenu extends JavaMenuNodeBase
	{

		
								public PreferencesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Preferences Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowViewMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public ShowViewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("Show View Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class EditorMenu extends JavaMenuNodeBase
	{

		
			private ZoomInMenu ZoomInMenu;
						public EditorMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ZoomInMenu = new ZoomInMenu(this, applicationModel);

			setDisplayName("Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Editor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ZoomInMenu ZoomInMenu() { return ZoomInMenu; }
		
			public class ZoomInMenu extends JavaMenuNodeBase
	{

		
								public ZoomInMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Zoom In");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Zoom In").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class showViewWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
	private OpenButton OpenButton;
	private TextEditor TextEditor;
						public showViewWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
		TextEditor = new TextEditor(this, applicationModel);
			
			setDisplayName("Show View");
		}
				public showViewWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
		TextEditor = new TextEditor(this, applicationModel);

			setDisplayName("Show View");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		public OpenButton OpenButton() { return OpenButton; }
		public TextEditor TextEditor() { return TextEditor; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenButton extends JavaButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OpenButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TextEditor extends JavaEditorNodeBase
	{

		
								public TextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Text Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProblemsTreeView extends JavaTreeViewNodeBase
	{

		
								public ProblemsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Problems Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("0 items").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewProjectWindow extends JavaWindowNodeBase
	{

		
			private finishButton finishButton;
	private nextButton nextButton;
	private wizardsTreeView wizardsTreeView;
	private projectNameEditor projectNameEditor;
						public NewProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					finishButton = new finishButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		wizardsTreeView = new wizardsTreeView(this, applicationModel);
		projectNameEditor = new projectNameEditor(this, applicationModel);
			
			setDisplayName("New Project");
		}
				public NewProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					finishButton = new finishButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		wizardsTreeView = new wizardsTreeView(this, applicationModel);
		projectNameEditor = new projectNameEditor(this, applicationModel);

			setDisplayName("New Project");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public finishButton finishButton() { return finishButton; }
		public nextButton nextButton() { return nextButton; }
		public wizardsTreeView wizardsTreeView() { return wizardsTreeView; }
		public projectNameEditor projectNameEditor() { return projectNameEditor; }
		
			public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nextButton extends JavaButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NextButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class wizardsTreeView extends JavaTreeViewNodeBase
	{

		
								public wizardsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class projectNameEditor extends JavaEditorNodeBase
	{

		
								public projectNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class yesButton extends JavaButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class addCobolNatureWindow extends JavaWindowNodeBase
	{

		
			private openSystemsRadioButton openSystemsRadioButton;
	private oKButton oKButton;
						public addCobolNatureWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					openSystemsRadioButton = new openSystemsRadioButton(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Add Cobol nature");
		}
				public addCobolNatureWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					openSystemsRadioButton = new openSystemsRadioButton(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Add Cobol nature");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Add Cobol nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public openSystemsRadioButton openSystemsRadioButton() { return openSystemsRadioButton; }
		public oKButton oKButton() { return oKButton; }
		
			public class openSystemsRadioButton extends JavaRadioButtonNodeBase
	{

		
								public openSystemsRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open Systems");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("Open Systems").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PropertiesWindow extends JavaWindowNodeBase
	{

		
			private Tree Tree;
	private ApplyAndCloseButton ApplyAndCloseButton;
	private cobolProjectPropertiesScreen cobolProjectPropertiesScreen;
	private newVariableEntryWindow newVariableEntryWindow;
	private classpathVariablesChangedWindow classpathVariablesChangedWindow;
	private folderSelectionWindow folderSelectionWindow;
	private DynamicCallResolutionCheckBox DynamicCallResolutionCheckBox;
	private SettingsChangedWindow SettingsChangedWindow;
	private SelectTargetWindow SelectTargetWindow;
						public PropertiesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		cobolProjectPropertiesScreen = new cobolProjectPropertiesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		folderSelectionWindow = new folderSelectionWindow(this, applicationModel);
		DynamicCallResolutionCheckBox = new DynamicCallResolutionCheckBox(this, applicationModel);
		SettingsChangedWindow = new SettingsChangedWindow(this, applicationModel);
		SelectTargetWindow = new SelectTargetWindow(this, applicationModel);
			
			setDisplayName("Properties");
		}
				public PropertiesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		cobolProjectPropertiesScreen = new cobolProjectPropertiesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		folderSelectionWindow = new folderSelectionWindow(this, applicationModel);
		DynamicCallResolutionCheckBox = new DynamicCallResolutionCheckBox(this, applicationModel);
		SettingsChangedWindow = new SettingsChangedWindow(this, applicationModel);
		SelectTargetWindow = new SelectTargetWindow(this, applicationModel);

			setDisplayName("Properties");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty("Properties .*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tree Tree() { return Tree; }
		public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public cobolProjectPropertiesScreen cobolProjectPropertiesScreen() { return cobolProjectPropertiesScreen; }
		public newVariableEntryWindow newVariableEntryWindow() { return newVariableEntryWindow; }
		public classpathVariablesChangedWindow classpathVariablesChangedWindow() { return classpathVariablesChangedWindow; }
		public folderSelectionWindow folderSelectionWindow() { return folderSelectionWindow; }
		public DynamicCallResolutionCheckBox DynamicCallResolutionCheckBox() { return DynamicCallResolutionCheckBox; }
		public SettingsChangedWindow SettingsChangedWindow() { return SettingsChangedWindow; }
		public SelectTargetWindow SelectTargetWindow() { return SelectTargetWindow; }
		
			public class Tree extends JavaTreeViewNodeBase
	{

		
								public Tree(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplyAndCloseButton extends JavaButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply and Close");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cobolProjectPropertiesScreen extends JavaUiObjectNodeBase
	{

		
			private selectButton selectButton;
	private SelectTargetButton SelectTargetButton;
						public cobolProjectPropertiesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					selectButton = new selectButton(this, applicationModel);
		SelectTargetButton = new SelectTargetButton(this, applicationModel);

			setDisplayName("Cobol Project Properties Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public selectButton selectButton() { return selectButton; }
		public SelectTargetButton SelectTargetButton() { return SelectTargetButton; }
		
			public class selectButton extends JavaButtonNodeBase
	{

		
								public selectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Select...").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectTargetButton extends JavaButtonNodeBase
	{

		
								public SelectTargetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Target");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("Select...").label("Select...").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newVariableEntryWindow extends JavaWindowNodeBase
	{

		
			private oKButton oKButton;
	private pathEditor pathEditor;
	private nameEditor nameEditor;
						public newVariableEntryWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
			
			setDisplayName("New Variable Entry");
		}
				public newVariableEntryWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);

			setDisplayName("New Variable Entry");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Variable Entry").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		public pathEditor pathEditor() { return pathEditor; }
		public nameEditor nameEditor() { return nameEditor; }
		
			public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pathEditor extends JavaEditorNodeBase
	{

		
								public pathEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Path:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nameEditor extends JavaEditorNodeBase
	{

		
								public nameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class classpathVariablesChangedWindow extends JavaWindowNodeBase
	{

		
			private yesButton yesButton;
						public classpathVariablesChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					yesButton = new yesButton(this, applicationModel);
			
			setDisplayName("Classpath Variables Changed");
		}
				public classpathVariablesChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					yesButton = new yesButton(this, applicationModel);

			setDisplayName("Classpath Variables Changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Classpath Variables Changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public yesButton yesButton() { return yesButton; }
		
			public class yesButton extends JavaButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class folderSelectionWindow extends JavaWindowNodeBase
	{

		
			private selectSourceFolderTreeView selectSourceFolderTreeView;
	private oKButton oKButton;
						public folderSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					selectSourceFolderTreeView = new selectSourceFolderTreeView(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Folder Selection");
		}
				public folderSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					selectSourceFolderTreeView = new selectSourceFolderTreeView(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Folder Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Folder Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public selectSourceFolderTreeView selectSourceFolderTreeView() { return selectSourceFolderTreeView; }
		public oKButton oKButton() { return oKButton; }
		
			public class selectSourceFolderTreeView extends JavaTreeViewNodeBase
	{

		
								public selectSourceFolderTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select source folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Select source folder:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DynamicCallResolutionCheckBox extends JavaCheckBoxNodeBase
	{

		
								public DynamicCallResolutionCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Dynamic call resolution");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Dynamic call resolution").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SettingsChangedWindow extends JavaWindowNodeBase
	{

		
			private YesButton YesButton;
						public SettingsChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					YesButton = new YesButton(this, applicationModel);
			
			setDisplayName("Settings changed");
		}
				public SettingsChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					YesButton = new YesButton(this, applicationModel);

			setDisplayName("Settings changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Settings changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public YesButton YesButton() { return YesButton; }
		
			public class YesButton extends JavaButtonNodeBase
	{

		
								public YesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SelectTargetWindow extends JavaWindowNodeBase
	{

		
			private SelectTargetTable SelectTargetTable;
	private OKButton OKButton;
	private CancelButton CancelButton;
						public SelectTargetWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SelectTargetTable = new SelectTargetTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Select target");
		}
				public SelectTargetWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectTargetTable = new SelectTargetTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Select target");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Select target").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectTargetTable SelectTargetTable() { return SelectTargetTable; }
		public OKButton OKButton() { return OKButton; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class SelectTargetTable extends JavaTableNodeBase
	{

		
								public SelectTargetTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Target Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class FiltersAndCustomizationMenu extends JavaMenuNodeBase
	{

		
								public FiltersAndCustomizationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Filters and Customization...");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Filters and Customization...").nativeClass("org.eclipse.swt.widgets.MenuItem").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewCobolObjectWindow extends JavaWindowNodeBase
	{

		
			private finishButton finishButton;
	private cobolObjectNameEditor cobolObjectNameEditor;
	private cBLProgramRadioButton cBLProgramRadioButton;
	private nextButton nextButton;
	private enterOrSelectTheParentFolderTreeView enterOrSelectTheParentFolderTreeView;
	private CPYCopybookRadioButton CPYCopybookRadioButton;
						public NewCobolObjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					finishButton = new finishButton(this, applicationModel);
		cobolObjectNameEditor = new cobolObjectNameEditor(this, applicationModel);
		cBLProgramRadioButton = new cBLProgramRadioButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		enterOrSelectTheParentFolderTreeView = new enterOrSelectTheParentFolderTreeView(this, applicationModel);
		CPYCopybookRadioButton = new CPYCopybookRadioButton(this, applicationModel);
			
			setDisplayName("New Cobol object");
		}
				public NewCobolObjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					finishButton = new finishButton(this, applicationModel);
		cobolObjectNameEditor = new cobolObjectNameEditor(this, applicationModel);
		cBLProgramRadioButton = new cBLProgramRadioButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		enterOrSelectTheParentFolderTreeView = new enterOrSelectTheParentFolderTreeView(this, applicationModel);
		CPYCopybookRadioButton = new CPYCopybookRadioButton(this, applicationModel);

			setDisplayName("New Cobol object");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Cobol object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public finishButton finishButton() { return finishButton; }
		public cobolObjectNameEditor cobolObjectNameEditor() { return cobolObjectNameEditor; }
		public cBLProgramRadioButton cBLProgramRadioButton() { return cBLProgramRadioButton; }
		public nextButton nextButton() { return nextButton; }
		public enterOrSelectTheParentFolderTreeView enterOrSelectTheParentFolderTreeView() { return enterOrSelectTheParentFolderTreeView; }
		public CPYCopybookRadioButton CPYCopybookRadioButton() { return CPYCopybookRadioButton; }
		
			public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cobolObjectNameEditor extends JavaEditorNodeBase
	{

		
								public cobolObjectNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:                     ");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:                     ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cBLProgramRadioButton extends JavaRadioButtonNodeBase
	{

		
								public cBLProgramRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CBL (program)");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("CBL (program)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nextButton extends JavaButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class enterOrSelectTheParentFolderTreeView extends JavaTreeViewNodeBase
	{

		
								public enterOrSelectTheParentFolderTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enter or select the parent folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Enter or select the parent folder:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CPYCopybookRadioButton extends JavaRadioButtonNodeBase
	{

		
								public CPYCopybookRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CPY (copybook)");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("CPY (copybook)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NavigatorTabControl extends JavaTabControlNodeBase
	{

		
			private NavigatorView NavigatorView;
	private InitialComposite InitialComposite;
	private ToolBar ToolBar;
						public NavigatorTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NavigatorView = new NavigatorView(this, applicationModel);
		InitialComposite = new InitialComposite(this, applicationModel);
		ToolBar = new ToolBar(this, applicationModel);

			setDisplayName("Navigator Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NavigatorView NavigatorView() { return NavigatorView; }
		public InitialComposite InitialComposite() { return InitialComposite; }
		public ToolBar ToolBar() { return ToolBar; }
		
			public class NavigatorView extends JavaTreeViewNodeBase
	{

		
			private NewMenu NewMenu;
	private cobolClipseMenu cobolClipseMenu;
	private propertiesMenu propertiesMenu;
						public NavigatorView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewMenu = new NewMenu(this, applicationModel);
		cobolClipseMenu = new cobolClipseMenu(this, applicationModel);
		propertiesMenu = new propertiesMenu(this, applicationModel);

			setDisplayName("Navigator View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewMenu NewMenu() { return NewMenu; }
		public cobolClipseMenu cobolClipseMenu() { return cobolClipseMenu; }
		public propertiesMenu propertiesMenu() { return propertiesMenu; }
		
			public class NewMenu extends JavaMenuNodeBase
	{

		
			private newFolderMenu newFolderMenu;
	private newCobolObjectMenu newCobolObjectMenu;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					newFolderMenu = new newFolderMenu(this, applicationModel);
		newCobolObjectMenu = new newCobolObjectMenu(this, applicationModel);

			setDisplayName("New Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("New").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public newFolderMenu newFolderMenu() { return newFolderMenu; }
		public newCobolObjectMenu newCobolObjectMenu() { return newCobolObjectMenu; }
		
			public class newFolderMenu extends JavaMenuNodeBase
	{

		
								public newFolderMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newCobolObjectMenu extends JavaMenuNodeBase
	{

		
								public newCobolObjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol Object");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Cobol Object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cobolClipseMenu extends JavaMenuNodeBase
	{

		
			private addCobolNatureMenu addCobolNatureMenu;
	private PreviewAssembledMenu PreviewAssembledMenu;
						public cobolClipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					addCobolNatureMenu = new addCobolNatureMenu(this, applicationModel);
		PreviewAssembledMenu = new PreviewAssembledMenu(this, applicationModel);

			setDisplayName("CobolClipseMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("cobolclipse").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public addCobolNatureMenu addCobolNatureMenu() { return addCobolNatureMenu; }
		public PreviewAssembledMenu PreviewAssembledMenu() { return PreviewAssembledMenu; }
		
			public class addCobolNatureMenu extends JavaMenuNodeBase
	{

		
								public addCobolNatureMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddCobolNatureMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add Cobol Nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PreviewAssembledMenu extends JavaMenuNodeBase
	{

		
								public PreviewAssembledMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PreviewAssembledMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Preview assembled").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class propertiesMenu extends JavaMenuNodeBase
	{

		
								public propertiesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Properties");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Properties").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InitialComposite extends JavaUiObjectNodeBase
	{

		
			private CreateProjectHyperlink CreateProjectHyperlink;
						public InitialComposite(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateProjectHyperlink = new CreateProjectHyperlink(this, applicationModel);

			setDisplayName("Initial composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateProjectHyperlink CreateProjectHyperlink() { return CreateProjectHyperlink; }
		
			public class CreateProjectHyperlink extends JavaUiObjectNodeBase
	{

		
								public CreateProjectHyperlink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create a project Hyperlink");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.ui.forms.widgets.Hyperlink").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ToolBar extends JavaToolBarNodeBase
	{

		
								public ToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProjectExplorerTabControl extends JavaTabControlNodeBase
	{

		
			private ProjectExplorerTreeView ProjectExplorerTreeView;
	private InitialComposite InitialComposite;
	private ToolBar ToolBar;
	private ProjectExplorerViewMenuToolbar ProjectExplorerViewMenuToolbar;
						public ProjectExplorerTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ProjectExplorerTreeView = new ProjectExplorerTreeView(this, applicationModel);
		InitialComposite = new InitialComposite(this, applicationModel);
		ToolBar = new ToolBar(this, applicationModel);
		ProjectExplorerViewMenuToolbar = new ProjectExplorerViewMenuToolbar(this, applicationModel);

			setDisplayName("Project Explorer");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ProjectExplorerTreeView ProjectExplorerTreeView() { return ProjectExplorerTreeView; }
		public InitialComposite InitialComposite() { return InitialComposite; }
		public ToolBar ToolBar() { return ToolBar; }
		public ProjectExplorerViewMenuToolbar ProjectExplorerViewMenuToolbar() { return ProjectExplorerViewMenuToolbar; }
		
			public class ProjectExplorerTreeView extends JavaTreeViewNodeBase
	{

		
			private NewMenu NewMenu;
	private cobolClipseMenu cobolClipseMenu;
	private propertiesMenu propertiesMenu;
	private OpenWithMenu OpenWithMenu;
	private ImportMenu ImportMenu;
	private MeeclipseMenu MeeclipseMenu;
	private RefreshMenu RefreshMenu;
	private RefactorMenu RefactorMenu;
	private BuildPathMenu BuildPathMenu;
	private expertMenu expertMenu;
	private InnowakeRefactoringMenu InnowakeRefactoringMenu;
	private Delete Delete;
						public ProjectExplorerTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewMenu = new NewMenu(this, applicationModel);
		cobolClipseMenu = new cobolClipseMenu(this, applicationModel);
		propertiesMenu = new propertiesMenu(this, applicationModel);
		OpenWithMenu = new OpenWithMenu(this, applicationModel);
		ImportMenu = new ImportMenu(this, applicationModel);
		MeeclipseMenu = new MeeclipseMenu(this, applicationModel);
		RefreshMenu = new RefreshMenu(this, applicationModel);
		RefactorMenu = new RefactorMenu(this, applicationModel);
		BuildPathMenu = new BuildPathMenu(this, applicationModel);
		expertMenu = new expertMenu(this, applicationModel);
		InnowakeRefactoringMenu = new InnowakeRefactoringMenu(this, applicationModel);
		Delete = new Delete(this, applicationModel);

			setDisplayName("Project Explorer");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewMenu NewMenu() { return NewMenu; }
		public cobolClipseMenu cobolClipseMenu() { return cobolClipseMenu; }
		public propertiesMenu propertiesMenu() { return propertiesMenu; }
		public OpenWithMenu OpenWithMenu() { return OpenWithMenu; }
		public ImportMenu ImportMenu() { return ImportMenu; }
		public MeeclipseMenu MeeclipseMenu() { return MeeclipseMenu; }
		public RefreshMenu RefreshMenu() { return RefreshMenu; }
		public RefactorMenu RefactorMenu() { return RefactorMenu; }
		public BuildPathMenu BuildPathMenu() { return BuildPathMenu; }
		public expertMenu expertMenu() { return expertMenu; }
		public InnowakeRefactoringMenu InnowakeRefactoringMenu() { return InnowakeRefactoringMenu; }
		public Delete Delete() { return Delete; }
		
			public class NewMenu extends JavaMenuNodeBase
	{

		
			private newFolderMenu newFolderMenu;
	private newCobolObjectMenu newCobolObjectMenu;
	private FileMenu FileMenu;
	private JavaProjectMenu JavaProjectMenu;
	private OtherMenu OtherMenu;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					newFolderMenu = new newFolderMenu(this, applicationModel);
		newCobolObjectMenu = new newCobolObjectMenu(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		JavaProjectMenu = new JavaProjectMenu(this, applicationModel);
		OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("New Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("New").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public newFolderMenu newFolderMenu() { return newFolderMenu; }
		public newCobolObjectMenu newCobolObjectMenu() { return newCobolObjectMenu; }
		public FileMenu FileMenu() { return FileMenu; }
		public JavaProjectMenu JavaProjectMenu() { return JavaProjectMenu; }
		public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class newFolderMenu extends JavaMenuNodeBase
	{

		
								public newFolderMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newCobolObjectMenu extends JavaMenuNodeBase
	{

		
								public newCobolObjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol Object");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Cobol Object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FileMenu extends JavaMenuNodeBase
	{

		
								public FileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("File");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JavaProjectMenu extends JavaMenuNodeBase
	{

		
								public JavaProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Java Project");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Java Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Other");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cobolClipseMenu extends JavaMenuNodeBase
	{

		
			private addCobolNatureMenu addCobolNatureMenu;
	private PreviewAssembledMenu PreviewAssembledMenu;
						public cobolClipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					addCobolNatureMenu = new addCobolNatureMenu(this, applicationModel);
		PreviewAssembledMenu = new PreviewAssembledMenu(this, applicationModel);

			setDisplayName("CobolClipseMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("cobolclipse").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public addCobolNatureMenu addCobolNatureMenu() { return addCobolNatureMenu; }
		public PreviewAssembledMenu PreviewAssembledMenu() { return PreviewAssembledMenu; }
		
			public class addCobolNatureMenu extends JavaMenuNodeBase
	{

		
								public addCobolNatureMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddCobolNatureMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add Cobol Nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PreviewAssembledMenu extends JavaMenuNodeBase
	{

		
								public PreviewAssembledMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PreviewAssembledMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Preview assembled").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class propertiesMenu extends JavaMenuNodeBase
	{

		
								public propertiesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Properties");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Properties").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenWithMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
	private newCobolObjectMenu newCobolObjectMenu;
	private CobolEditor CobolEditor;
						public OpenWithMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);
		newCobolObjectMenu = new newCobolObjectMenu(this, applicationModel);
		CobolEditor = new CobolEditor(this, applicationModel);

			setDisplayName("OpenWithMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Open With").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		public newCobolObjectMenu newCobolObjectMenu() { return newCobolObjectMenu; }
		public CobolEditor CobolEditor() { return CobolEditor; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newCobolObjectMenu extends JavaMenuNodeBase
	{

		
								public newCobolObjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol Object");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Cobol Object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolEditor extends JavaMenuNodeBase
	{

		
								public CobolEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Cobol Editor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ImportMenu extends JavaMenuNodeBase
	{

		
								public ImportMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Import");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Import...").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MeeclipseMenu extends JavaMenuNodeBase
	{

		
			private AddMeeclipseNatureMenu AddMeeclipseNatureMenu;
						public MeeclipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddMeeclipseNatureMenu = new AddMeeclipseNatureMenu(this, applicationModel);

			setDisplayName("Meeclipse");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("meeclipse").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddMeeclipseNatureMenu AddMeeclipseNatureMenu() { return AddMeeclipseNatureMenu; }
		
			public class AddMeeclipseNatureMenu extends JavaMenuNodeBase
	{

		
								public AddMeeclipseNatureMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add Meeclipse Nature");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add meeclipse Nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RefreshMenu extends JavaMenuNodeBase
	{

		
								public RefreshMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Refresh");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Refresh").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RefactorMenu extends JavaMenuNodeBase
	{

		
			private MoveMenu MoveMenu;
	private RenameMenu RenameMenu;
						public RefactorMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					MoveMenu = new MoveMenu(this, applicationModel);
		RenameMenu = new RenameMenu(this, applicationModel);

			setDisplayName("Refactor");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Refactor").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public MoveMenu MoveMenu() { return MoveMenu; }
		public RenameMenu RenameMenu() { return RenameMenu; }
		
			public class MoveMenu extends JavaMenuNodeBase
	{

		
								public MoveMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Move");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Move...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RenameMenu extends JavaMenuNodeBase
	{

		
								public RenameMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Rename");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Rename...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BuildPathMenu extends JavaMenuNodeBase
	{

		
			private AddtoBuildpathMenu AddtoBuildpathMenu;
	private AddExternalArchivesMenu AddExternalArchivesMenu;
						public BuildPathMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddtoBuildpathMenu = new AddtoBuildpathMenu(this, applicationModel);
		AddExternalArchivesMenu = new AddExternalArchivesMenu(this, applicationModel);

			setDisplayName("Build Path Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Build Path").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddtoBuildpathMenu AddtoBuildpathMenu() { return AddtoBuildpathMenu; }
		public AddExternalArchivesMenu AddExternalArchivesMenu() { return AddExternalArchivesMenu; }
		
			public class AddtoBuildpathMenu extends JavaMenuNodeBase
	{

		
								public AddtoBuildpathMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddtoBuildpathMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Add to Build Path").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddExternalArchivesMenu extends JavaMenuNodeBase
	{

		
								public AddExternalArchivesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddExternalArchivesMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Add External Archives...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class expertMenu extends JavaMenuNodeBase
	{

		
			private AddNatureandClasspathMenu AddNatureandClasspathMenu;
						public expertMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddNatureandClasspathMenu = new AddNatureandClasspathMenu(this, applicationModel);

			setDisplayName("expertMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("expert").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddNatureandClasspathMenu AddNatureandClasspathMenu() { return AddNatureandClasspathMenu; }
		
			public class AddNatureandClasspathMenu extends JavaMenuNodeBase
	{

		
								public AddNatureandClasspathMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddNatureandClasspathMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Add Nature and Classpath").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InnowakeRefactoringMenu extends JavaMenuNodeBase
	{

		
			private Cobol2JavaMenu Cobol2JavaMenu;
	private Cobol2JavaExampleFilesMenu Cobol2JavaExampleFilesMenu;
	private Cobol2CSharpMenu Cobol2CSharpMenu;
	private Cobol2CSharpExampleFilesMenu Cobol2CSharpExampleFilesMenu;
						public InnowakeRefactoringMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Cobol2JavaMenu = new Cobol2JavaMenu(this, applicationModel);
		Cobol2JavaExampleFilesMenu = new Cobol2JavaExampleFilesMenu(this, applicationModel);
		Cobol2CSharpMenu = new Cobol2CSharpMenu(this, applicationModel);
		Cobol2CSharpExampleFilesMenu = new Cobol2CSharpExampleFilesMenu(this, applicationModel);

			setDisplayName("InnowakeRefactoringMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("innoWake Refactoring").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Cobol2JavaMenu Cobol2JavaMenu() { return Cobol2JavaMenu; }
		public Cobol2JavaExampleFilesMenu Cobol2JavaExampleFilesMenu() { return Cobol2JavaExampleFilesMenu; }
		public Cobol2CSharpMenu Cobol2CSharpMenu() { return Cobol2CSharpMenu; }
		public Cobol2CSharpExampleFilesMenu Cobol2CSharpExampleFilesMenu() { return Cobol2CSharpExampleFilesMenu; }
		
			public class Cobol2JavaMenu extends JavaMenuNodeBase
	{

		
								public Cobol2JavaMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol2JavaMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Cobol 2 Java").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Cobol2JavaExampleFilesMenu extends JavaMenuNodeBase
	{

		
			private GenerateDefaultCobol2JavaPropertiesMenu GenerateDefaultCobol2JavaPropertiesMenu;
						public Cobol2JavaExampleFilesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					GenerateDefaultCobol2JavaPropertiesMenu = new GenerateDefaultCobol2JavaPropertiesMenu(this, applicationModel);

			setDisplayName("Cobol 2 Java Example Files");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Cobol 2 Java example files").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public GenerateDefaultCobol2JavaPropertiesMenu GenerateDefaultCobol2JavaPropertiesMenu() { return GenerateDefaultCobol2JavaPropertiesMenu; }
		
			public class GenerateDefaultCobol2JavaPropertiesMenu extends JavaMenuNodeBase
	{

		
								public GenerateDefaultCobol2JavaPropertiesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Generate Default Cobol 2 Java Properties");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Generate Default Cobol 2 Java Properties").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Cobol2CSharpMenu extends JavaMenuNodeBase
	{

		
								public Cobol2CSharpMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol2C#Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Cobol 2 C#").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Cobol2CSharpExampleFilesMenu extends JavaMenuNodeBase
	{

		
								public Cobol2CSharpExampleFilesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol2C#ExampleFilesMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Cobol 2 C# example files").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Delete extends JavaMenuNodeBase
	{

		
								public Delete(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Delete").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InitialComposite extends JavaUiObjectNodeBase
	{

		
			private CreateProjectHyperlink CreateProjectHyperlink;
						public InitialComposite(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateProjectHyperlink = new CreateProjectHyperlink(this, applicationModel);

			setDisplayName("Initial composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateProjectHyperlink CreateProjectHyperlink() { return CreateProjectHyperlink; }
		
			public class CreateProjectHyperlink extends JavaUiObjectNodeBase
	{

		
								public CreateProjectHyperlink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create a project Hyperlink");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.ui.forms.widgets.Hyperlink").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ToolBar extends JavaToolBarNodeBase
	{

		
								public ToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectExplorerViewMenuToolbar extends JavaToolBarNodeBase
	{

		
								public ProjectExplorerViewMenuToolbar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project Explorer View Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class EditorWindow extends JavaTabControlNodeBase
	{

		
								public EditorWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EditorWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_UNK__Y_SMALL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StyledTextEditor extends JavaEditorNodeBase
	{

		
			private CobolclipseFoldingMenu CobolclipseFoldingMenu;
	private BMSMapPreviewMenu BMSMapPreviewMenu;
	private CopyMenu CopyMenu;
	private PasteMenu PasteMenu;
						public StyledTextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CobolclipseFoldingMenu = new CobolclipseFoldingMenu(this, applicationModel);
		BMSMapPreviewMenu = new BMSMapPreviewMenu(this, applicationModel);
		CopyMenu = new CopyMenu(this, applicationModel);
		PasteMenu = new PasteMenu(this, applicationModel);

			setDisplayName("StyledTextEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CobolclipseFoldingMenu CobolclipseFoldingMenu() { return CobolclipseFoldingMenu; }
		public BMSMapPreviewMenu BMSMapPreviewMenu() { return BMSMapPreviewMenu; }
		public CopyMenu CopyMenu() { return CopyMenu; }
		public PasteMenu PasteMenu() { return PasteMenu; }
		
			public class CobolclipseFoldingMenu extends JavaMenuNodeBase
	{

		
			private CollapseAllCopybook CollapseAllCopybook;
	private ExpandAllCopybookMenu ExpandAllCopybookMenu;
						public CobolclipseFoldingMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CollapseAllCopybook = new CollapseAllCopybook(this, applicationModel);
		ExpandAllCopybookMenu = new ExpandAllCopybookMenu(this, applicationModel);

			setDisplayName("CobolclipseFoldingMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("cobolclipse Folding").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CollapseAllCopybook CollapseAllCopybook() { return CollapseAllCopybook; }
		public ExpandAllCopybookMenu ExpandAllCopybookMenu() { return ExpandAllCopybookMenu; }
		
			public class CollapseAllCopybook extends JavaMenuNodeBase
	{

		
								public CollapseAllCopybook(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CollapseAllCopybook");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Collapse All Copybook").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpandAllCopybookMenu extends JavaMenuNodeBase
	{

		
								public ExpandAllCopybookMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExpandAllCopybookMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Expand All Copybook").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BMSMapPreviewMenu extends JavaMenuNodeBase
	{

		
								public BMSMapPreviewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BMSMapPreviewMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("BMS Map Preview").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CopyMenu extends JavaMenuNodeBase
	{

		
								public CopyMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Copy");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Copy").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PasteMenu extends JavaMenuNodeBase
	{

		
								public PasteMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Paste");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Paste").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newFolderWindow extends JavaWindowNodeBase
	{

		
			private finishButton finishButton;
	private folderNameEditor folderNameEditor;
						public newFolderWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					finishButton = new finishButton(this, applicationModel);
		folderNameEditor = new folderNameEditor(this, applicationModel);
			
			setDisplayName("New Folder");
		}
				public newFolderWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					finishButton = new finishButton(this, applicationModel);
		folderNameEditor = new folderNameEditor(this, applicationModel);

			setDisplayName("New Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public finishButton finishButton() { return finishButton; }
		public folderNameEditor folderNameEditor() { return folderNameEditor; }
		
			public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class folderNameEditor extends JavaEditorNodeBase
	{

		
								public folderNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder Name");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Folder name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class EditorSelectionWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
	private ChooseTheEditorForOpeningESPN01MMapEditor ChooseTheEditorForOpeningESPN01MMapEditor;
						public EditorSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
		ChooseTheEditorForOpeningESPN01MMapEditor = new ChooseTheEditorForOpeningESPN01MMapEditor(this, applicationModel);
			
			setDisplayName("Editor Selection");
		}
				public EditorSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);
		ChooseTheEditorForOpeningESPN01MMapEditor = new ChooseTheEditorForOpeningESPN01MMapEditor(this, applicationModel);

			setDisplayName("Editor Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Editor Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		public ChooseTheEditorForOpeningESPN01MMapEditor ChooseTheEditorForOpeningESPN01MMapEditor() { return ChooseTheEditorForOpeningESPN01MMapEditor; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ChooseTheEditorForOpeningESPN01MMapEditor extends JavaEditorNodeBase
	{

		
								public ChooseTheEditorForOpeningESPN01MMapEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose the editor for opening ESPN01M.map:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Choose the editor for opening ESPN01M.map:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CompositeUiObject extends JavaUiObjectNodeBase
	{

		
								public CompositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(27).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Menu extends JavaMenuNodeBase
	{

		
								public Menu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().nativeClass("org.eclipse.swt.widgets.Menu").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TabFolderTabControl extends JavaTabControlNodeBase
	{

		
								public TabFolderTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TabFolder");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.widgets.TabFolder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BMSPreviewStLabel extends JavaLabelNodeBase
	{

		
								public BMSPreviewStLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BMS preview(st)");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().label("BMS preview").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CompositeRulerCompositeRulerCanvasUiObject extends JavaUiObjectNodeBase
	{

		
			private ShowLineNumbersMenu ShowLineNumbersMenu;
						public CompositeRulerCompositeRulerCanvasUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ShowLineNumbersMenu = new ShowLineNumbersMenu(this, applicationModel);

			setDisplayName("CompositeRuler$CompositeRulerCanvas");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.jface.text.source.CompositeRuler$CompositeRulerCanvas").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ShowLineNumbersMenu ShowLineNumbersMenu() { return ShowLineNumbersMenu; }
		
			public class ShowLineNumbersMenu extends JavaMenuNodeBase
	{

		
								public ShowLineNumbersMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show Line Numbers Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Show Line Numbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class LineNumberRulerColumn2UiObject extends JavaUiObjectNodeBase
	{

		
								public LineNumberRulerColumn2UiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("LineNumberRulerColumn$2");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.jface.text.source.LineNumberRulerColumn$2").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BMSPreviewEditor extends JavaEditorNodeBase
	{

		
								public BMSPreviewEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BMS preview");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("BMS preview").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FieldList extends JavaListNodeBase
	{

		
								public FieldList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Field List");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Field List").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BMSMapView extends JavaUiObjectNodeBase
	{

		
								public BMSMapView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BMSMapView");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(25).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AttributesEditor extends JavaEditorNodeBase
	{

		
								public AttributesEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Attributes");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Attributes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AutomaticMeeclipseWorkspaceSettingsWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
	private CancelButton CancelButton;
	private UseMeeclipseJavaFoldingCheckBox UseMeeclipseJavaFoldingCheckBox;
						public AutomaticMeeclipseWorkspaceSettingsWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		UseMeeclipseJavaFoldingCheckBox = new UseMeeclipseJavaFoldingCheckBox(this, applicationModel);
			
			setDisplayName("Automatic meeclipse workspace settings");
		}
				public AutomaticMeeclipseWorkspaceSettingsWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		UseMeeclipseJavaFoldingCheckBox = new UseMeeclipseJavaFoldingCheckBox(this, applicationModel);

			setDisplayName("Automatic meeclipse workspace settings");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Automatic meeclipse workspace settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		public CancelButton CancelButton() { return CancelButton; }
		public UseMeeclipseJavaFoldingCheckBox UseMeeclipseJavaFoldingCheckBox() { return UseMeeclipseJavaFoldingCheckBox; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UseMeeclipseJavaFoldingCheckBox extends JavaCheckBoxNodeBase
	{

		
								public UseMeeclipseJavaFoldingCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Use meeclipse Java Folding");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Use meeclipse Java Folding").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CreateNewFileWindow extends JavaWindowNodeBase
	{

		
			private FileNameEditor FileNameEditor;
	private FinishButton FinishButton;
						public CreateNewFileWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FileNameEditor = new FileNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("Create New File");
		}
				public CreateNewFileWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FileNameEditor = new FileNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("Create New File");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create New File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FileNameEditor FileNameEditor() { return FileNameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class FileNameEditor extends JavaEditorNodeBase
	{

		
								public FileNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("File name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("File name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ToolBar extends JavaToolBarNodeBase
	{

		
								public ToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").path("ToolBar;CTabFolder;Composite;Composite;Composite;Composite;Composite;Composite;Composite;Shell;").tagName("ToolBar").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ImportWindow extends JavaWindowNodeBase
	{

		
			private FinishButton FinishButton;
	private NextButton NextButton;
	private SelectScreen SelectScreen;
	private FileSystemScreen FileSystemScreen;
						public ImportWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FinishButton = new FinishButton(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		SelectScreen = new SelectScreen(this, applicationModel);
		FileSystemScreen = new FileSystemScreen(this, applicationModel);
			
			setDisplayName("Import");
		}
				public ImportWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FinishButton = new FinishButton(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		SelectScreen = new SelectScreen(this, applicationModel);
		FileSystemScreen = new FileSystemScreen(this, applicationModel);

			setDisplayName("Import");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Import").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FinishButton FinishButton() { return FinishButton; }
		public NextButton NextButton() { return NextButton; }
		public SelectScreen SelectScreen() { return SelectScreen; }
		public FileSystemScreen FileSystemScreen() { return FileSystemScreen; }
		
			public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectScreen extends JavaUiObjectNodeBase
	{

		
			private SelectAnImportWizardTreeView SelectAnImportWizardTreeView;
	private SelectAnImportWizardEditor SelectAnImportWizardEditor;
						public SelectScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectAnImportWizardTreeView = new SelectAnImportWizardTreeView(this, applicationModel);
		SelectAnImportWizardEditor = new SelectAnImportWizardEditor(this, applicationModel);

			setDisplayName("Select Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectAnImportWizardTreeView SelectAnImportWizardTreeView() { return SelectAnImportWizardTreeView; }
		public SelectAnImportWizardEditor SelectAnImportWizardEditor() { return SelectAnImportWizardEditor; }
		
			public class SelectAnImportWizardTreeView extends JavaTreeViewNodeBase
	{

		
								public SelectAnImportWizardTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select an import wizard:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Select an import wizard:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectAnImportWizardEditor extends JavaEditorNodeBase
	{

		
								public SelectAnImportWizardEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select an Import Wizard");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Select an import wizard:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FileSystemScreen extends JavaUiObjectNodeBase
	{

		
			private FromDirectoryList FromDirectoryList;
	private SelectAllButton SelectAllButton;
						public FileSystemScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FromDirectoryList = new FromDirectoryList(this, applicationModel);
		SelectAllButton = new SelectAllButton(this, applicationModel);

			setDisplayName("File System Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FromDirectoryList FromDirectoryList() { return FromDirectoryList; }
		public SelectAllButton SelectAllButton() { return SelectAllButton; }
		
			public class FromDirectoryList extends JavaListNodeBase
	{

		
								public FromDirectoryList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("From directory:");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("From directory:").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectAllButton extends JavaButtonNodeBase
	{

		
								public SelectAllButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select All");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Select All").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class AddMeeclipseNatureWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
						public AddMeeclipseNatureWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Add Meeclipse Nature");
		}
				public AddMeeclipseNatureWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Add Meeclipse Nature");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Add meeclipse Nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class JavaSourceFolderWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
						public JavaSourceFolderWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Java Source Folder");
		}
				public JavaSourceFolderWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Java Source Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Java Source Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FiltersAndCustomizationWindow extends JavaWindowNodeBase
	{

		
			private FiltersTable FiltersTable;
	private OKButton OKButton;
						public FiltersAndCustomizationWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FiltersTable = new FiltersTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Filters and Customization");
		}
				public FiltersAndCustomizationWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FiltersTable = new FiltersTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Filters and Customization");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Filters and Customization").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FiltersTable FiltersTable() { return FiltersTable; }
		public OKButton OKButton() { return OKButton; }
		
			public class FiltersTable extends JavaTableNodeBase
	{

		
								public FiltersTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Filters");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProjectMenu extends JavaMenuNodeBase
	{

		
			private CleanMenu CleanMenu;
						public ProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CleanMenu = new CleanMenu(this, applicationModel);

			setDisplayName("Project");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Project").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CleanMenu CleanMenu() { return CleanMenu; }
		
			public class CleanMenu extends JavaMenuNodeBase
	{

		
								public CleanMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Clean");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Clean...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CleanWindow extends JavaWindowNodeBase
	{

		
			private CleanButton CleanButton;
						public CleanWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CleanButton = new CleanButton(this, applicationModel);
			
			setDisplayName("Clean");
		}
				public CleanWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CleanButton = new CleanButton(this, applicationModel);

			setDisplayName("Clean");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Clean").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CleanButton CleanButton() { return CleanButton; }
		
			public class CleanButton extends JavaButtonNodeBase
	{

		
								public CleanButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Clean");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Clean").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FileMenu extends JavaMenuNodeBase
	{

		
			private RefreshMenu RefreshMenu;
	private NewMenu NewMenu;
						public FileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					RefreshMenu = new RefreshMenu(this, applicationModel);
		NewMenu = new NewMenu(this, applicationModel);

			setDisplayName("File");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("File").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public RefreshMenu RefreshMenu() { return RefreshMenu; }
		public NewMenu NewMenu() { return NewMenu; }
		
			public class RefreshMenu extends JavaMenuNodeBase
	{

		
								public RefreshMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RefreshMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Refresh").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewMenu extends JavaMenuNodeBase
	{

		
			private JavaProjectMenu JavaProjectMenu;
	private OtherMenu OtherMenu;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					JavaProjectMenu = new JavaProjectMenu(this, applicationModel);
		OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("New");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("New").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public JavaProjectMenu JavaProjectMenu() { return JavaProjectMenu; }
		public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class JavaProjectMenu extends JavaMenuNodeBase
	{

		
								public JavaProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Java Project");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Java Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Other");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewJavaProjectWindow extends JavaWindowNodeBase
	{

		
			private ProjectNameEditor ProjectNameEditor;
	private FinishButton FinishButton;
						public NewJavaProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ProjectNameEditor = new ProjectNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("New Java Project");
		}
				public NewJavaProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ProjectNameEditor = new ProjectNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New Java Project");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Java Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ProjectNameEditor ProjectNameEditor() { return ProjectNameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class ProjectNameEditor extends JavaEditorNodeBase
	{

		
								public ProjectNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class MoveWindow extends JavaWindowNodeBase
	{

		
			private ChooseDestinationForTreeView ChooseDestinationForTreeView;
	private OKButton OKButton;
						public MoveWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseDestinationForTreeView = new ChooseDestinationForTreeView(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Move");
		}
				public MoveWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseDestinationForTreeView = new ChooseDestinationForTreeView(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Move");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Move").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseDestinationForTreeView ChooseDestinationForTreeView() { return ChooseDestinationForTreeView; }
		public OKButton OKButton() { return OKButton; }
		
			public class ChooseDestinationForTreeView extends JavaTreeViewNodeBase
	{

		
								public ChooseDestinationForTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose Destination For");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RenameResourceWindow extends JavaWindowNodeBase
	{

		
			private NewNameEditor NewNameEditor;
	private OKButton OKButton;
						public RenameResourceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewNameEditor = new NewNameEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Rename Resource");
		}
				public RenameResourceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNameEditor = new NewNameEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Rename Resource");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Rename Resource").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNameEditor NewNameEditor() { return NewNameEditor; }
		public OKButton OKButton() { return OKButton; }
		
			public class NewNameEditor extends JavaEditorNodeBase
	{

		
								public NewNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("New name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SaveResourceWindow extends JavaWindowNodeBase
	{

		
			private SaveButton SaveButton;
	private DonTSaveButton DonTSaveButton;
	private CancelButton CancelButton;
						public SaveResourceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SaveButton = new SaveButton(this, applicationModel);
		DonTSaveButton = new DonTSaveButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Save Resource");
		}
				public SaveResourceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SaveButton = new SaveButton(this, applicationModel);
		DonTSaveButton = new DonTSaveButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Save Resource");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Save Resource").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SaveButton SaveButton() { return SaveButton; }
		public DonTSaveButton DonTSaveButton() { return DonTSaveButton; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class SaveButton extends JavaButtonNodeBase
	{

		
								public SaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Save");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Save").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DonTSaveButton extends JavaButtonNodeBase
	{

		
								public DonTSaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't Save");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Don't Save").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class OutlineTabControl extends JavaTabControlNodeBase
	{

		
			private OutlineTreeView OutlineTreeView;
						public OutlineTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OutlineTreeView = new OutlineTreeView(this, applicationModel);

			setDisplayName("Outline");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().origLogicalLocation("X_BIG__Y_UNK").nativeClass("org.eclipse.swt.custom.CTabFolder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OutlineTreeView OutlineTreeView() { return OutlineTreeView; }
		
			public class OutlineTreeView extends JavaTreeViewNodeBase
	{

		
								public OutlineTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Outline");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewModuleInfoJavaWindow extends JavaWindowNodeBase
	{

		
			private DonTCreateButton DonTCreateButton;
						public NewModuleInfoJavaWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					DonTCreateButton = new DonTCreateButton(this, applicationModel);
			
			setDisplayName("New module-info.java");
		}
				public NewModuleInfoJavaWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DonTCreateButton = new DonTCreateButton(this, applicationModel);

			setDisplayName("New module-info.java");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New module-info.java").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DonTCreateButton DonTCreateButton() { return DonTCreateButton; }
		
			public class DonTCreateButton extends JavaButtonNodeBase
	{

		
								public DonTCreateButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't Create");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Don't Create").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewWindow extends JavaWindowNodeBase
	{

		
			private NextButton NextButton;
	private SelectAWizardScreen SelectAWizardScreen;
	private FinishButton FinishButton;
						public NewWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NextButton = new NextButton(this, applicationModel);
		SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("New");
		}
				public NewWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NextButton = new NextButton(this, applicationModel);
		SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty("(Select a wizard|New)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NextButton NextButton() { return NextButton; }
		public SelectAWizardScreen SelectAWizardScreen() { return SelectAWizardScreen; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectAWizardScreen extends JavaUiObjectNodeBase
	{

		
			private WizardTreeView WizardTreeView;
						public SelectAWizardScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardTreeView = new WizardTreeView(this, applicationModel);

			setDisplayName("Select a wizard screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardTreeView WizardTreeView() { return WizardTreeView; }
		
			public class WizardTreeView extends JavaTreeViewNodeBase
	{

		
								public WizardTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizard");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FiltersMenu extends JavaMenuNodeBase
	{

		
								public FiltersMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FiltersMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").label("Filters...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JavaElementFiltersWindow extends JavaWindowNodeBase
	{

		
			private javaElementsfiltersTable javaElementsfiltersTable;
	private OKButton OKButton;
						public JavaElementFiltersWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					javaElementsfiltersTable = new javaElementsfiltersTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Java Element Filters");
		}
				public JavaElementFiltersWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					javaElementsfiltersTable = new javaElementsfiltersTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Java Element Filters");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Java Element Filters").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public javaElementsfiltersTable javaElementsfiltersTable() { return javaElementsfiltersTable; }
		public OKButton OKButton() { return OKButton; }
		
			public class javaElementsfiltersTable extends JavaTableNodeBase
	{

		
								public javaElementsfiltersTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select the elements to exclude from the view:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class JARSelectionDialog extends StdDialogNodeBase
	{

		
			private OpenButton OpenButton;
	private FileNameEditField FileNameEditField;
	private ItemsViewUiObject ItemsViewUiObject;
						public JARSelectionDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OpenButton = new OpenButton(this, applicationModel);
		FileNameEditField = new FileNameEditField(this, applicationModel);
		ItemsViewUiObject = new ItemsViewUiObject(this, applicationModel);
			
			setDisplayName("JAR Selection");
		}
				public JARSelectionDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OpenButton = new OpenButton(this, applicationModel);
		FileNameEditField = new FileNameEditField(this, applicationModel);
		ItemsViewUiObject = new ItemsViewUiObject(this, applicationModel);

			setDisplayName("JAR Selection");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("JAR Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OpenButton OpenButton() { return OpenButton; }
		public FileNameEditField FileNameEditField() { return FileNameEditField; }
		public ItemsViewUiObject ItemsViewUiObject() { return ItemsViewUiObject; }
		
			public class OpenButton extends StdButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ButtonDescription.Builder().nativeClass("Button").text("&Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FileNameEditField extends StdEditFieldNodeBase
	{

		
								public FileNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("File name:");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.EditFieldDescription.Builder().attachedText("File &name:").nativeClass("Edit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ItemsViewUiObject extends StdUiObjectNodeBase
	{

		
			private ItemsViewListBox ItemsViewListBox;
						public ItemsViewUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ItemsViewListBox = new ItemsViewListBox(this, applicationModel);

			setDisplayName("Items View");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.UiObjectDescription.Builder().accessibleName("Items View").windowClassRegExp("DirectUIHWND").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ItemsViewListBox ItemsViewListBox() { return ItemsViewListBox; }
		
			public class ItemsViewListBox extends StdListBoxNodeBase
	{

		
								public ItemsViewListBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Items View");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ListBoxDescription.Builder().accessibleName("Items View").attachedText("").nativeClass("list").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class AddNatureAndClasspathWindow extends JavaWindowNodeBase
	{

		
			private CreateExampleScriptsCheckBox CreateExampleScriptsCheckBox;
	private OKButton OKButton;
						public AddNatureAndClasspathWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CreateExampleScriptsCheckBox = new CreateExampleScriptsCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Add Nature and Classpath");
		}
				public AddNatureAndClasspathWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateExampleScriptsCheckBox = new CreateExampleScriptsCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Add Nature and Classpath");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Add Nature and Classpath").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateExampleScriptsCheckBox CreateExampleScriptsCheckBox() { return CreateExampleScriptsCheckBox; }
		public OKButton OKButton() { return OKButton; }
		
			public class CreateExampleScriptsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public CreateExampleScriptsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create example scripts");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Create example scripts (doesn't overwrite existing files).").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ExpertConsoleEditor extends JavaEditorNodeBase
	{

		
								public ExpertConsoleEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("expert Console");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("expert Console").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
						public DeleteWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Delete");
		}
				public DeleteWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Delete").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewTargetWindow extends JavaWindowNodeBase
	{

		
			private AddANewTargetScreen AddANewTargetScreen;
	private FinishButton FinishButton;
	private ScriptFileWindow ScriptFileWindow;
						public NewTargetWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					AddANewTargetScreen = new AddANewTargetScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		ScriptFileWindow = new ScriptFileWindow(this, applicationModel);
			
			setDisplayName("New Target");
		}
				public NewTargetWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddANewTargetScreen = new AddANewTargetScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		ScriptFileWindow = new ScriptFileWindow(this, applicationModel);

			setDisplayName("New Target");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Target").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddANewTargetScreen AddANewTargetScreen() { return AddANewTargetScreen; }
		public FinishButton FinishButton() { return FinishButton; }
		public ScriptFileWindow ScriptFileWindow() { return ScriptFileWindow; }
		
			public class AddANewTargetScreen extends JavaUiObjectNodeBase
	{

		
			private NameEditor NameEditor;
	private TargetTypeList TargetTypeList;
	private ServerTypeList ServerTypeList;
	private ScriptFileButton ScriptFileButton;
	private NextButton NextButton;
						public AddANewTargetScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		TargetTypeList = new TargetTypeList(this, applicationModel);
		ServerTypeList = new ServerTypeList(this, applicationModel);
		ScriptFileButton = new ScriptFileButton(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);

			setDisplayName("Add A New Target Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public TargetTypeList TargetTypeList() { return TargetTypeList; }
		public ServerTypeList ServerTypeList() { return ServerTypeList; }
		public ScriptFileButton ScriptFileButton() { return ScriptFileButton; }
		public NextButton NextButton() { return NextButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name*");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name*").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetTypeList extends JavaListNodeBase
	{

		
								public TargetTypeList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Target Type");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Target Type").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ServerTypeList extends JavaListNodeBase
	{

		
								public ServerTypeList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Server Type");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Server Type").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ScriptFileButton extends JavaButtonNodeBase
	{

		
								public ScriptFileButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Script File ...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("...").label("...").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ScriptFileWindow extends JavaWindowNodeBase
	{

		
			private EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor;
	private MatchingItemsTable MatchingItemsTable;
	private OKButton OKButton;
						public ScriptFileWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor = new EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor(this, applicationModel);
		MatchingItemsTable = new MatchingItemsTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Script File");
		}
				public ScriptFileWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor = new EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor(this, applicationModel);
		MatchingItemsTable = new MatchingItemsTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Script File");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Script File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor() { return EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor; }
		public MatchingItemsTable MatchingItemsTable() { return MatchingItemsTable; }
		public OKButton OKButton() { return OKButton; }
		
			public class EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor extends JavaEditorNodeBase
	{

		
								public EnterResourceNamePrefixPathPrefixOrPatternOrCamelCaseEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enter resource name prefix, path prefix or pattern (?, * or camel case):");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Enter resource name prefix, path prefix or pattern (?, * or camel case):").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MatchingItemsTable extends JavaTableNodeBase
	{

		
								public MatchingItemsTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Matching Items");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class SettingsChangedWindow extends JavaWindowNodeBase
	{

		
			private YesButton YesButton;
						public SettingsChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					YesButton = new YesButton(this, applicationModel);
			
			setDisplayName("Settings changed");
		}
				public SettingsChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					YesButton = new YesButton(this, applicationModel);

			setDisplayName("Settings changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Settings changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public YesButton YesButton() { return YesButton; }
		
			public class YesButton extends JavaButtonNodeBase
	{

		
								public YesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}


			
	public abstract class JavaWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Window, com.hp.lft.sdk.java.WindowDescription> implements com.hp.lft.sdk.java.Window
	{
		public JavaWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public JavaWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaUiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.UiObject, com.hp.lft.sdk.java.UiObjectDescription> implements com.hp.lft.sdk.java.UiObject
	{		
		public JavaUiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaEditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Editor, com.hp.lft.sdk.java.EditorDescription> implements com.hp.lft.sdk.java.Editor
	{		
		public JavaEditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void clickLink(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().clickLink(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public void delete(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().delete(arg0, arg1, arg2, arg3);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void insert(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().insert(arg0, arg1, arg2);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void replace(java.lang.String arg0, int arg1, int arg2, int arg3, int arg4) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().replace(arg0, arg1, arg2, arg3, arg4);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setCursorPosition(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Button, com.hp.lft.sdk.java.ButtonDescription> implements com.hp.lft.sdk.java.Button
	{		
		public JavaButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTreeViewNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TreeView, com.hp.lft.sdk.java.TreeViewDescription> implements com.hp.lft.sdk.java.TreeView
	{		
		public JavaTreeViewNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateNode(com.hp.lft.sdk.java.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public java.lang.String buildNodePath(java.lang.Object... arg0)  
		{
			return getConcrete().buildNodePath(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeader(arg0);
		}

		@Override 
		public int getColumnsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnsCount();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public com.hp.lft.sdk.java.TreeViewNode getNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNode(arg0);
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TreeViewNode> getSelectedNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedNodes();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public int getVisibleNodesCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleNodesCount();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.TreeViewNode arg0, com.hp.lft.sdk.java.TreeViewNode arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.CheckBox, com.hp.lft.sdk.java.CheckBoxDescription> implements com.hp.lft.sdk.java.CheckBox
	{		
		public JavaCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.CheckedState getState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getState();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setState(com.hp.lft.sdk.CheckedState arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setState(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Table, com.hp.lft.sdk.java.TableDescription> implements com.hp.lft.sdk.java.Table
	{		
		public JavaTableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateColumn(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateColumn(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateRow(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void deselectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.TableCell getCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCell(arg0, arg1);
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void selectCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCellsRange(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectCellsRange(int arg0, java.lang.String arg1, int arg2, java.lang.String arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void selectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTabControlNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TabControl, com.hp.lft.sdk.java.TabControlDescription> implements com.hp.lft.sdk.java.TabControl
	{		
		public JavaTabControlNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public void close(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getOrigLogicalLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOrigLogicalLocation();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.lang.String getSelectedTab() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedTab();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public int getTabsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTabsCount();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaToolBarNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.ToolBar, com.hp.lft.sdk.java.ToolBarDescription> implements com.hp.lft.sdk.java.ToolBar
	{		
		public JavaToolBarNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ToolBarButton getButton(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButton(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtons();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getSelectedButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedButtons();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaMenuNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Menu, com.hp.lft.sdk.java.MenuDescription> implements com.hp.lft.sdk.java.Menu
	{		
		public JavaMenuNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public com.hp.lft.sdk.java.Menu getSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenu(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.Menu> getSubMenus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenus();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select();
		}

		@Override 
		public void selectSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectSubMenu(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaListNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.List, com.hp.lft.sdk.java.ListDescription> implements com.hp.lft.sdk.java.List
	{		
		public JavaListNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(com.hp.lft.sdk.java.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.ListItem arg0, com.hp.lft.sdk.java.ListItem arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaRadioButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.RadioButton, com.hp.lft.sdk.java.RadioButtonDescription> implements com.hp.lft.sdk.java.RadioButton
	{		
		public JavaRadioButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void set() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set();
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaLabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Label, com.hp.lft.sdk.java.LabelDescription> implements com.hp.lft.sdk.java.Label
	{		
		public JavaLabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
		
	public abstract class StdDialogNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.stdwin.Dialog, com.hp.lft.sdk.stdwin.DialogDescription> implements com.hp.lft.sdk.stdwin.Dialog
	{
		public StdDialogNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public StdDialogNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Button, com.hp.lft.sdk.stdwin.ButtonDescription> implements com.hp.lft.sdk.stdwin.Button
	{		
		public StdButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.EditField, com.hp.lft.sdk.stdwin.EditFieldDescription> implements com.hp.lft.sdk.stdwin.EditField
	{		
		public StdEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdUiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.UiObject, com.hp.lft.sdk.stdwin.UiObjectDescription> implements com.hp.lft.sdk.stdwin.UiObject
	{		
		public StdUiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public com.hp.lft.sdk.ScrollInfo getHorizontalScroll() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHorizontalScroll();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.ScrollInfo getVerticalScroll() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVerticalScroll();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.VerticalScrollPosition getVerticalScrollPosition() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVerticalScrollPosition();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1, arg2);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdListBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.ListBox, com.hp.lft.sdk.stdwin.ListBoxDescription> implements com.hp.lft.sdk.stdwin.ListBox
	{		
		public StdListBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(com.hp.lft.sdk.stdwin.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void activateItem(com.hp.lft.sdk.stdwin.ListItem arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void activateItem(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.stdwin.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.stdwin.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.stdwin.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.stdwin.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0);
		}

		@Override 
		public void selectRange(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.stdwin.ListItem arg0, com.hp.lft.sdk.stdwin.ListItem arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
