
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package appmodels;

import com.hp.lft.sdk.*;
import com.hp.lft.sdk.web.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.53
public class MeeclipseApplicationModel extends AppModelBase {		private MainWindow MainWindow;
	private innoWakeWindow innoWakeWindow;
	private jFrameWindow jFrameWindow;
	private FieldTracingWindow FieldTracingWindow;
	private InnoWakeTMRuntimePage InnoWakeTMRuntimePage;
	private AutomatedChildSupportEnforcementSystemACSESPage AutomatedChildSupportEnforcementSystemACSESPage;
	private MaxensoMonitorPage MaxensoMonitorPage;
	private InnoWakeTMMonitoringPage InnoWakeTMMonitoringPage;
	private GoogleChromeWindow GoogleChromeWindow;

	public MeeclipseApplicationModel() throws GeneralLeanFtException 
	{
		setName("MeeclipseApplicationModel");
			MainWindow = new MainWindow(this);
	innoWakeWindow = new innoWakeWindow(this);
	jFrameWindow = new jFrameWindow(this);
	FieldTracingWindow = new FieldTracingWindow(this);
	GoogleChromeWindow = new GoogleChromeWindow(this);
		rebuildDescriptions();
	}
	
	public MeeclipseApplicationModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("MeeclipseApplicationModel");
				MainWindow = new MainWindow(contextTestObject, this);
		innoWakeWindow = new innoWakeWindow(contextTestObject, this);
		jFrameWindow = new jFrameWindow(contextTestObject, this);
		FieldTracingWindow = new FieldTracingWindow(contextTestObject, this);
		InnoWakeTMRuntimePage = new InnoWakeTMRuntimePage(contextTestObject, this);
		AutomatedChildSupportEnforcementSystemACSESPage = new AutomatedChildSupportEnforcementSystemACSESPage(contextTestObject, this);
		MaxensoMonitorPage = new MaxensoMonitorPage(contextTestObject, this);
		InnoWakeTMMonitoringPage = new InnoWakeTMMonitoringPage(contextTestObject, this);
		GoogleChromeWindow = new GoogleChromeWindow(contextTestObject, this);
		rebuildDescriptions();
	}	

			public MainWindow MainWindow() { return MainWindow; }
		public innoWakeWindow innoWakeWindow() { return innoWakeWindow; }
		public jFrameWindow jFrameWindow() { return jFrameWindow; }
		public FieldTracingWindow FieldTracingWindow() { return FieldTracingWindow; }
		public InnoWakeTMRuntimePage InnoWakeTMRuntimePage() { return InnoWakeTMRuntimePage; }
		public AutomatedChildSupportEnforcementSystemACSESPage AutomatedChildSupportEnforcementSystemACSESPage() { return AutomatedChildSupportEnforcementSystemACSESPage; }
		public MaxensoMonitorPage MaxensoMonitorPage() { return MaxensoMonitorPage; }
		public InnoWakeTMMonitoringPage InnoWakeTMMonitoringPage() { return InnoWakeTMMonitoringPage; }
		public GoogleChromeWindow GoogleChromeWindow() { return GoogleChromeWindow; }

		public class MainWindow extends JavaWindowNodeBase
	{

		
			private OpenPerspectiveWindow OpenPerspectiveWindow;
	private PreferencesWindow PreferencesWindow;
	private WindowMenu WindowMenu;
	private NewJavaProjectWindow NewJavaProjectWindow;
	private AddMeeclipseNatureWindow AddMeeclipseNatureWindow;
	private AutomaticMeeclipseWorkspaceSettingsWindow AutomaticMeeclipseWorkspaceSettingsWindow;
	private createMeeclipseNaturalMainprogramWindow createMeeclipseNaturalMainprogramWindow;
	private NewMeeclipseJCopyWindow NewMeeclipseJCopyWindow;
	private ViewMenuToolBar ViewMenuToolBar;
	private ContextMenu ContextMenu;
	private FiltersMenu FiltersMenu;
	private JavaElementFiltersWindow JavaElementFiltersWindow;
	private BottomTabControl BottomTabControl;
	private EditorTabControl EditorTabControl;
	private newMeeclipseProjectWindow newMeeclipseProjectWindow;
	private propertiesForMeeclipseProjectWindow propertiesForMeeclipseProjectWindow;
	private FileMenu FileMenu;
	private innoWakeLauncherWindow innoWakeLauncherWindow;
	private deleteResourcesWindow deleteResourcesWindow;
	private propertiesForJavaProjectWindow propertiesForJavaProjectWindow;
	private propertiesForJavaProject2Window propertiesForJavaProject2Window;
	private newMeeclipseJMapWindow newMeeclipseJMapWindow;
	private figureCanvasUiObject figureCanvasUiObject;
	private flyoutPaletteCompositeTitleCanvasUiObject flyoutPaletteCompositeTitleCanvasUiObject;
	private includeJCopyDataUsingCodeWindow includeJCopyDataUsingCodeWindow;
	private SearchMenu SearchMenu;
	private searchWindow searchWindow;
	private ProjectPropertiesWindow ProjectPropertiesWindow;
	private automaticMeeclipseWorkspaceSettings automaticMeeclipseWorkspaceSettings;
	private RenamePackageWindow RenamePackageWindow;
	private saveAndLaunchWindow saveAndLaunchWindow;
	private newProjectWindow newProjectWindow;
	private PackageExplorerTabControl PackageExplorerTabControl;
	private newWindow newWindow;
	private RunConfigurationWindow RunConfigurationWindow;
	private ErrorWindow ErrorWindow;
	private NewJavaPackageWindow NewJavaPackageWindow;
	private CompositeUiObject CompositeUiObject;
	private TreeTreeView TreeTreeView;
	private NewProjectWizard NewProjectWizard;
	private CreateMeeclipseCobolMainprogramWindow CreateMeeclipseCobolMainprogramWindow;
	private TreeTreeViewMeeclipse TreeTreeViewMeeclipse;
	private StyledTextEditor StyledTextEditor;
	private CreateMeeclipseSubprogramWindow CreateMeeclipseSubprogramWindow;
	private CompositeUiObject1 CompositeUiObject1;
	private CreateMeeclipseDataAreaWindow CreateMeeclipseDataAreaWindow;
	private CreateMeeclipseDatabaseTableWindow CreateMeeclipseDatabaseTableWindow;
	private CreateMeeclipseExternalSubroutineWindow CreateMeeclipseExternalSubroutineWindow;
	private CreateMeeclipseHelpfileWindow CreateMeeclipseHelpfileWindow;
	private ShowViewWindow ShowViewWindow;
	private NavigatorTreeView NavigatorTreeView;
	private ConfirmOverwriteWindow ConfirmOverwriteWindow;
	private AnnotationRuler AnnotationRuler;
	private EditMenu EditMenu;
	private DeleteWindow DeleteWindow;
	private RenameResourceWindow RenameResourceWindow;
	private CreateNewFileWindow CreateNewFileWindow;
	private OpenResourceWindow OpenResourceWindow;
	private ShowInPackageExplorerWindow ShowInPackageExplorerWindow;
	private BatchclipseMenu BatchclipseMenu;
	private OutlineTreeView OutlineTreeView;
	private ObjectDependenciesToolBar ObjectDependenciesToolBar;
	private ShellWindow ShellWindow;
	private NameConflictWindow NameConflictWindow;
	private SearchConsoleLink SearchConsoleLink;
	private NewJavaClassWindow NewJavaClassWindow;
	private AddBookmarkWindow AddBookmarkWindow;
	private BreakpointsTreeView BreakpointsTreeView;
	private CompositeUiObject2 CompositeUiObject2;
	private BookmarksTreeView BookmarksTreeView;
	private SaveResourceWindow SaveResourceWindow;
	private NewNaturalProjectWindow NewNaturalProjectWindow;
	private PropertiesTabControl PropertiesTabControl;
	private SaveIsNotAllowedWindow SaveIsNotAllowedWindow;
	private FindReplaceWindow FindReplaceWindow;
	private GraphicalEditorUiObject GraphicalEditorUiObject;
	private DimensionsNotBetween0And3StLabel DimensionsNotBetween0And3StLabel;
	private IsNotAValidRangeStLabel IsNotAValidRangeStLabel;
	private NewFolderWindow NewFolderWindow;
	private ImportWindow ImportWindow;
	private AddNatureAndClasspathWindow AddNatureAndClasspathWindow;
	private NewJavaInterfaceWindow NewJavaInterfaceWindow;
						public MainWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		PreferencesWindow = new PreferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		NewJavaProjectWindow = new NewJavaProjectWindow(this, applicationModel);
		AddMeeclipseNatureWindow = new AddMeeclipseNatureWindow(this, applicationModel);
		AutomaticMeeclipseWorkspaceSettingsWindow = new AutomaticMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		createMeeclipseNaturalMainprogramWindow = new createMeeclipseNaturalMainprogramWindow(this, applicationModel);
		NewMeeclipseJCopyWindow = new NewMeeclipseJCopyWindow(this, applicationModel);
		ViewMenuToolBar = new ViewMenuToolBar(this, applicationModel);
		ContextMenu = new ContextMenu(this, applicationModel);
		FiltersMenu = new FiltersMenu(this, applicationModel);
		JavaElementFiltersWindow = new JavaElementFiltersWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		EditorTabControl = new EditorTabControl(this, applicationModel);
		newMeeclipseProjectWindow = new newMeeclipseProjectWindow(this, applicationModel);
		propertiesForMeeclipseProjectWindow = new propertiesForMeeclipseProjectWindow(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		innoWakeLauncherWindow = new innoWakeLauncherWindow(this, applicationModel);
		deleteResourcesWindow = new deleteResourcesWindow(this, applicationModel);
		propertiesForJavaProjectWindow = new propertiesForJavaProjectWindow(this, applicationModel);
		propertiesForJavaProject2Window = new propertiesForJavaProject2Window(this, applicationModel);
		newMeeclipseJMapWindow = new newMeeclipseJMapWindow(this, applicationModel);
		figureCanvasUiObject = new figureCanvasUiObject(this, applicationModel);
		flyoutPaletteCompositeTitleCanvasUiObject = new flyoutPaletteCompositeTitleCanvasUiObject(this, applicationModel);
		includeJCopyDataUsingCodeWindow = new includeJCopyDataUsingCodeWindow(this, applicationModel);
		SearchMenu = new SearchMenu(this, applicationModel);
		searchWindow = new searchWindow(this, applicationModel);
		ProjectPropertiesWindow = new ProjectPropertiesWindow(this, applicationModel);
		automaticMeeclipseWorkspaceSettings = new automaticMeeclipseWorkspaceSettings(this, applicationModel);
		RenamePackageWindow = new RenamePackageWindow(this, applicationModel);
		saveAndLaunchWindow = new saveAndLaunchWindow(this, applicationModel);
		newProjectWindow = new newProjectWindow(this, applicationModel);
		PackageExplorerTabControl = new PackageExplorerTabControl(this, applicationModel);
		newWindow = new newWindow(this, applicationModel);
		RunConfigurationWindow = new RunConfigurationWindow(this, applicationModel);
		ErrorWindow = new ErrorWindow(this, applicationModel);
		NewJavaPackageWindow = new NewJavaPackageWindow(this, applicationModel);
		CompositeUiObject = new CompositeUiObject(this, applicationModel);
		TreeTreeView = new TreeTreeView(this, applicationModel);
		NewProjectWizard = new NewProjectWizard(this, applicationModel);
		CreateMeeclipseCobolMainprogramWindow = new CreateMeeclipseCobolMainprogramWindow(this, applicationModel);
		TreeTreeViewMeeclipse = new TreeTreeViewMeeclipse(this, applicationModel);
		StyledTextEditor = new StyledTextEditor(this, applicationModel);
		CreateMeeclipseSubprogramWindow = new CreateMeeclipseSubprogramWindow(this, applicationModel);
		CompositeUiObject1 = new CompositeUiObject1(this, applicationModel);
		CreateMeeclipseDataAreaWindow = new CreateMeeclipseDataAreaWindow(this, applicationModel);
		CreateMeeclipseDatabaseTableWindow = new CreateMeeclipseDatabaseTableWindow(this, applicationModel);
		CreateMeeclipseExternalSubroutineWindow = new CreateMeeclipseExternalSubroutineWindow(this, applicationModel);
		CreateMeeclipseHelpfileWindow = new CreateMeeclipseHelpfileWindow(this, applicationModel);
		ShowViewWindow = new ShowViewWindow(this, applicationModel);
		NavigatorTreeView = new NavigatorTreeView(this, applicationModel);
		ConfirmOverwriteWindow = new ConfirmOverwriteWindow(this, applicationModel);
		AnnotationRuler = new AnnotationRuler(this, applicationModel);
		EditMenu = new EditMenu(this, applicationModel);
		DeleteWindow = new DeleteWindow(this, applicationModel);
		RenameResourceWindow = new RenameResourceWindow(this, applicationModel);
		CreateNewFileWindow = new CreateNewFileWindow(this, applicationModel);
		OpenResourceWindow = new OpenResourceWindow(this, applicationModel);
		ShowInPackageExplorerWindow = new ShowInPackageExplorerWindow(this, applicationModel);
		BatchclipseMenu = new BatchclipseMenu(this, applicationModel);
		OutlineTreeView = new OutlineTreeView(this, applicationModel);
		ObjectDependenciesToolBar = new ObjectDependenciesToolBar(this, applicationModel);
		ShellWindow = new ShellWindow(this, applicationModel);
		NameConflictWindow = new NameConflictWindow(this, applicationModel);
		SearchConsoleLink = new SearchConsoleLink(this, applicationModel);
		NewJavaClassWindow = new NewJavaClassWindow(this, applicationModel);
		AddBookmarkWindow = new AddBookmarkWindow(this, applicationModel);
		BreakpointsTreeView = new BreakpointsTreeView(this, applicationModel);
		CompositeUiObject2 = new CompositeUiObject2(this, applicationModel);
		BookmarksTreeView = new BookmarksTreeView(this, applicationModel);
		SaveResourceWindow = new SaveResourceWindow(this, applicationModel);
		NewNaturalProjectWindow = new NewNaturalProjectWindow(this, applicationModel);
		PropertiesTabControl = new PropertiesTabControl(this, applicationModel);
		SaveIsNotAllowedWindow = new SaveIsNotAllowedWindow(this, applicationModel);
		FindReplaceWindow = new FindReplaceWindow(this, applicationModel);
		GraphicalEditorUiObject = new GraphicalEditorUiObject(this, applicationModel);
		DimensionsNotBetween0And3StLabel = new DimensionsNotBetween0And3StLabel(this, applicationModel);
		IsNotAValidRangeStLabel = new IsNotAValidRangeStLabel(this, applicationModel);
		NewFolderWindow = new NewFolderWindow(this, applicationModel);
		ImportWindow = new ImportWindow(this, applicationModel);
		AddNatureAndClasspathWindow = new AddNatureAndClasspathWindow(this, applicationModel);
		NewJavaInterfaceWindow = new NewJavaInterfaceWindow(this, applicationModel);
			
			setDisplayName("MainWindow");
		}
				public MainWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		PreferencesWindow = new PreferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		NewJavaProjectWindow = new NewJavaProjectWindow(this, applicationModel);
		AddMeeclipseNatureWindow = new AddMeeclipseNatureWindow(this, applicationModel);
		AutomaticMeeclipseWorkspaceSettingsWindow = new AutomaticMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		createMeeclipseNaturalMainprogramWindow = new createMeeclipseNaturalMainprogramWindow(this, applicationModel);
		NewMeeclipseJCopyWindow = new NewMeeclipseJCopyWindow(this, applicationModel);
		ViewMenuToolBar = new ViewMenuToolBar(this, applicationModel);
		ContextMenu = new ContextMenu(this, applicationModel);
		FiltersMenu = new FiltersMenu(this, applicationModel);
		JavaElementFiltersWindow = new JavaElementFiltersWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		EditorTabControl = new EditorTabControl(this, applicationModel);
		newMeeclipseProjectWindow = new newMeeclipseProjectWindow(this, applicationModel);
		propertiesForMeeclipseProjectWindow = new propertiesForMeeclipseProjectWindow(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		innoWakeLauncherWindow = new innoWakeLauncherWindow(this, applicationModel);
		deleteResourcesWindow = new deleteResourcesWindow(this, applicationModel);
		propertiesForJavaProjectWindow = new propertiesForJavaProjectWindow(this, applicationModel);
		propertiesForJavaProject2Window = new propertiesForJavaProject2Window(this, applicationModel);
		newMeeclipseJMapWindow = new newMeeclipseJMapWindow(this, applicationModel);
		figureCanvasUiObject = new figureCanvasUiObject(this, applicationModel);
		flyoutPaletteCompositeTitleCanvasUiObject = new flyoutPaletteCompositeTitleCanvasUiObject(this, applicationModel);
		includeJCopyDataUsingCodeWindow = new includeJCopyDataUsingCodeWindow(this, applicationModel);
		SearchMenu = new SearchMenu(this, applicationModel);
		searchWindow = new searchWindow(this, applicationModel);
		ProjectPropertiesWindow = new ProjectPropertiesWindow(this, applicationModel);
		automaticMeeclipseWorkspaceSettings = new automaticMeeclipseWorkspaceSettings(this, applicationModel);
		RenamePackageWindow = new RenamePackageWindow(this, applicationModel);
		saveAndLaunchWindow = new saveAndLaunchWindow(this, applicationModel);
		newProjectWindow = new newProjectWindow(this, applicationModel);
		PackageExplorerTabControl = new PackageExplorerTabControl(this, applicationModel);
		newWindow = new newWindow(this, applicationModel);
		RunConfigurationWindow = new RunConfigurationWindow(this, applicationModel);
		ErrorWindow = new ErrorWindow(this, applicationModel);
		NewJavaPackageWindow = new NewJavaPackageWindow(this, applicationModel);
		CompositeUiObject = new CompositeUiObject(this, applicationModel);
		TreeTreeView = new TreeTreeView(this, applicationModel);
		NewProjectWizard = new NewProjectWizard(this, applicationModel);
		CreateMeeclipseCobolMainprogramWindow = new CreateMeeclipseCobolMainprogramWindow(this, applicationModel);
		TreeTreeViewMeeclipse = new TreeTreeViewMeeclipse(this, applicationModel);
		StyledTextEditor = new StyledTextEditor(this, applicationModel);
		CreateMeeclipseSubprogramWindow = new CreateMeeclipseSubprogramWindow(this, applicationModel);
		CompositeUiObject1 = new CompositeUiObject1(this, applicationModel);
		CreateMeeclipseDataAreaWindow = new CreateMeeclipseDataAreaWindow(this, applicationModel);
		CreateMeeclipseDatabaseTableWindow = new CreateMeeclipseDatabaseTableWindow(this, applicationModel);
		CreateMeeclipseExternalSubroutineWindow = new CreateMeeclipseExternalSubroutineWindow(this, applicationModel);
		CreateMeeclipseHelpfileWindow = new CreateMeeclipseHelpfileWindow(this, applicationModel);
		ShowViewWindow = new ShowViewWindow(this, applicationModel);
		NavigatorTreeView = new NavigatorTreeView(this, applicationModel);
		ConfirmOverwriteWindow = new ConfirmOverwriteWindow(this, applicationModel);
		AnnotationRuler = new AnnotationRuler(this, applicationModel);
		EditMenu = new EditMenu(this, applicationModel);
		DeleteWindow = new DeleteWindow(this, applicationModel);
		RenameResourceWindow = new RenameResourceWindow(this, applicationModel);
		CreateNewFileWindow = new CreateNewFileWindow(this, applicationModel);
		OpenResourceWindow = new OpenResourceWindow(this, applicationModel);
		ShowInPackageExplorerWindow = new ShowInPackageExplorerWindow(this, applicationModel);
		BatchclipseMenu = new BatchclipseMenu(this, applicationModel);
		OutlineTreeView = new OutlineTreeView(this, applicationModel);
		ObjectDependenciesToolBar = new ObjectDependenciesToolBar(this, applicationModel);
		ShellWindow = new ShellWindow(this, applicationModel);
		NameConflictWindow = new NameConflictWindow(this, applicationModel);
		SearchConsoleLink = new SearchConsoleLink(this, applicationModel);
		NewJavaClassWindow = new NewJavaClassWindow(this, applicationModel);
		AddBookmarkWindow = new AddBookmarkWindow(this, applicationModel);
		BreakpointsTreeView = new BreakpointsTreeView(this, applicationModel);
		CompositeUiObject2 = new CompositeUiObject2(this, applicationModel);
		BookmarksTreeView = new BookmarksTreeView(this, applicationModel);
		SaveResourceWindow = new SaveResourceWindow(this, applicationModel);
		NewNaturalProjectWindow = new NewNaturalProjectWindow(this, applicationModel);
		PropertiesTabControl = new PropertiesTabControl(this, applicationModel);
		SaveIsNotAllowedWindow = new SaveIsNotAllowedWindow(this, applicationModel);
		FindReplaceWindow = new FindReplaceWindow(this, applicationModel);
		GraphicalEditorUiObject = new GraphicalEditorUiObject(this, applicationModel);
		DimensionsNotBetween0And3StLabel = new DimensionsNotBetween0And3StLabel(this, applicationModel);
		IsNotAValidRangeStLabel = new IsNotAValidRangeStLabel(this, applicationModel);
		NewFolderWindow = new NewFolderWindow(this, applicationModel);
		ImportWindow = new ImportWindow(this, applicationModel);
		AddNatureAndClasspathWindow = new AddNatureAndClasspathWindow(this, applicationModel);
		NewJavaInterfaceWindow = new NewJavaInterfaceWindow(this, applicationModel);

			setDisplayName("MainWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty(".* - (innoWake|maxenso)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OpenPerspectiveWindow OpenPerspectiveWindow() { return OpenPerspectiveWindow; }
		public PreferencesWindow PreferencesWindow() { return PreferencesWindow; }
		public WindowMenu WindowMenu() { return WindowMenu; }
		public NewJavaProjectWindow NewJavaProjectWindow() { return NewJavaProjectWindow; }
		public AddMeeclipseNatureWindow AddMeeclipseNatureWindow() { return AddMeeclipseNatureWindow; }
		public AutomaticMeeclipseWorkspaceSettingsWindow AutomaticMeeclipseWorkspaceSettingsWindow() { return AutomaticMeeclipseWorkspaceSettingsWindow; }
		public createMeeclipseNaturalMainprogramWindow createMeeclipseNaturalMainprogramWindow() { return createMeeclipseNaturalMainprogramWindow; }
		public NewMeeclipseJCopyWindow NewMeeclipseJCopyWindow() { return NewMeeclipseJCopyWindow; }
		public ViewMenuToolBar ViewMenuToolBar() { return ViewMenuToolBar; }
		public ContextMenu ContextMenu() { return ContextMenu; }
		public FiltersMenu FiltersMenu() { return FiltersMenu; }
		public JavaElementFiltersWindow JavaElementFiltersWindow() { return JavaElementFiltersWindow; }
		public BottomTabControl BottomTabControl() { return BottomTabControl; }
		public EditorTabControl EditorTabControl() { return EditorTabControl; }
		public newMeeclipseProjectWindow newMeeclipseProjectWindow() { return newMeeclipseProjectWindow; }
		public propertiesForMeeclipseProjectWindow propertiesForMeeclipseProjectWindow() { return propertiesForMeeclipseProjectWindow; }
		public FileMenu FileMenu() { return FileMenu; }
		public innoWakeLauncherWindow innoWakeLauncherWindow() { return innoWakeLauncherWindow; }
		public deleteResourcesWindow deleteResourcesWindow() { return deleteResourcesWindow; }
		public propertiesForJavaProjectWindow propertiesForJavaProjectWindow() { return propertiesForJavaProjectWindow; }
		public propertiesForJavaProject2Window propertiesForJavaProject2Window() { return propertiesForJavaProject2Window; }
		public newMeeclipseJMapWindow newMeeclipseJMapWindow() { return newMeeclipseJMapWindow; }
		public figureCanvasUiObject figureCanvasUiObject() { return figureCanvasUiObject; }
		public flyoutPaletteCompositeTitleCanvasUiObject flyoutPaletteCompositeTitleCanvasUiObject() { return flyoutPaletteCompositeTitleCanvasUiObject; }
		public includeJCopyDataUsingCodeWindow includeJCopyDataUsingCodeWindow() { return includeJCopyDataUsingCodeWindow; }
		public SearchMenu SearchMenu() { return SearchMenu; }
		public searchWindow searchWindow() { return searchWindow; }
		public ProjectPropertiesWindow ProjectPropertiesWindow() { return ProjectPropertiesWindow; }
		public automaticMeeclipseWorkspaceSettings automaticMeeclipseWorkspaceSettings() { return automaticMeeclipseWorkspaceSettings; }
		public RenamePackageWindow RenamePackageWindow() { return RenamePackageWindow; }
		public saveAndLaunchWindow saveAndLaunchWindow() { return saveAndLaunchWindow; }
		public newProjectWindow newProjectWindow() { return newProjectWindow; }
		public PackageExplorerTabControl PackageExplorerTabControl() { return PackageExplorerTabControl; }
		public newWindow newWindow() { return newWindow; }
		public RunConfigurationWindow RunConfigurationWindow() { return RunConfigurationWindow; }
		public ErrorWindow ErrorWindow() { return ErrorWindow; }
		public NewJavaPackageWindow NewJavaPackageWindow() { return NewJavaPackageWindow; }
		public CompositeUiObject CompositeUiObject() { return CompositeUiObject; }
		public TreeTreeView TreeTreeView() { return TreeTreeView; }
		public NewProjectWizard NewProjectWizard() { return NewProjectWizard; }
		public CreateMeeclipseCobolMainprogramWindow CreateMeeclipseCobolMainprogramWindow() { return CreateMeeclipseCobolMainprogramWindow; }
		public TreeTreeViewMeeclipse TreeTreeViewMeeclipse() { return TreeTreeViewMeeclipse; }
		public StyledTextEditor StyledTextEditor() { return StyledTextEditor; }
		public CreateMeeclipseSubprogramWindow CreateMeeclipseSubprogramWindow() { return CreateMeeclipseSubprogramWindow; }
		public CompositeUiObject1 CompositeUiObject1() { return CompositeUiObject1; }
		public CreateMeeclipseDataAreaWindow CreateMeeclipseDataAreaWindow() { return CreateMeeclipseDataAreaWindow; }
		public CreateMeeclipseDatabaseTableWindow CreateMeeclipseDatabaseTableWindow() { return CreateMeeclipseDatabaseTableWindow; }
		public CreateMeeclipseExternalSubroutineWindow CreateMeeclipseExternalSubroutineWindow() { return CreateMeeclipseExternalSubroutineWindow; }
		public CreateMeeclipseHelpfileWindow CreateMeeclipseHelpfileWindow() { return CreateMeeclipseHelpfileWindow; }
		public ShowViewWindow ShowViewWindow() { return ShowViewWindow; }
		public NavigatorTreeView NavigatorTreeView() { return NavigatorTreeView; }
		public ConfirmOverwriteWindow ConfirmOverwriteWindow() { return ConfirmOverwriteWindow; }
		public AnnotationRuler AnnotationRuler() { return AnnotationRuler; }
		public EditMenu EditMenu() { return EditMenu; }
		public DeleteWindow DeleteWindow() { return DeleteWindow; }
		public RenameResourceWindow RenameResourceWindow() { return RenameResourceWindow; }
		public CreateNewFileWindow CreateNewFileWindow() { return CreateNewFileWindow; }
		public OpenResourceWindow OpenResourceWindow() { return OpenResourceWindow; }
		public ShowInPackageExplorerWindow ShowInPackageExplorerWindow() { return ShowInPackageExplorerWindow; }
		public BatchclipseMenu BatchclipseMenu() { return BatchclipseMenu; }
		public OutlineTreeView OutlineTreeView() { return OutlineTreeView; }
		public ObjectDependenciesToolBar ObjectDependenciesToolBar() { return ObjectDependenciesToolBar; }
		public ShellWindow ShellWindow() { return ShellWindow; }
		public NameConflictWindow NameConflictWindow() { return NameConflictWindow; }
		public SearchConsoleLink SearchConsoleLink() { return SearchConsoleLink; }
		public NewJavaClassWindow NewJavaClassWindow() { return NewJavaClassWindow; }
		public AddBookmarkWindow AddBookmarkWindow() { return AddBookmarkWindow; }
		public BreakpointsTreeView BreakpointsTreeView() { return BreakpointsTreeView; }
		public CompositeUiObject2 CompositeUiObject2() { return CompositeUiObject2; }
		public BookmarksTreeView BookmarksTreeView() { return BookmarksTreeView; }
		public SaveResourceWindow SaveResourceWindow() { return SaveResourceWindow; }
		public NewNaturalProjectWindow NewNaturalProjectWindow() { return NewNaturalProjectWindow; }
		public PropertiesTabControl PropertiesTabControl() { return PropertiesTabControl; }
		public SaveIsNotAllowedWindow SaveIsNotAllowedWindow() { return SaveIsNotAllowedWindow; }
		public FindReplaceWindow FindReplaceWindow() { return FindReplaceWindow; }
		public GraphicalEditorUiObject GraphicalEditorUiObject() { return GraphicalEditorUiObject; }
		public DimensionsNotBetween0And3StLabel DimensionsNotBetween0And3StLabel() { return DimensionsNotBetween0And3StLabel; }
		public IsNotAValidRangeStLabel IsNotAValidRangeStLabel() { return IsNotAValidRangeStLabel; }
		public NewFolderWindow NewFolderWindow() { return NewFolderWindow; }
		public ImportWindow ImportWindow() { return ImportWindow; }
		public AddNatureAndClasspathWindow AddNatureAndClasspathWindow() { return AddNatureAndClasspathWindow; }
		public NewJavaInterfaceWindow NewJavaInterfaceWindow() { return NewJavaInterfaceWindow; }
		
			public class OpenPerspectiveWindow extends JavaWindowNodeBase
	{

		
			private Table Table;
	private OKButton OKButton;
	private OpenButton OpenButton;
						public OpenPerspectiveWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Table = new Table(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
			
			setDisplayName("Open Perspective");
		}
				public OpenPerspectiveWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Table = new Table(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);

			setDisplayName("Open Perspective");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Open Perspective").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Table Table() { return Table; }
		public OKButton OKButton() { return OKButton; }
		public OpenButton OpenButton() { return OpenButton; }
		
			public class Table extends JavaTableNodeBase
	{

		
								public Table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenButton extends JavaButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PreferencesWindow extends JavaWindowNodeBase
	{

		
			private Tree Tree;
	private ApplyAndCloseButton ApplyAndCloseButton;
	private ClasspathVariablesScreen ClasspathVariablesScreen;
	private NewVariableEntryWindow NewVariableEntryWindow;
	private ClasspathVariablesChangedWindow ClasspathVariablesChangedWindow;
	private resetButton resetButton;
	private resetMeeclipseWorkspaceSettingsWindow resetMeeclipseWorkspaceSettingsWindow;
	private selectFoldingToUseList selectFoldingToUseList;
	private fileTypesTable fileTypesTable;
	private associatedEditorsTable associatedEditorsTable;
	private donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox;
	private SetButton SetButton;
	private showLineNumbersCheckBox showLineNumbersCheckBox;
	private PreferencesTreeView PreferencesTreeView;
	private IncludeJCopyContentsOnEditorSaveCheckBox IncludeJCopyContentsOnEditorSaveCheckBox;
	private EnableFoldingCheckBox EnableFoldingCheckBox;
	private SchemeEditor SchemeEditor;
	private BindingEditor BindingEditor;
	private NewTemplateButton NewTemplateButton;
	private NewTemplateWindow NewTemplateWindow;
	private FileAssociationsScreen FileAssociationsScreen;
						public PreferencesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		NewVariableEntryWindow = new NewVariableEntryWindow(this, applicationModel);
		ClasspathVariablesChangedWindow = new ClasspathVariablesChangedWindow(this, applicationModel);
		resetButton = new resetButton(this, applicationModel);
		resetMeeclipseWorkspaceSettingsWindow = new resetMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		selectFoldingToUseList = new selectFoldingToUseList(this, applicationModel);
		fileTypesTable = new fileTypesTable(this, applicationModel);
		associatedEditorsTable = new associatedEditorsTable(this, applicationModel);
		donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox = new donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox(this, applicationModel);
		SetButton = new SetButton(this, applicationModel);
		showLineNumbersCheckBox = new showLineNumbersCheckBox(this, applicationModel);
		PreferencesTreeView = new PreferencesTreeView(this, applicationModel);
		IncludeJCopyContentsOnEditorSaveCheckBox = new IncludeJCopyContentsOnEditorSaveCheckBox(this, applicationModel);
		EnableFoldingCheckBox = new EnableFoldingCheckBox(this, applicationModel);
		SchemeEditor = new SchemeEditor(this, applicationModel);
		BindingEditor = new BindingEditor(this, applicationModel);
		NewTemplateButton = new NewTemplateButton(this, applicationModel);
		NewTemplateWindow = new NewTemplateWindow(this, applicationModel);
		FileAssociationsScreen = new FileAssociationsScreen(this, applicationModel);
			
			setDisplayName("PreferencesWindow");
		}
				public PreferencesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		NewVariableEntryWindow = new NewVariableEntryWindow(this, applicationModel);
		ClasspathVariablesChangedWindow = new ClasspathVariablesChangedWindow(this, applicationModel);
		resetButton = new resetButton(this, applicationModel);
		resetMeeclipseWorkspaceSettingsWindow = new resetMeeclipseWorkspaceSettingsWindow(this, applicationModel);
		selectFoldingToUseList = new selectFoldingToUseList(this, applicationModel);
		fileTypesTable = new fileTypesTable(this, applicationModel);
		associatedEditorsTable = new associatedEditorsTable(this, applicationModel);
		donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox = new donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox(this, applicationModel);
		SetButton = new SetButton(this, applicationModel);
		showLineNumbersCheckBox = new showLineNumbersCheckBox(this, applicationModel);
		PreferencesTreeView = new PreferencesTreeView(this, applicationModel);
		IncludeJCopyContentsOnEditorSaveCheckBox = new IncludeJCopyContentsOnEditorSaveCheckBox(this, applicationModel);
		EnableFoldingCheckBox = new EnableFoldingCheckBox(this, applicationModel);
		SchemeEditor = new SchemeEditor(this, applicationModel);
		BindingEditor = new BindingEditor(this, applicationModel);
		NewTemplateButton = new NewTemplateButton(this, applicationModel);
		NewTemplateWindow = new NewTemplateWindow(this, applicationModel);
		FileAssociationsScreen = new FileAssociationsScreen(this, applicationModel);

			setDisplayName("PreferencesWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tree Tree() { return Tree; }
		public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public ClasspathVariablesScreen ClasspathVariablesScreen() { return ClasspathVariablesScreen; }
		public NewVariableEntryWindow NewVariableEntryWindow() { return NewVariableEntryWindow; }
		public ClasspathVariablesChangedWindow ClasspathVariablesChangedWindow() { return ClasspathVariablesChangedWindow; }
		public resetButton resetButton() { return resetButton; }
		public resetMeeclipseWorkspaceSettingsWindow resetMeeclipseWorkspaceSettingsWindow() { return resetMeeclipseWorkspaceSettingsWindow; }
		public selectFoldingToUseList selectFoldingToUseList() { return selectFoldingToUseList; }
		public fileTypesTable fileTypesTable() { return fileTypesTable; }
		public associatedEditorsTable associatedEditorsTable() { return associatedEditorsTable; }
		public donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox() { return donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox; }
		public SetButton SetButton() { return SetButton; }
		public showLineNumbersCheckBox showLineNumbersCheckBox() { return showLineNumbersCheckBox; }
		public PreferencesTreeView PreferencesTreeView() { return PreferencesTreeView; }
		public IncludeJCopyContentsOnEditorSaveCheckBox IncludeJCopyContentsOnEditorSaveCheckBox() { return IncludeJCopyContentsOnEditorSaveCheckBox; }
		public EnableFoldingCheckBox EnableFoldingCheckBox() { return EnableFoldingCheckBox; }
		public SchemeEditor SchemeEditor() { return SchemeEditor; }
		public BindingEditor BindingEditor() { return BindingEditor; }
		public NewTemplateButton NewTemplateButton() { return NewTemplateButton; }
		public NewTemplateWindow NewTemplateWindow() { return NewTemplateWindow; }
		public FileAssociationsScreen FileAssociationsScreen() { return FileAssociationsScreen; }
		
			public class Tree extends JavaTreeViewNodeBase
	{

		
								public Tree(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplyAndCloseButton extends JavaButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply and Close");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClasspathVariablesScreen extends JavaUiObjectNodeBase
	{

		
			private NewButton NewButton;
						public ClasspathVariablesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewButton = new NewButton(this, applicationModel);

			setDisplayName("Classpath Variables Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewButton NewButton() { return NewButton; }
		
			public class NewButton extends JavaButtonNodeBase
	{

		
								public NewButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("New...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewVariableEntryWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
	private PathEditor PathEditor;
	private NameEditor NameEditor;
						public NewVariableEntryWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
		PathEditor = new PathEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
			
			setDisplayName("New Variable Entry");
		}
				public NewVariableEntryWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);
		PathEditor = new PathEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);

			setDisplayName("New Variable Entry");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Variable Entry").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		public PathEditor PathEditor() { return PathEditor; }
		public NameEditor NameEditor() { return NameEditor; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PathEditor extends JavaEditorNodeBase
	{

		
								public PathEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Path:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ClasspathVariablesChangedWindow extends JavaWindowNodeBase
	{

		
			private YesButton YesButton;
						public ClasspathVariablesChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					YesButton = new YesButton(this, applicationModel);
			
			setDisplayName("Classpath Variables Changed");
		}
				public ClasspathVariablesChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					YesButton = new YesButton(this, applicationModel);

			setDisplayName("Classpath Variables Changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Classpath Variables Changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public YesButton YesButton() { return YesButton; }
		
			public class YesButton extends JavaButtonNodeBase
	{

		
								public YesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class resetButton extends JavaButtonNodeBase
	{

		
								public resetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Reset");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Reset").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class resetMeeclipseWorkspaceSettingsWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
						public resetMeeclipseWorkspaceSettingsWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Reset meeclipse workspace settings");
		}
				public resetMeeclipseWorkspaceSettingsWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Reset meeclipse workspace settings");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Reset meeclipse workspace settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class selectFoldingToUseList extends JavaListNodeBase
	{

		
								public selectFoldingToUseList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select folding to use:");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Select folding to use:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class fileTypesTable extends JavaTableNodeBase
	{

		
								public fileTypesTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("File types:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().attachedText("File types:").nativeClass("org.eclipse.swt.widgets.Table").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class associatedEditorsTable extends JavaTableNodeBase
	{

		
								public associatedEditorsTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Associated editors:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().attachedText("Associated editors:").nativeClass("org.eclipse.swt.widgets.Table").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't ask again for automatic meeclipse workspace settings");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Don't ask again for automatic meeclipse workspace settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SetButton extends JavaButtonNodeBase
	{

		
								public SetButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Set");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Set").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class showLineNumbersCheckBox extends JavaCheckBoxNodeBase
	{

		
								public showLineNumbersCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Show line numbers");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Show line numbers").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PreferencesTreeView extends JavaTreeViewNodeBase
	{

		
								public PreferencesTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PreferencesTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IncludeJCopyContentsOnEditorSaveCheckBox extends JavaCheckBoxNodeBase
	{

		
								public IncludeJCopyContentsOnEditorSaveCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IncludeJCopyContentsOnEditorSaveCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Include JCopy contents on editor save").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnableFoldingCheckBox extends JavaCheckBoxNodeBase
	{

		
								public EnableFoldingCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnableFoldingCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Enable folding").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SchemeEditor extends JavaEditorNodeBase
	{

		
								public SchemeEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Scheme:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Scheme:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BindingEditor extends JavaEditorNodeBase
	{

		
								public BindingEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BindingEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Binding:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewTemplateButton extends JavaButtonNodeBase
	{

		
								public NewTemplateButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewTemplateButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("New...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewTemplateWindow extends JavaWindowNodeBase
	{

		
			private NameEditor NameEditor;
	private DescriptionEditor DescriptionEditor;
	private PatternEditor PatternEditor;
	private OKButton OKButton;
						public NewTemplateWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		DescriptionEditor = new DescriptionEditor(this, applicationModel);
		PatternEditor = new PatternEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("New Template");
		}
				public NewTemplateWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		DescriptionEditor = new DescriptionEditor(this, applicationModel);
		PatternEditor = new PatternEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("New Template");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Template").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public DescriptionEditor DescriptionEditor() { return DescriptionEditor; }
		public PatternEditor PatternEditor() { return PatternEditor; }
		public OKButton OKButton() { return OKButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DescriptionEditor extends JavaEditorNodeBase
	{

		
								public DescriptionEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DescriptionEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Description:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PatternEditor extends JavaEditorNodeBase
	{

		
								public PatternEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PatternEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Pattern:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FileAssociationsScreen extends JavaUiObjectNodeBase
	{

		
			private OpenUnassociatedFilesWithList OpenUnassociatedFilesWithList;
						public FileAssociationsScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OpenUnassociatedFilesWithList = new OpenUnassociatedFilesWithList(this, applicationModel);

			setDisplayName("File Associations Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OpenUnassociatedFilesWithList OpenUnassociatedFilesWithList() { return OpenUnassociatedFilesWithList; }
		
			public class OpenUnassociatedFilesWithList extends JavaListNodeBase
	{

		
								public OpenUnassociatedFilesWithList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open unassociated files with List");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class WindowMenu extends JavaMenuNodeBase
	{

		
			private PreferencesMenu PreferencesMenu;
	private ShowViewMenu ShowViewMenu;
	private PerspectiveMenu PerspectiveMenu;
	private EditorMenu EditorMenu;
						public WindowMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PreferencesMenu = new PreferencesMenu(this, applicationModel);
		ShowViewMenu = new ShowViewMenu(this, applicationModel);
		PerspectiveMenu = new PerspectiveMenu(this, applicationModel);
		EditorMenu = new EditorMenu(this, applicationModel);

			setDisplayName("Window Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Window").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PreferencesMenu PreferencesMenu() { return PreferencesMenu; }
		public ShowViewMenu ShowViewMenu() { return ShowViewMenu; }
		public PerspectiveMenu PerspectiveMenu() { return PerspectiveMenu; }
		public EditorMenu EditorMenu() { return EditorMenu; }
		
			public class PreferencesMenu extends JavaMenuNodeBase
	{

		
								public PreferencesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PreferencesMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowViewMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public ShowViewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("Show View Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Other Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PerspectiveMenu extends JavaMenuNodeBase
	{

		
			private OpenPerspectiveMenu OpenPerspectiveMenu;
						public PerspectiveMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OpenPerspectiveMenu = new OpenPerspectiveMenu(this, applicationModel);

			setDisplayName("PerspectiveMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Perspective").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OpenPerspectiveMenu OpenPerspectiveMenu() { return OpenPerspectiveMenu; }
		
			public class OpenPerspectiveMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public OpenPerspectiveMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("OpenPerspectiveMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Open Perspective").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class EditorMenu extends JavaMenuNodeBase
	{

		
			private ZoomInMenu ZoomInMenu;
	private ZoomOutMenu ZoomOutMenu;
						public EditorMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ZoomInMenu = new ZoomInMenu(this, applicationModel);
		ZoomOutMenu = new ZoomOutMenu(this, applicationModel);

			setDisplayName("Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Editor").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ZoomInMenu ZoomInMenu() { return ZoomInMenu; }
		public ZoomOutMenu ZoomOutMenu() { return ZoomOutMenu; }
		
			public class ZoomInMenu extends JavaMenuNodeBase
	{

		
								public ZoomInMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Zoom In");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Zoom In").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ZoomOutMenu extends JavaMenuNodeBase
	{

		
								public ZoomOutMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Zoom Out");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Zoom Out").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewJavaProjectWindow extends JavaWindowNodeBase
	{

		
			private CreateAJavaProject CreateAJavaProject;
	private projectNameEditor projectNameEditor;
	private nextButton nextButton;
	private treeTreeView treeTreeView;
	private RemoveBPMenu RemoveBPMenu;
	private finishButton finishButton;
	private NewModuleInfoJavaWindow NewModuleInfoJavaWindow;
	private JavaBuildSettingsTreeView JavaBuildSettingsTreeView;
						public NewJavaProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CreateAJavaProject = new CreateAJavaProject(this, applicationModel);
		projectNameEditor = new projectNameEditor(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		treeTreeView = new treeTreeView(this, applicationModel);
		RemoveBPMenu = new RemoveBPMenu(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		NewModuleInfoJavaWindow = new NewModuleInfoJavaWindow(this, applicationModel);
		JavaBuildSettingsTreeView = new JavaBuildSettingsTreeView(this, applicationModel);
			
			setDisplayName("New Java Project Window");
		}
				public NewJavaProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateAJavaProject = new CreateAJavaProject(this, applicationModel);
		projectNameEditor = new projectNameEditor(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		treeTreeView = new treeTreeView(this, applicationModel);
		RemoveBPMenu = new RemoveBPMenu(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		NewModuleInfoJavaWindow = new NewModuleInfoJavaWindow(this, applicationModel);
		JavaBuildSettingsTreeView = new JavaBuildSettingsTreeView(this, applicationModel);

			setDisplayName("New Java Project Window");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Java Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateAJavaProject CreateAJavaProject() { return CreateAJavaProject; }
		public projectNameEditor projectNameEditor() { return projectNameEditor; }
		public nextButton nextButton() { return nextButton; }
		public treeTreeView treeTreeView() { return treeTreeView; }
		public RemoveBPMenu RemoveBPMenu() { return RemoveBPMenu; }
		public finishButton finishButton() { return finishButton; }
		public NewModuleInfoJavaWindow NewModuleInfoJavaWindow() { return NewModuleInfoJavaWindow; }
		public JavaBuildSettingsTreeView JavaBuildSettingsTreeView() { return JavaBuildSettingsTreeView; }
		
			public class CreateAJavaProject extends JavaUiObjectNodeBase
	{

		
			private projectNameEditor projectNameEditor;
	private NextButton NextButton;
	private FinishButton FinishButton;
						public CreateAJavaProject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					projectNameEditor = new projectNameEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("CreateAJavaProject");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public projectNameEditor projectNameEditor() { return projectNameEditor; }
		public NextButton NextButton() { return NextButton; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class projectNameEditor extends JavaEditorNodeBase
	{

		
								public projectNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NextButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class projectNameEditor extends JavaEditorNodeBase
	{

		
								public projectNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nextButton extends JavaButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class treeTreeView extends JavaTreeViewNodeBase
	{

		
								public treeTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveBPMenu extends JavaMenuNodeBase
	{

		
								public RemoveBPMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RemoveBPMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Remove from Build Path").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewModuleInfoJavaWindow extends JavaWindowNodeBase
	{

		
			private DontCreatebutton DontCreatebutton;
						public NewModuleInfoJavaWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					DontCreatebutton = new DontCreatebutton(this, applicationModel);
			
			setDisplayName("New module-info.java");
		}
				public NewModuleInfoJavaWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DontCreatebutton = new DontCreatebutton(this, applicationModel);

			setDisplayName("New module-info.java");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New module-info.java").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DontCreatebutton DontCreatebutton() { return DontCreatebutton; }
		
			public class DontCreatebutton extends JavaButtonNodeBase
	{

		
								public DontCreatebutton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't Create");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Don't Create").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class JavaBuildSettingsTreeView extends JavaTreeViewNodeBase
	{

		
								public JavaBuildSettingsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaBuildSettingsTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Define the Java build settings.").nativeClass("org.eclipse.swt.widgets.Tree").tagName("Define the Java build settings.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AddMeeclipseNatureWindow extends JavaWindowNodeBase
	{

		
			private oKButton oKButton;
	private createExampleFilesDoesnTOverwriteExistingFilesCheckBox createExampleFilesDoesnTOverwriteExistingFilesCheckBox;
	private addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox;
	private addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox;
						public AddMeeclipseNatureWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
		createExampleFilesDoesnTOverwriteExistingFilesCheckBox = new createExampleFilesDoesnTOverwriteExistingFilesCheckBox(this, applicationModel);
		addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox = new addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox(this, applicationModel);
		addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox = new addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox(this, applicationModel);
			
			setDisplayName("Add meeclipse Nature Window");
		}
				public AddMeeclipseNatureWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);
		createExampleFilesDoesnTOverwriteExistingFilesCheckBox = new createExampleFilesDoesnTOverwriteExistingFilesCheckBox(this, applicationModel);
		addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox = new addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox(this, applicationModel);
		addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox = new addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox(this, applicationModel);

			setDisplayName("Add meeclipse Nature Window");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Add meeclipse Nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		public createExampleFilesDoesnTOverwriteExistingFilesCheckBox createExampleFilesDoesnTOverwriteExistingFilesCheckBox() { return createExampleFilesDoesnTOverwriteExistingFilesCheckBox; }
		public addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox() { return addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox; }
		public addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox() { return addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox; }
		
			public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class createExampleFilesDoesnTOverwriteExistingFilesCheckBox extends JavaCheckBoxNodeBase
	{

		
								public createExampleFilesDoesnTOverwriteExistingFilesCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create example files (doesn't overwrite existing files).");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Create example files (doesn't overwrite existing files).").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox extends JavaCheckBoxNodeBase
	{

		
								public addMeeclipseNatureThenMeeclipseObjectDependenciesWillBeAvailableCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add meeclipse nature (then meeclipse object dependencies will be available).");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Add meeclipse nature (then meeclipse object dependencies will be available).").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox extends JavaCheckBoxNodeBase
	{

		
								public addJavaNatureCreateClasspathAndOpenJavaSourceFolderSelectionIfRequiredCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add Java nature (create .classpath and open Java source folder selection if required).");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Add Java nature (create .classpath and open Java source folder selection if required).").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AutomaticMeeclipseWorkspaceSettingsWindow extends JavaWindowNodeBase
	{

		
			private UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox;
	private UseMeeclipseJavaFoldingCheckBox UseMeeclipseJavaFoldingCheckBox;
	private OKButton OKButton;
	private donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox;
	private resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox;
						public AutomaticMeeclipseWorkspaceSettingsWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox = new UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox(this, applicationModel);
		UseMeeclipseJavaFoldingCheckBox = new UseMeeclipseJavaFoldingCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox = new donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox(this, applicationModel);
		resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox = new resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox(this, applicationModel);
			
			setDisplayName("Automatic meeclipse workspace settings");
		}
				public AutomaticMeeclipseWorkspaceSettingsWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox = new UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox(this, applicationModel);
		UseMeeclipseJavaFoldingCheckBox = new UseMeeclipseJavaFoldingCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
		donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox = new donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox(this, applicationModel);
		resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox = new resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox(this, applicationModel);

			setDisplayName("Automatic meeclipse workspace settings");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Automatic meeclipse workspace settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox() { return UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox; }
		public UseMeeclipseJavaFoldingCheckBox UseMeeclipseJavaFoldingCheckBox() { return UseMeeclipseJavaFoldingCheckBox; }
		public OKButton OKButton() { return OKButton; }
		public donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox() { return donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox; }
		public resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox() { return resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox; }
		
			public class UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox extends JavaCheckBoxNodeBase
	{

		
								public UseMeeclipseJavaEditorAsTheDefaultJavaEditorCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Use meeclipse Java Editor as the default .java-Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Use meeclipse Java Editor as the default .java-Editor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UseMeeclipseJavaFoldingCheckBox extends JavaCheckBoxNodeBase
	{

		
								public UseMeeclipseJavaFoldingCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Use meeclipse Java Folding");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Use meeclipse Java Folding").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public donTAskAgainForAutomaticMeeclipseWorkspaceSettingsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Don't ask again for automatic meeclipse workspace settings");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Don't ask again for automatic meeclipse workspace settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox extends JavaCheckBoxNodeBase
	{

		
								public resetJavaPerspectiveRequiredToDisplayAllMeeclipseTypesCorrectlyCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Reset Java Perspective (required to display all meeclipse types correctly)");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Reset Java Perspective (required to display all meeclipse types correctly)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class createMeeclipseNaturalMainprogramWindow extends JavaWindowNodeBase
	{

		
			private PackageEditor PackageEditor;
	private NameEditor NameEditor;
	private FinishButton FinishButton;
	private generateCommentsCheckBox generateCommentsCheckBox;
	private NaturalMainProgramBrowseButton NaturalMainProgramBrowseButton;
	private PackageSelectionWindow PackageSelectionWindow;
						public createMeeclipseNaturalMainprogramWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		generateCommentsCheckBox = new generateCommentsCheckBox(this, applicationModel);
		NaturalMainProgramBrowseButton = new NaturalMainProgramBrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
			
			setDisplayName("Create meeclipse Natural Mainprogram");
		}
				public createMeeclipseNaturalMainprogramWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		generateCommentsCheckBox = new generateCommentsCheckBox(this, applicationModel);
		NaturalMainProgramBrowseButton = new NaturalMainProgramBrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);

			setDisplayName("Create meeclipse Natural Mainprogram");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create meeclipse Natural Mainprogram").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageEditor PackageEditor() { return PackageEditor; }
		public NameEditor NameEditor() { return NameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		public generateCommentsCheckBox generateCommentsCheckBox() { return generateCommentsCheckBox; }
		public NaturalMainProgramBrowseButton NaturalMainProgramBrowseButton() { return NaturalMainProgramBrowseButton; }
		public PackageSelectionWindow PackageSelectionWindow() { return PackageSelectionWindow; }
		
			public class PackageEditor extends JavaEditorNodeBase
	{

		
								public PackageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class generateCommentsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public generateCommentsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Generate comments");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Generate comments").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalMainProgramBrowseButton extends JavaButtonNodeBase
	{

		
								public NaturalMainProgramBrowseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalMainProgramBrowseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageSelectionWindow extends JavaWindowNodeBase
	{

		
			private ChooseAFolderTable ChooseAFolderTable;
	private CancelButton CancelButton;
						public PackageSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Package Selection");
		}
				public PackageSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Package Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Package Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseAFolderTable ChooseAFolderTable() { return ChooseAFolderTable; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class ChooseAFolderTable extends JavaTableNodeBase
	{

		
								public ChooseAFolderTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose a folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewMeeclipseJCopyWindow extends JavaWindowNodeBase
	{

		
			private NewJCopyScreen NewJCopyScreen;
	private EnterOrSelectTheParentFolderEditor EnterOrSelectTheParentFolderEditor;
	private FinishButton FinishButton;
	private FileNameEditor FileNameEditor;
						public NewMeeclipseJCopyWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewJCopyScreen = new NewJCopyScreen(this, applicationModel);
		EnterOrSelectTheParentFolderEditor = new EnterOrSelectTheParentFolderEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		FileNameEditor = new FileNameEditor(this, applicationModel);
			
			setDisplayName("New meeclipse JCopy");
		}
				public NewMeeclipseJCopyWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewJCopyScreen = new NewJCopyScreen(this, applicationModel);
		EnterOrSelectTheParentFolderEditor = new EnterOrSelectTheParentFolderEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		FileNameEditor = new FileNameEditor(this, applicationModel);

			setDisplayName("New meeclipse JCopy");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New meeclipse JCopy").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewJCopyScreen NewJCopyScreen() { return NewJCopyScreen; }
		public EnterOrSelectTheParentFolderEditor EnterOrSelectTheParentFolderEditor() { return EnterOrSelectTheParentFolderEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		public FileNameEditor FileNameEditor() { return FileNameEditor; }
		
			public class NewJCopyScreen extends JavaUiObjectNodeBase
	{

		
			private FileNameEditor FileNameEditor;
	private FinishButton FinishButton;
						public NewJCopyScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FileNameEditor = new FileNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New JCopy Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FileNameEditor FileNameEditor() { return FileNameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class FileNameEditor extends JavaEditorNodeBase
	{

		
								public FileNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("File Name Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("File name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class EnterOrSelectTheParentFolderEditor extends JavaEditorNodeBase
	{

		
								public EnterOrSelectTheParentFolderEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enter or select the parent folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Enter or select the parent folder:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FileNameEditor extends JavaEditorNodeBase
	{

		
								public FileNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("File name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("File name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ViewMenuToolBar extends JavaToolBarNodeBase
	{

		
								public ViewMenuToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("View Menu ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ContextMenu extends StdMenuNodeBase
	{

		
								public ContextMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Context Menu");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.MenuDescription.Builder().type(com.hp.lft.sdk.stdwin.MenuType.CONTEXT_MENU).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FiltersMenu extends JavaMenuNodeBase
	{

		
								public FiltersMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ViewMenuToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Filters...").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JavaElementFiltersWindow extends JavaWindowNodeBase
	{

		
			private Table Table;
	private OKButton OKButton;
						public JavaElementFiltersWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Table = new Table(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Java Element Filters");
		}
				public JavaElementFiltersWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Table = new Table(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Java Element Filters");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Java Element Filters").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Table Table() { return Table; }
		public OKButton OKButton() { return OKButton; }
		
			public class Table extends JavaTableNodeBase
	{

		
								public Table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BottomTabControl extends JavaTabControlNodeBase
	{

		
			private ProblemsTreeView ProblemsTreeView;
	private BreakpointsTreeView BreakpointsTreeView;
	private SearchTreeView SearchTreeView;
	private ConsoleEditor ConsoleEditor;
	private ObjectDependenciesViewMenuToolBar ObjectDependenciesViewMenuToolBar;
	private ToolBar ToolBar;
	private ExpertViewtEditor ExpertViewtEditor;
	private CountButton CountButton;
	private CountEditor CountEditor;
	private CountplusButton CountplusButton;
	private ExpertConsoleEditor ExpertConsoleEditor;
						public BottomTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ProblemsTreeView = new ProblemsTreeView(this, applicationModel);
		BreakpointsTreeView = new BreakpointsTreeView(this, applicationModel);
		SearchTreeView = new SearchTreeView(this, applicationModel);
		ConsoleEditor = new ConsoleEditor(this, applicationModel);
		ObjectDependenciesViewMenuToolBar = new ObjectDependenciesViewMenuToolBar(this, applicationModel);
		ToolBar = new ToolBar(this, applicationModel);
		ExpertViewtEditor = new ExpertViewtEditor(this, applicationModel);
		CountButton = new CountButton(this, applicationModel);
		CountEditor = new CountEditor(this, applicationModel);
		CountplusButton = new CountplusButton(this, applicationModel);
		ExpertConsoleEditor = new ExpertConsoleEditor(this, applicationModel);

			setDisplayName("Bottom Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_BIG__Y_BIG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ProblemsTreeView ProblemsTreeView() { return ProblemsTreeView; }
		public BreakpointsTreeView BreakpointsTreeView() { return BreakpointsTreeView; }
		public SearchTreeView SearchTreeView() { return SearchTreeView; }
		public ConsoleEditor ConsoleEditor() { return ConsoleEditor; }
		public ObjectDependenciesViewMenuToolBar ObjectDependenciesViewMenuToolBar() { return ObjectDependenciesViewMenuToolBar; }
		public ToolBar ToolBar() { return ToolBar; }
		public ExpertViewtEditor ExpertViewtEditor() { return ExpertViewtEditor; }
		public CountButton CountButton() { return CountButton; }
		public CountEditor CountEditor() { return CountEditor; }
		public CountplusButton CountplusButton() { return CountplusButton; }
		public ExpertConsoleEditor ExpertConsoleEditor() { return ExpertConsoleEditor; }
		
			public class ProblemsTreeView extends JavaTreeViewNodeBase
	{

		
								public ProblemsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Problems Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BreakpointsTreeView extends JavaTreeViewNodeBase
	{

		
								public BreakpointsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Breakpoints Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SearchTreeView extends JavaTreeViewNodeBase
	{

		
								public SearchTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConsoleEditor extends JavaEditorNodeBase
	{

		
								public ConsoleEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Console Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ObjectDependenciesViewMenuToolBar extends JavaToolBarNodeBase
	{

		
								public ObjectDependenciesViewMenuToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ObjectDependenciesViewMenuToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").path("ToolBar;Composite;CTabFolder;Composite;Composite;Composite;Composite;Composite;Shell;").size(new com.hp.lft.sdk.SizeProperty().setHeight(22).setWidth(23)).tagName("ToolBar").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ToolBar extends JavaToolBarNodeBase
	{

		
								public ToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpertViewtEditor extends JavaEditorNodeBase
	{

		
								public ExpertViewtEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExpertViewtEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Text").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CountButton extends JavaButtonNodeBase
	{

		
								public CountButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Count++ Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Count++ Button").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CountEditor extends JavaEditorNodeBase
	{

		
								public CountEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CountEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Text").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CountplusButton extends JavaButtonNodeBase
	{

		
								public CountplusButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Count++");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Count++").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpertConsoleEditor extends JavaEditorNodeBase
	{

		
								public ExpertConsoleEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("expert Console");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("expert Console").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class EditorTabControl extends JavaTabControlNodeBase
	{

		
			private EditorWindowTextEditor EditorWindowTextEditor;
						public EditorTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EditorWindowTextEditor = new EditorWindowTextEditor(this, applicationModel);

			setDisplayName("Editor Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_UNK__Y_SMALL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EditorWindowTextEditor EditorWindowTextEditor() { return EditorWindowTextEditor; }
		
			public class EditorWindowTextEditor extends JavaEditorNodeBase
	{

		
			private MeeclipseMenu MeeclipseMenu;
	private DbMaintenanceToolMenu DbMaintenanceToolMenu;
						public EditorWindowTextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					MeeclipseMenu = new MeeclipseMenu(this, applicationModel);
		DbMaintenanceToolMenu = new DbMaintenanceToolMenu(this, applicationModel);

			setDisplayName("Editor Window Text Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.custom.StyledText").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public MeeclipseMenu MeeclipseMenu() { return MeeclipseMenu; }
		public DbMaintenanceToolMenu DbMaintenanceToolMenu() { return DbMaintenanceToolMenu; }
		
			public class MeeclipseMenu extends JavaMenuNodeBase
	{

		
			private RemoveJCopyMenu RemoveJCopyMenu;
						public MeeclipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					RemoveJCopyMenu = new RemoveJCopyMenu(this, applicationModel);

			setDisplayName("MeeclipseMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("meeclipse").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public RemoveJCopyMenu RemoveJCopyMenu() { return RemoveJCopyMenu; }
		
			public class RemoveJCopyMenu extends JavaMenuNodeBase
	{

		
								public RemoveJCopyMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RemoveJCopyMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Remove JCopy/Data Using Code").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DbMaintenanceToolMenu extends JavaMenuNodeBase
	{

		
			private MaintenanceMenu MaintenanceMenu;
						public DbMaintenanceToolMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					MaintenanceMenu = new MaintenanceMenu(this, applicationModel);

			setDisplayName("db maintenance tool");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("db maintenance tool").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public MaintenanceMenu MaintenanceMenu() { return MaintenanceMenu; }
		
			public class MaintenanceMenu extends JavaMenuNodeBase
	{

		
			private FullGenerationMenu FullGenerationMenu;
	private AddMenu AddMenu;
	private ModifyMenu ModifyMenu;
	private RemoveMenu RemoveMenu;
						public MaintenanceMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FullGenerationMenu = new FullGenerationMenu(this, applicationModel);
		AddMenu = new AddMenu(this, applicationModel);
		ModifyMenu = new ModifyMenu(this, applicationModel);
		RemoveMenu = new RemoveMenu(this, applicationModel);

			setDisplayName("Maintenance");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Maintenance").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FullGenerationMenu FullGenerationMenu() { return FullGenerationMenu; }
		public AddMenu AddMenu() { return AddMenu; }
		public ModifyMenu ModifyMenu() { return ModifyMenu; }
		public RemoveMenu RemoveMenu() { return RemoveMenu; }
		
			public class FullGenerationMenu extends JavaMenuNodeBase
	{

		
								public FullGenerationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Full generation");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Full generation").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddMenu extends JavaMenuNodeBase
	{

		
								public AddMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModifyMenu extends JavaMenuNodeBase
	{

		
								public ModifyMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Modify");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Modify").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveMenu extends JavaMenuNodeBase
	{

		
								public RemoveMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Remove");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Remove").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	}

	}

	public class newMeeclipseProjectWindow extends JavaWindowNodeBase
	{

		
			private finishButton finishButton;
	private newProjectEditor newProjectEditor;
	private useDefaultLocationCheckBox useDefaultLocationCheckBox;
	private browseButton browseButton;
	private projectLocationEditor projectLocationEditor;
	private createExampleFilesCheckBox createExampleFilesCheckBox;
	private CreateAMeeclipseProjectEditor CreateAMeeclipseProjectEditor;
	private ProjectAlreadyExists ProjectAlreadyExists;
						public newMeeclipseProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					finishButton = new finishButton(this, applicationModel);
		newProjectEditor = new newProjectEditor(this, applicationModel);
		useDefaultLocationCheckBox = new useDefaultLocationCheckBox(this, applicationModel);
		browseButton = new browseButton(this, applicationModel);
		projectLocationEditor = new projectLocationEditor(this, applicationModel);
		createExampleFilesCheckBox = new createExampleFilesCheckBox(this, applicationModel);
		CreateAMeeclipseProjectEditor = new CreateAMeeclipseProjectEditor(this, applicationModel);
		ProjectAlreadyExists = new ProjectAlreadyExists(this, applicationModel);
			
			setDisplayName("New meeclipse Project");
		}
				public newMeeclipseProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					finishButton = new finishButton(this, applicationModel);
		newProjectEditor = new newProjectEditor(this, applicationModel);
		useDefaultLocationCheckBox = new useDefaultLocationCheckBox(this, applicationModel);
		browseButton = new browseButton(this, applicationModel);
		projectLocationEditor = new projectLocationEditor(this, applicationModel);
		createExampleFilesCheckBox = new createExampleFilesCheckBox(this, applicationModel);
		CreateAMeeclipseProjectEditor = new CreateAMeeclipseProjectEditor(this, applicationModel);
		ProjectAlreadyExists = new ProjectAlreadyExists(this, applicationModel);

			setDisplayName("New meeclipse Project");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New meeclipse Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public finishButton finishButton() { return finishButton; }
		public newProjectEditor newProjectEditor() { return newProjectEditor; }
		public useDefaultLocationCheckBox useDefaultLocationCheckBox() { return useDefaultLocationCheckBox; }
		public browseButton browseButton() { return browseButton; }
		public projectLocationEditor projectLocationEditor() { return projectLocationEditor; }
		public createExampleFilesCheckBox createExampleFilesCheckBox() { return createExampleFilesCheckBox; }
		public CreateAMeeclipseProjectEditor CreateAMeeclipseProjectEditor() { return CreateAMeeclipseProjectEditor; }
		public ProjectAlreadyExists ProjectAlreadyExists() { return ProjectAlreadyExists; }
		
			public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newProjectEditor extends JavaEditorNodeBase
	{

		
								public newProjectEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Project:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("New Project:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class useDefaultLocationCheckBox extends JavaCheckBoxNodeBase
	{

		
								public useDefaultLocationCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Use default location");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Use default location").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class browseButton extends JavaButtonNodeBase
	{

		
								public browseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("browseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class projectLocationEditor extends JavaEditorNodeBase
	{

		
								public projectLocationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project location");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project location").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class createExampleFilesCheckBox extends JavaCheckBoxNodeBase
	{

		
								public createExampleFilesCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create example files");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Create example files").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateAMeeclipseProjectEditor extends JavaEditorNodeBase
	{

		
								public CreateAMeeclipseProjectEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create a meeclipse project");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("New meeclipse Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectAlreadyExists extends JavaLabelNodeBase
	{

		
								public ProjectAlreadyExists(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectAlreadyExists");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().attachedText(" Project with specified name already exists").label(" Project with specified name already exists").tagName(" Project with specified name already exists(st)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class propertiesForMeeclipseProjectWindow extends JavaWindowNodeBase
	{

		
			private treeTreeView treeTreeView;
	private locationEditor locationEditor;
	private folderForMapGenerationEditor folderForMapGenerationEditor;
	private cancelButton cancelButton;
						public propertiesForMeeclipseProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					treeTreeView = new treeTreeView(this, applicationModel);
		locationEditor = new locationEditor(this, applicationModel);
		folderForMapGenerationEditor = new folderForMapGenerationEditor(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);
			
			setDisplayName("Properties for MeeclipseProject");
		}
				public propertiesForMeeclipseProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					treeTreeView = new treeTreeView(this, applicationModel);
		locationEditor = new locationEditor(this, applicationModel);
		folderForMapGenerationEditor = new folderForMapGenerationEditor(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("Properties for MeeclipseProject");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Properties for MeeclipseProject").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public treeTreeView treeTreeView() { return treeTreeView; }
		public locationEditor locationEditor() { return locationEditor; }
		public folderForMapGenerationEditor folderForMapGenerationEditor() { return folderForMapGenerationEditor; }
		public cancelButton cancelButton() { return cancelButton; }
		
			public class treeTreeView extends JavaTreeViewNodeBase
	{

		
								public treeTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class locationEditor extends JavaEditorNodeBase
	{

		
								public locationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Location:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Location:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class folderForMapGenerationEditor extends JavaEditorNodeBase
	{

		
								public folderForMapGenerationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder for map generation:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Folder for map generation:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cancelButton extends JavaButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FileMenu extends JavaMenuNodeBase
	{

		
			private SwitchWorkspaceMenu SwitchWorkspaceMenu;
	private NewMenu NewMenu;
						public FileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SwitchWorkspaceMenu = new SwitchWorkspaceMenu(this, applicationModel);
		NewMenu = new NewMenu(this, applicationModel);

			setDisplayName("FileMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("File").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SwitchWorkspaceMenu SwitchWorkspaceMenu() { return SwitchWorkspaceMenu; }
		public NewMenu NewMenu() { return NewMenu; }
		
			public class SwitchWorkspaceMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public SwitchWorkspaceMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("SwitchWorkspaceMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Switch Workspace").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").nativeClass("org.eclipse.swt.widgets.MenuItem").path("MenuItem;MenuItem;MenuItem;Shell;").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewMenu extends JavaMenuNodeBase
	{

		
			private JavaProjectMenu JavaProjectMenu;
	private ProjectMenu ProjectMenu;
	private Package Package;
	private UntitledTextFileMenu UntitledTextFileMenu;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					JavaProjectMenu = new JavaProjectMenu(this, applicationModel);
		ProjectMenu = new ProjectMenu(this, applicationModel);
		Package = new Package(this, applicationModel);
		UntitledTextFileMenu = new UntitledTextFileMenu(this, applicationModel);

			setDisplayName("NewMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("New").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public JavaProjectMenu JavaProjectMenu() { return JavaProjectMenu; }
		public ProjectMenu ProjectMenu() { return ProjectMenu; }
		public Package Package() { return Package; }
		public UntitledTextFileMenu UntitledTextFileMenu() { return UntitledTextFileMenu; }
		
			public class JavaProjectMenu extends JavaMenuNodeBase
	{

		
								public JavaProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Java Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectMenu extends JavaMenuNodeBase
	{

		
								public ProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Project...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Package extends JavaMenuNodeBase
	{

		
								public Package(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Package").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UntitledTextFileMenu extends JavaMenuNodeBase
	{

		
								public UntitledTextFileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Untitled Text File");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Untitled Text File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class innoWakeLauncherWindow extends JavaWindowNodeBase
	{

		
			private workspaceList workspaceList;
	private cancelButton cancelButton;
						public innoWakeLauncherWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					workspaceList = new workspaceList(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);
			
			setDisplayName("innoWake Launcher");
		}
				public innoWakeLauncherWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					workspaceList = new workspaceList(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("innoWake Launcher");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("innoWake Launcher").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public workspaceList workspaceList() { return workspaceList; }
		public cancelButton cancelButton() { return cancelButton; }
		
			public class workspaceList extends JavaListNodeBase
	{

		
								public workspaceList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Workspace:");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Workspace:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cancelButton extends JavaButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class deleteResourcesWindow extends JavaWindowNodeBase
	{

		
			private deleteProjectContentsOnDiskCannotBeUndoneCheckBox deleteProjectContentsOnDiskCannotBeUndoneCheckBox;
	private oKButton oKButton;
						public deleteResourcesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					deleteProjectContentsOnDiskCannotBeUndoneCheckBox = new deleteProjectContentsOnDiskCannotBeUndoneCheckBox(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Delete Resources");
		}
				public deleteResourcesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					deleteProjectContentsOnDiskCannotBeUndoneCheckBox = new deleteProjectContentsOnDiskCannotBeUndoneCheckBox(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Delete Resources");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Delete Resources").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public deleteProjectContentsOnDiskCannotBeUndoneCheckBox deleteProjectContentsOnDiskCannotBeUndoneCheckBox() { return deleteProjectContentsOnDiskCannotBeUndoneCheckBox; }
		public oKButton oKButton() { return oKButton; }
		
			public class deleteProjectContentsOnDiskCannotBeUndoneCheckBox extends JavaCheckBoxNodeBase
	{

		
								public deleteProjectContentsOnDiskCannotBeUndoneCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete project contents on disk (cannot be undone)");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Delete project contents on disk (cannot be undone)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class propertiesForJavaProjectWindow extends JavaWindowNodeBase
	{

		
			private treeTreeView treeTreeView;
	private folderForMapGenerationEditor folderForMapGenerationEditor;
	private cancelButton cancelButton;
						public propertiesForJavaProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					treeTreeView = new treeTreeView(this, applicationModel);
		folderForMapGenerationEditor = new folderForMapGenerationEditor(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);
			
			setDisplayName("Properties for JavaProject");
		}
				public propertiesForJavaProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					treeTreeView = new treeTreeView(this, applicationModel);
		folderForMapGenerationEditor = new folderForMapGenerationEditor(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("Properties for JavaProject");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Properties for JavaProject").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public treeTreeView treeTreeView() { return treeTreeView; }
		public folderForMapGenerationEditor folderForMapGenerationEditor() { return folderForMapGenerationEditor; }
		public cancelButton cancelButton() { return cancelButton; }
		
			public class treeTreeView extends JavaTreeViewNodeBase
	{

		
								public treeTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class folderForMapGenerationEditor extends JavaEditorNodeBase
	{

		
								public folderForMapGenerationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder for map generation:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Folder for map generation:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cancelButton extends JavaButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class propertiesForJavaProject2Window extends JavaWindowNodeBase
	{

		
			private treeTreeView treeTreeView;
	private folderForMapGenerationEditor folderForMapGenerationEditor;
	private cancelButton cancelButton;
						public propertiesForJavaProject2Window(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					treeTreeView = new treeTreeView(this, applicationModel);
		folderForMapGenerationEditor = new folderForMapGenerationEditor(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);
			
			setDisplayName("Properties for JavaProject2");
		}
				public propertiesForJavaProject2Window(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					treeTreeView = new treeTreeView(this, applicationModel);
		folderForMapGenerationEditor = new folderForMapGenerationEditor(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("Properties for JavaProject2");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Properties for JavaProject2").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public treeTreeView treeTreeView() { return treeTreeView; }
		public folderForMapGenerationEditor folderForMapGenerationEditor() { return folderForMapGenerationEditor; }
		public cancelButton cancelButton() { return cancelButton; }
		
			public class treeTreeView extends JavaTreeViewNodeBase
	{

		
								public treeTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class folderForMapGenerationEditor extends JavaEditorNodeBase
	{

		
								public folderForMapGenerationEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder for map generation:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Folder for map generation:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cancelButton extends JavaButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newMeeclipseJMapWindow extends JavaWindowNodeBase
	{

		
			private fileNameEditor fileNameEditor;
	private finishButton finishButton;
	private CompositeUiObject CompositeUiObject;
	private EnterOrSelectTheParentFolderEditor EnterOrSelectTheParentFolderEditor;
						public newMeeclipseJMapWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					fileNameEditor = new fileNameEditor(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		CompositeUiObject = new CompositeUiObject(this, applicationModel);
		EnterOrSelectTheParentFolderEditor = new EnterOrSelectTheParentFolderEditor(this, applicationModel);
			
			setDisplayName("New meeclipse JMap");
		}
				public newMeeclipseJMapWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					fileNameEditor = new fileNameEditor(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		CompositeUiObject = new CompositeUiObject(this, applicationModel);
		EnterOrSelectTheParentFolderEditor = new EnterOrSelectTheParentFolderEditor(this, applicationModel);

			setDisplayName("New meeclipse JMap");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New meeclipse JMap").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public fileNameEditor fileNameEditor() { return fileNameEditor; }
		public finishButton finishButton() { return finishButton; }
		public CompositeUiObject CompositeUiObject() { return CompositeUiObject; }
		public EnterOrSelectTheParentFolderEditor EnterOrSelectTheParentFolderEditor() { return EnterOrSelectTheParentFolderEditor; }
		
			public class fileNameEditor extends JavaEditorNodeBase
	{

		
								public fileNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("File name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("File name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends JavaButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CompositeUiObject extends JavaUiObjectNodeBase
	{

		
								public CompositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnterOrSelectTheParentFolderEditor extends JavaEditorNodeBase
	{

		
								public EnterOrSelectTheParentFolderEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterOrSelectTheParentFolderEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Enter or select the parent folder:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class figureCanvasUiObject extends JavaUiObjectNodeBase
	{

		
								public figureCanvasUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FigureCanvas");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.draw2d.FigureCanvas").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class flyoutPaletteCompositeTitleCanvasUiObject extends JavaUiObjectNodeBase
	{

		
								public flyoutPaletteCompositeTitleCanvasUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FlyoutPaletteComposite$TitleCanvas");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.gef.ui.palette.FlyoutPaletteComposite$TitleCanvas").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class includeJCopyDataUsingCodeWindow extends JavaWindowNodeBase
	{

		
			private yesButton yesButton;
	private noButton noButton;
	private oKButton oKButton;
	private Label Label;
						public includeJCopyDataUsingCodeWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					yesButton = new yesButton(this, applicationModel);
		noButton = new noButton(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		Label = new Label(this, applicationModel);
			
			setDisplayName("Include JCopy/Data Using Code");
		}
				public includeJCopyDataUsingCodeWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					yesButton = new yesButton(this, applicationModel);
		noButton = new noButton(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
		Label = new Label(this, applicationModel);

			setDisplayName("Include JCopy/Data Using Code");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Include JCopy/Data Using Code").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public yesButton yesButton() { return yesButton; }
		public noButton noButton() { return noButton; }
		public oKButton oKButton() { return oKButton; }
		public Label Label() { return Label; }
		
			public class yesButton extends JavaButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class noButton extends JavaButtonNodeBase
	{

		
								public noButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("No");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("No").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Label extends JavaLabelNodeBase
	{

		
								public Label(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Label");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SearchMenu extends JavaMenuNodeBase
	{

		
			private FileMenu FileMenu;
						public SearchMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FileMenu = new FileMenu(this, applicationModel);

			setDisplayName("Search Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Search").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FileMenu FileMenu() { return FileMenu; }
		
			public class FileMenu extends JavaMenuNodeBase
	{

		
								public FileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FileMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("File...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class searchWindow extends JavaWindowNodeBase
	{

		
			private containingTextList containingTextList;
	private caseSensitiveCheckBox caseSensitiveCheckBox;
	private searchButton searchButton;
	private selectedResourceInPackageExplorerRadioButton selectedResourceInPackageExplorerRadioButton;
	private ReferencesSearchEditor ReferencesSearchEditor;
	private OKButton OKButton;
						public searchWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					containingTextList = new containingTextList(this, applicationModel);
		caseSensitiveCheckBox = new caseSensitiveCheckBox(this, applicationModel);
		searchButton = new searchButton(this, applicationModel);
		selectedResourceInPackageExplorerRadioButton = new selectedResourceInPackageExplorerRadioButton(this, applicationModel);
		ReferencesSearchEditor = new ReferencesSearchEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Search");
		}
				public searchWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					containingTextList = new containingTextList(this, applicationModel);
		caseSensitiveCheckBox = new caseSensitiveCheckBox(this, applicationModel);
		searchButton = new searchButton(this, applicationModel);
		selectedResourceInPackageExplorerRadioButton = new selectedResourceInPackageExplorerRadioButton(this, applicationModel);
		ReferencesSearchEditor = new ReferencesSearchEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Search");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Search").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public containingTextList containingTextList() { return containingTextList; }
		public caseSensitiveCheckBox caseSensitiveCheckBox() { return caseSensitiveCheckBox; }
		public searchButton searchButton() { return searchButton; }
		public selectedResourceInPackageExplorerRadioButton selectedResourceInPackageExplorerRadioButton() { return selectedResourceInPackageExplorerRadioButton; }
		public ReferencesSearchEditor ReferencesSearchEditor() { return ReferencesSearchEditor; }
		public OKButton OKButton() { return OKButton; }
		
			public class containingTextList extends JavaListNodeBase
	{

		
								public containingTextList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Containing text:");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Containing text:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class caseSensitiveCheckBox extends JavaCheckBoxNodeBase
	{

		
								public caseSensitiveCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Case sensitive");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Case sensitive").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class searchButton extends JavaButtonNodeBase
	{

		
								public searchButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Search");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Search").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class selectedResourceInPackageExplorerRadioButton extends JavaRadioButtonNodeBase
	{

		
								public selectedResourceInPackageExplorerRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Selected resource in 'Package Explorer'");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("Selected resource in 'Package Explorer'").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReferencesSearchEditor extends JavaEditorNodeBase
	{

		
								public ReferencesSearchEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReferencesSearchEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Select the type to search:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProjectPropertiesWindow extends JavaWindowNodeBase
	{

		
			private ApplyAndCloseButton ApplyAndCloseButton;
	private CancelButton CancelButton;
	private PropertiesTreeView PropertiesTreeView;
	private MeeclipseProjectPropertiesScreen MeeclipseProjectPropertiesScreen;
	private OnlyOnIncrementalBuildRadioButton OnlyOnIncrementalBuildRadioButton;
	private SelectButton SelectButton;
	private FolderSelectionWindow FolderSelectionWindow;
	private JavaBuildPathScreen JavaBuildPathScreen;
	private RequiredProjectSelectionWindow RequiredProjectSelectionWindow;
						public ProjectPropertiesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		PropertiesTreeView = new PropertiesTreeView(this, applicationModel);
		MeeclipseProjectPropertiesScreen = new MeeclipseProjectPropertiesScreen(this, applicationModel);
		OnlyOnIncrementalBuildRadioButton = new OnlyOnIncrementalBuildRadioButton(this, applicationModel);
		SelectButton = new SelectButton(this, applicationModel);
		FolderSelectionWindow = new FolderSelectionWindow(this, applicationModel);
		JavaBuildPathScreen = new JavaBuildPathScreen(this, applicationModel);
		RequiredProjectSelectionWindow = new RequiredProjectSelectionWindow(this, applicationModel);
			
			setDisplayName("Project Properties Window");
		}
				public ProjectPropertiesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
		PropertiesTreeView = new PropertiesTreeView(this, applicationModel);
		MeeclipseProjectPropertiesScreen = new MeeclipseProjectPropertiesScreen(this, applicationModel);
		OnlyOnIncrementalBuildRadioButton = new OnlyOnIncrementalBuildRadioButton(this, applicationModel);
		SelectButton = new SelectButton(this, applicationModel);
		FolderSelectionWindow = new FolderSelectionWindow(this, applicationModel);
		JavaBuildPathScreen = new JavaBuildPathScreen(this, applicationModel);
		RequiredProjectSelectionWindow = new RequiredProjectSelectionWindow(this, applicationModel);

			setDisplayName("Project Properties Window");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty("Properties for .*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public CancelButton CancelButton() { return CancelButton; }
		public PropertiesTreeView PropertiesTreeView() { return PropertiesTreeView; }
		public MeeclipseProjectPropertiesScreen MeeclipseProjectPropertiesScreen() { return MeeclipseProjectPropertiesScreen; }
		public OnlyOnIncrementalBuildRadioButton OnlyOnIncrementalBuildRadioButton() { return OnlyOnIncrementalBuildRadioButton; }
		public SelectButton SelectButton() { return SelectButton; }
		public FolderSelectionWindow FolderSelectionWindow() { return FolderSelectionWindow; }
		public JavaBuildPathScreen JavaBuildPathScreen() { return JavaBuildPathScreen; }
		public RequiredProjectSelectionWindow RequiredProjectSelectionWindow() { return RequiredProjectSelectionWindow; }
		
			public class ApplyAndCloseButton extends JavaButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply and Close");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PropertiesTreeView extends JavaTreeViewNodeBase
	{

		
								public PropertiesTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Properties Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MeeclipseProjectPropertiesScreen extends JavaUiObjectNodeBase
	{

		
			private neverRadioButton neverRadioButton;
						public MeeclipseProjectPropertiesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					neverRadioButton = new neverRadioButton(this, applicationModel);

			setDisplayName("Meeclipse Project Properties Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public neverRadioButton neverRadioButton() { return neverRadioButton; }
		
			public class neverRadioButton extends JavaRadioButtonNodeBase
	{

		
								public neverRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Never");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("Never").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class OnlyOnIncrementalBuildRadioButton extends JavaRadioButtonNodeBase
	{

		
								public OnlyOnIncrementalBuildRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OnlyOnIncrementalBuildRadioButton");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("Only on Incremental Build").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectButton extends JavaButtonNodeBase
	{

		
								public SelectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().attachedText("Select...").label("Select...").nativeClass("org.eclipse.swt.widgets.Button").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FolderSelectionWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
	private SelectSourceFolderTreeView SelectSourceFolderTreeView;
						public FolderSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
		SelectSourceFolderTreeView = new SelectSourceFolderTreeView(this, applicationModel);
			
			setDisplayName("Folder Selection");
		}
				public FolderSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);
		SelectSourceFolderTreeView = new SelectSourceFolderTreeView(this, applicationModel);

			setDisplayName("Folder Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Folder Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		public SelectSourceFolderTreeView SelectSourceFolderTreeView() { return SelectSourceFolderTreeView; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectSourceFolderTreeView extends JavaTreeViewNodeBase
	{

		
								public SelectSourceFolderTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select source folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Select source folder:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class JavaBuildPathScreen extends JavaUiObjectNodeBase
	{

		
			private AddButton AddButton;
	private JavaBuildPathTabControl JavaBuildPathTabControl;
						public JavaBuildPathScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddButton = new AddButton(this, applicationModel);
		JavaBuildPathTabControl = new JavaBuildPathTabControl(this, applicationModel);

			setDisplayName("Java Build Path Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddButton AddButton() { return AddButton; }
		public JavaBuildPathTabControl JavaBuildPathTabControl() { return JavaBuildPathTabControl; }
		
			public class AddButton extends JavaButtonNodeBase
	{

		
								public AddButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Add...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JavaBuildPathTabControl extends JavaTabControlNodeBase
	{

		
								public JavaBuildPathTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Java Build Path Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RequiredProjectSelectionWindow extends JavaWindowNodeBase
	{

		
			private SelectProjectsToAddTable SelectProjectsToAddTable;
	private OKButton OKButton;
						public RequiredProjectSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SelectProjectsToAddTable = new SelectProjectsToAddTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Required Project Selection");
		}
				public RequiredProjectSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectProjectsToAddTable = new SelectProjectsToAddTable(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Required Project Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Required Project Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectProjectsToAddTable SelectProjectsToAddTable() { return SelectProjectsToAddTable; }
		public OKButton OKButton() { return OKButton; }
		
			public class SelectProjectsToAddTable extends JavaTableNodeBase
	{

		
								public SelectProjectsToAddTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select projects to add:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().attachedText("Select projects to add:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class automaticMeeclipseWorkspaceSettings extends JavaWindowNodeBase
	{

		
			private oKButton oKButton;
						public automaticMeeclipseWorkspaceSettings(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Automatic meeclipse workspace");
		}
				public automaticMeeclipseWorkspaceSettings(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);

			setDisplayName("Automatic meeclipse workspace");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Automatic meeclipse workspace settings").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		
			public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RenamePackageWindow extends JavaWindowNodeBase
	{

		
			private NewName NewName;
	private OKButton OKButton;
						public RenamePackageWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewName = new NewName(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Rename Package");
		}
				public RenamePackageWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewName = new NewName(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Rename Package");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Rename Package").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewName NewName() { return NewName; }
		public OKButton OKButton() { return OKButton; }
		
			public class NewName extends JavaEditorNodeBase
	{

		
								public NewName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewName");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("New name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class saveAndLaunchWindow extends JavaWindowNodeBase
	{

		
			private oKButton oKButton;
						public saveAndLaunchWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Save and Launch");
		}
				public saveAndLaunchWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);

			setDisplayName("Save and Launch");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Save and Launch").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		
			public class oKButton extends JavaButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newProjectWindow extends JavaWindowNodeBase
	{

		
			private nextButton nextButton;
	private wizardsEditor wizardsEditor;
						public newProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					nextButton = new nextButton(this, applicationModel);
		wizardsEditor = new wizardsEditor(this, applicationModel);
			
			setDisplayName("New Project");
		}
				public newProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					nextButton = new nextButton(this, applicationModel);
		wizardsEditor = new wizardsEditor(this, applicationModel);

			setDisplayName("New Project");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Select a wizard").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public nextButton nextButton() { return nextButton; }
		public wizardsEditor wizardsEditor() { return wizardsEditor; }
		
			public class nextButton extends JavaButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class wizardsEditor extends JavaEditorNodeBase
	{

		
								public wizardsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PackageExplorerTabControl extends JavaTabControlNodeBase
	{

		
			private PackageExplorerTreeView PackageExplorerTreeView;
	private InitialComposite InitialComposite;
	private PackageViewMenuToolbar PackageViewMenuToolbar;
						public PackageExplorerTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageExplorerTreeView = new PackageExplorerTreeView(this, applicationModel);
		InitialComposite = new InitialComposite(this, applicationModel);
		PackageViewMenuToolbar = new PackageViewMenuToolbar(this, applicationModel);

			setDisplayName("Package Explorer Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageExplorerTreeView PackageExplorerTreeView() { return PackageExplorerTreeView; }
		public InitialComposite InitialComposite() { return InitialComposite; }
		public PackageViewMenuToolbar PackageViewMenuToolbar() { return PackageViewMenuToolbar; }
		
			public class PackageExplorerTreeView extends JavaTreeViewNodeBase
	{

		
			private NewMenu NewMenu;
	private MeeclipseMenu MeeclipseMenu;
	private BuildPathMenu BuildPathMenu;
	private PropertiesMenu PropertiesMenu;
	private RunAsMenu RunAsMenu;
	private Delete Delete;
	private ReplaceWithMenu ReplaceWithMenu;
	private OpenWithMenu OpenWithMenu;
	private FieldTracingMenu FieldTracingMenu;
	private BatchclipseMenu BatchclipseMenu;
	private ReferencesMenu ReferencesMenu;
	private Copy Copy;
	private Paste Paste;
	private RefreshMenu RefreshMenu;
	private DeleteMenu DeleteMenu;
	private ExportDemoViewScriptMenu ExportDemoViewScriptMenu;
	private ShowBMSmapMenu ShowBMSmapMenu;
	private ImportMenu ImportMenu;
	private ExpertMenu ExpertMenu;
	private RefactorMenu RefactorMenu;
	private DBMaintenanceToolMenu DBMaintenanceToolMenu;
	private InnoWakeRefactoringMenu InnoWakeRefactoringMenu;
						public PackageExplorerTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewMenu = new NewMenu(this, applicationModel);
		MeeclipseMenu = new MeeclipseMenu(this, applicationModel);
		BuildPathMenu = new BuildPathMenu(this, applicationModel);
		PropertiesMenu = new PropertiesMenu(this, applicationModel);
		RunAsMenu = new RunAsMenu(this, applicationModel);
		Delete = new Delete(this, applicationModel);
		ReplaceWithMenu = new ReplaceWithMenu(this, applicationModel);
		OpenWithMenu = new OpenWithMenu(this, applicationModel);
		FieldTracingMenu = new FieldTracingMenu(this, applicationModel);
		BatchclipseMenu = new BatchclipseMenu(this, applicationModel);
		ReferencesMenu = new ReferencesMenu(this, applicationModel);
		Copy = new Copy(this, applicationModel);
		Paste = new Paste(this, applicationModel);
		RefreshMenu = new RefreshMenu(this, applicationModel);
		DeleteMenu = new DeleteMenu(this, applicationModel);
		ExportDemoViewScriptMenu = new ExportDemoViewScriptMenu(this, applicationModel);
		ShowBMSmapMenu = new ShowBMSmapMenu(this, applicationModel);
		ImportMenu = new ImportMenu(this, applicationModel);
		ExpertMenu = new ExpertMenu(this, applicationModel);
		RefactorMenu = new RefactorMenu(this, applicationModel);
		DBMaintenanceToolMenu = new DBMaintenanceToolMenu(this, applicationModel);
		InnoWakeRefactoringMenu = new InnoWakeRefactoringMenu(this, applicationModel);

			setDisplayName("Package Explorer Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewMenu NewMenu() { return NewMenu; }
		public MeeclipseMenu MeeclipseMenu() { return MeeclipseMenu; }
		public BuildPathMenu BuildPathMenu() { return BuildPathMenu; }
		public PropertiesMenu PropertiesMenu() { return PropertiesMenu; }
		public RunAsMenu RunAsMenu() { return RunAsMenu; }
		public Delete Delete() { return Delete; }
		public ReplaceWithMenu ReplaceWithMenu() { return ReplaceWithMenu; }
		public OpenWithMenu OpenWithMenu() { return OpenWithMenu; }
		public FieldTracingMenu FieldTracingMenu() { return FieldTracingMenu; }
		public BatchclipseMenu BatchclipseMenu() { return BatchclipseMenu; }
		public ReferencesMenu ReferencesMenu() { return ReferencesMenu; }
		public Copy Copy() { return Copy; }
		public Paste Paste() { return Paste; }
		public RefreshMenu RefreshMenu() { return RefreshMenu; }
		public DeleteMenu DeleteMenu() { return DeleteMenu; }
		public ExportDemoViewScriptMenu ExportDemoViewScriptMenu() { return ExportDemoViewScriptMenu; }
		public ShowBMSmapMenu ShowBMSmapMenu() { return ShowBMSmapMenu; }
		public ImportMenu ImportMenu() { return ImportMenu; }
		public ExpertMenu ExpertMenu() { return ExpertMenu; }
		public RefactorMenu RefactorMenu() { return RefactorMenu; }
		public DBMaintenanceToolMenu DBMaintenanceToolMenu() { return DBMaintenanceToolMenu; }
		public InnoWakeRefactoringMenu InnoWakeRefactoringMenu() { return InnoWakeRefactoringMenu; }
		
			public class NewMenu extends JavaMenuNodeBase
	{

		
			private JavaProjectMenu JavaProjectMenu;
	private NaturalMainprogramMenu NaturalMainprogramMenu;
	private JCopyMenu JCopyMenu;
	private NaturalSubprogramMenu NaturalSubprogramMenu;
	private DataArea DataArea;
	private NaturalJMap NaturalJMap;
	private meeclipseProject meeclipseProject;
	private CobollMainprogramMenu CobollMainprogramMenu;
	private FileMenu FileMenu;
	private FolderMenu FolderMenu;
	private UntitledTextFileMenu UntitledTextFileMenu;
	private PackageMenu PackageMenu;
	private InterfaceMenu InterfaceMenu;
	private ClassMenu ClassMenu;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					JavaProjectMenu = new JavaProjectMenu(this, applicationModel);
		NaturalMainprogramMenu = new NaturalMainprogramMenu(this, applicationModel);
		JCopyMenu = new JCopyMenu(this, applicationModel);
		NaturalSubprogramMenu = new NaturalSubprogramMenu(this, applicationModel);
		DataArea = new DataArea(this, applicationModel);
		NaturalJMap = new NaturalJMap(this, applicationModel);
		meeclipseProject = new meeclipseProject(this, applicationModel);
		CobollMainprogramMenu = new CobollMainprogramMenu(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		FolderMenu = new FolderMenu(this, applicationModel);
		UntitledTextFileMenu = new UntitledTextFileMenu(this, applicationModel);
		PackageMenu = new PackageMenu(this, applicationModel);
		InterfaceMenu = new InterfaceMenu(this, applicationModel);
		ClassMenu = new ClassMenu(this, applicationModel);

			setDisplayName("NewMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("New").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public JavaProjectMenu JavaProjectMenu() { return JavaProjectMenu; }
		public NaturalMainprogramMenu NaturalMainprogramMenu() { return NaturalMainprogramMenu; }
		public JCopyMenu JCopyMenu() { return JCopyMenu; }
		public NaturalSubprogramMenu NaturalSubprogramMenu() { return NaturalSubprogramMenu; }
		public DataArea DataArea() { return DataArea; }
		public NaturalJMap NaturalJMap() { return NaturalJMap; }
		public meeclipseProject meeclipseProject() { return meeclipseProject; }
		public CobollMainprogramMenu CobollMainprogramMenu() { return CobollMainprogramMenu; }
		public FileMenu FileMenu() { return FileMenu; }
		public FolderMenu FolderMenu() { return FolderMenu; }
		public UntitledTextFileMenu UntitledTextFileMenu() { return UntitledTextFileMenu; }
		public PackageMenu PackageMenu() { return PackageMenu; }
		public InterfaceMenu InterfaceMenu() { return InterfaceMenu; }
		public ClassMenu ClassMenu() { return ClassMenu; }
		
			public class JavaProjectMenu extends JavaMenuNodeBase
	{

		
								public JavaProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Java Project").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalMainprogramMenu extends JavaMenuNodeBase
	{

		
								public NaturalMainprogramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalMainprogramMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Natural Mainprogram").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JCopyMenu extends JavaMenuNodeBase
	{

		
								public JCopyMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JCopyMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("JCopy").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalSubprogramMenu extends JavaMenuNodeBase
	{

		
								public NaturalSubprogramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalSubprogramMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Natural Subprogram").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataArea extends JavaMenuNodeBase
	{

		
								public DataArea(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataArea");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Natural Data Area").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalJMap extends JavaMenuNodeBase
	{

		
								public NaturalJMap(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalJMap");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Natural JMap").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class meeclipseProject extends JavaMenuNodeBase
	{

		
								public meeclipseProject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("meeclipseProject");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("meeclipse Project").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobollMainprogramMenu extends JavaMenuNodeBase
	{

		
								public CobollMainprogramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobollMainprogramMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Cobol Mainprogram").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FileMenu extends JavaMenuNodeBase
	{

		
								public FileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FileMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("File").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FolderMenu extends JavaMenuNodeBase
	{

		
								public FolderMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UntitledTextFileMenu extends JavaMenuNodeBase
	{

		
								public UntitledTextFileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Untitled Text File");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Untitled Text File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageMenu extends JavaMenuNodeBase
	{

		
								public PackageMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Package").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InterfaceMenu extends JavaMenuNodeBase
	{

		
								public InterfaceMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Interface");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Interface").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClassMenu extends JavaMenuNodeBase
	{

		
								public ClassMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Class");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Class").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class MeeclipseMenu extends JavaMenuNodeBase
	{

		
			private AddMeeclipseNatureMenu AddMeeclipseNatureMenu;
	private IncludeJcopyDataUsingCodeMenu IncludeJcopyDataUsingCodeMenu;
						public MeeclipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddMeeclipseNatureMenu = new AddMeeclipseNatureMenu(this, applicationModel);
		IncludeJcopyDataUsingCodeMenu = new IncludeJcopyDataUsingCodeMenu(this, applicationModel);

			setDisplayName("Meeclipse Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("meeclipse").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddMeeclipseNatureMenu AddMeeclipseNatureMenu() { return AddMeeclipseNatureMenu; }
		public IncludeJcopyDataUsingCodeMenu IncludeJcopyDataUsingCodeMenu() { return IncludeJcopyDataUsingCodeMenu; }
		
			public class AddMeeclipseNatureMenu extends JavaMenuNodeBase
	{

		
								public AddMeeclipseNatureMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddMeeclipseNatureMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Add meeclipse Nature").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IncludeJcopyDataUsingCodeMenu extends JavaMenuNodeBase
	{

		
								public IncludeJcopyDataUsingCodeMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IncludeJcopyDataUsingCode");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Include JCopy/Data Using Code").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BuildPathMenu extends JavaMenuNodeBase
	{

		
			private AddExternalArchivesMenu AddExternalArchivesMenu;
	private AddToBuildPathMenu AddToBuildPathMenu;
						public BuildPathMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddExternalArchivesMenu = new AddExternalArchivesMenu(this, applicationModel);
		AddToBuildPathMenu = new AddToBuildPathMenu(this, applicationModel);

			setDisplayName("Build Path Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Build Path").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddExternalArchivesMenu AddExternalArchivesMenu() { return AddExternalArchivesMenu; }
		public AddToBuildPathMenu AddToBuildPathMenu() { return AddToBuildPathMenu; }
		
			public class AddExternalArchivesMenu extends JavaMenuNodeBase
	{

		
								public AddExternalArchivesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddExternalArchivesMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Add External Archives...").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddToBuildPathMenu extends JavaMenuNodeBase
	{

		
								public AddToBuildPathMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add to Build Path");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add to Build Path").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PropertiesMenu extends JavaMenuNodeBase
	{

		
			private JavaProjectMenu JavaProjectMenu;
	private NaturalMainprogramMenu NaturalMainprogramMenu;
	private JCopyMenu JCopyMenu;
	private NaturalSubprogramMenu NaturalSubprogramMenu;
						public PropertiesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					JavaProjectMenu = new JavaProjectMenu(this, applicationModel);
		NaturalMainprogramMenu = new NaturalMainprogramMenu(this, applicationModel);
		JCopyMenu = new JCopyMenu(this, applicationModel);
		NaturalSubprogramMenu = new NaturalSubprogramMenu(this, applicationModel);

			setDisplayName("PropertiesMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Properties").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public JavaProjectMenu JavaProjectMenu() { return JavaProjectMenu; }
		public NaturalMainprogramMenu NaturalMainprogramMenu() { return NaturalMainprogramMenu; }
		public JCopyMenu JCopyMenu() { return JCopyMenu; }
		public NaturalSubprogramMenu NaturalSubprogramMenu() { return NaturalSubprogramMenu; }
		
			public class JavaProjectMenu extends JavaMenuNodeBase
	{

		
								public JavaProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Java Project").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalMainprogramMenu extends JavaMenuNodeBase
	{

		
								public NaturalMainprogramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalMainprogramMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Natural Mainprogram").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JCopyMenu extends JavaMenuNodeBase
	{

		
								public JCopyMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JCopyMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("JCopy").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NaturalSubprogramMenu extends JavaMenuNodeBase
	{

		
								public NaturalSubprogramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NaturalSubprogramMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Natural Subprogram").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RunAsMenu extends JavaMenuNodeBase
	{

		
			private NewNaturalProgramMenu NewNaturalProgramMenu;
	private RunConfigurationMenu RunConfigurationMenu;
	private NewCobolProgram NewCobolProgram;
	private zOSMMRS511V zOSMMRS511V;
	private zOSMMRS511J zOSMMRS511J;
	private CICSSTARTUP CICSSTARTUP;
	private VaadinPrint VaadinPrint;
	private SingleSessionNoPUSHMenu SingleSessionNoPUSHMenu;
	private TimeoutOnUISessionMenu TimeoutOnUISessionMenu;
	private MultiSessionPushAutomaticLongPollingMenu MultiSessionPushAutomaticLongPollingMenu;
	private MultiSessionPushAutomaticWebsocketMenu MultiSessionPushAutomaticWebsocketMenu;
	private MultiSessionPushManualLongPollingMenu MultiSessionPushManualLongPollingMenu;
	private MultiSessionPushManualWebsocketMenu MultiSessionPushManualWebsocketMenu;
	private CICSStartupMenu CICSStartupMenu;
	private Wmee4757_NoConfigMenu Wmee4757_NoConfigMenu;
	private Wmee4757invalidConfigMenu Wmee4757invalidConfigMenu;
	private Wmee47571AllowedMenu Wmee47571AllowedMenu;
	private Wmee47573AllowedMenu Wmee47573AllowedMenu;
						public RunAsMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNaturalProgramMenu = new NewNaturalProgramMenu(this, applicationModel);
		RunConfigurationMenu = new RunConfigurationMenu(this, applicationModel);
		NewCobolProgram = new NewCobolProgram(this, applicationModel);
		zOSMMRS511V = new zOSMMRS511V(this, applicationModel);
		zOSMMRS511J = new zOSMMRS511J(this, applicationModel);
		CICSSTARTUP = new CICSSTARTUP(this, applicationModel);
		VaadinPrint = new VaadinPrint(this, applicationModel);
		SingleSessionNoPUSHMenu = new SingleSessionNoPUSHMenu(this, applicationModel);
		TimeoutOnUISessionMenu = new TimeoutOnUISessionMenu(this, applicationModel);
		MultiSessionPushAutomaticLongPollingMenu = new MultiSessionPushAutomaticLongPollingMenu(this, applicationModel);
		MultiSessionPushAutomaticWebsocketMenu = new MultiSessionPushAutomaticWebsocketMenu(this, applicationModel);
		MultiSessionPushManualLongPollingMenu = new MultiSessionPushManualLongPollingMenu(this, applicationModel);
		MultiSessionPushManualWebsocketMenu = new MultiSessionPushManualWebsocketMenu(this, applicationModel);
		CICSStartupMenu = new CICSStartupMenu(this, applicationModel);
		Wmee4757_NoConfigMenu = new Wmee4757_NoConfigMenu(this, applicationModel);
		Wmee4757invalidConfigMenu = new Wmee4757invalidConfigMenu(this, applicationModel);
		Wmee47571AllowedMenu = new Wmee47571AllowedMenu(this, applicationModel);
		Wmee47573AllowedMenu = new Wmee47573AllowedMenu(this, applicationModel);

			setDisplayName("Run As Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Run As").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNaturalProgramMenu NewNaturalProgramMenu() { return NewNaturalProgramMenu; }
		public RunConfigurationMenu RunConfigurationMenu() { return RunConfigurationMenu; }
		public NewCobolProgram NewCobolProgram() { return NewCobolProgram; }
		public zOSMMRS511V zOSMMRS511V() { return zOSMMRS511V; }
		public zOSMMRS511J zOSMMRS511J() { return zOSMMRS511J; }
		public CICSSTARTUP CICSSTARTUP() { return CICSSTARTUP; }
		public VaadinPrint VaadinPrint() { return VaadinPrint; }
		public SingleSessionNoPUSHMenu SingleSessionNoPUSHMenu() { return SingleSessionNoPUSHMenu; }
		public TimeoutOnUISessionMenu TimeoutOnUISessionMenu() { return TimeoutOnUISessionMenu; }
		public MultiSessionPushAutomaticLongPollingMenu MultiSessionPushAutomaticLongPollingMenu() { return MultiSessionPushAutomaticLongPollingMenu; }
		public MultiSessionPushAutomaticWebsocketMenu MultiSessionPushAutomaticWebsocketMenu() { return MultiSessionPushAutomaticWebsocketMenu; }
		public MultiSessionPushManualLongPollingMenu MultiSessionPushManualLongPollingMenu() { return MultiSessionPushManualLongPollingMenu; }
		public MultiSessionPushManualWebsocketMenu MultiSessionPushManualWebsocketMenu() { return MultiSessionPushManualWebsocketMenu; }
		public CICSStartupMenu CICSStartupMenu() { return CICSStartupMenu; }
		public Wmee4757_NoConfigMenu Wmee4757_NoConfigMenu() { return Wmee4757_NoConfigMenu; }
		public Wmee4757invalidConfigMenu Wmee4757invalidConfigMenu() { return Wmee4757invalidConfigMenu; }
		public Wmee47571AllowedMenu Wmee47571AllowedMenu() { return Wmee47571AllowedMenu; }
		public Wmee47573AllowedMenu Wmee47573AllowedMenu() { return Wmee47573AllowedMenu; }
		
			public class NewNaturalProgramMenu extends JavaMenuNodeBase
	{

		
								public NewNaturalProgramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Natural Program");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Natural program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationMenu extends JavaMenuNodeBase
	{

		
								public RunConfigurationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run Configurations...").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewCobolProgram extends JavaMenuNodeBase
	{

		
								public NewCobolProgram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewCobolProgram");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Cobol program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class zOSMMRS511V extends JavaMenuNodeBase
	{

		
								public zOSMMRS511V(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("zOSMMRS511V");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 zOS-MMRS511V")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class zOSMMRS511J extends JavaMenuNodeBase
	{

		
								public zOSMMRS511J(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("zOSMMRS511J");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 zOS-MMRS511J")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSSTARTUP extends JavaMenuNodeBase
	{

		
								public CICSSTARTUP(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSSTARTUP");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 CICS-STARTUP")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VaadinPrint extends JavaMenuNodeBase
	{

		
								public VaadinPrint(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VaadinPrint");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Vaadin Print").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SingleSessionNoPUSHMenu extends JavaMenuNodeBase
	{

		
								public SingleSessionNoPUSHMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SingleSessionNoPUSHMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Single-Session No-PUSH").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TimeoutOnUISessionMenu extends JavaMenuNodeBase
	{

		
								public TimeoutOnUISessionMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TimeoutOnUISessionMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Timeout on UI Session").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MultiSessionPushAutomaticLongPollingMenu extends JavaMenuNodeBase
	{

		
								public MultiSessionPushAutomaticLongPollingMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MultiSessionPushAutomaticLongPollingMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Multi-Session PUSH automatic + long polling").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MultiSessionPushAutomaticWebsocketMenu extends JavaMenuNodeBase
	{

		
								public MultiSessionPushAutomaticWebsocketMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MultiSessionPushAutomaticWebsocketMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Multi-Session PUSH automatic + websocket").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MultiSessionPushManualLongPollingMenu extends JavaMenuNodeBase
	{

		
								public MultiSessionPushManualLongPollingMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MultiSessionPushManualLongPollingMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Multi-Session PUSH manual + long polling").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MultiSessionPushManualWebsocketMenu extends JavaMenuNodeBase
	{

		
								public MultiSessionPushManualWebsocketMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MultiSessionPushManualWebsocketMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Multi-Session PUSH manual + websocket").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSStartupMenu extends JavaMenuNodeBase
	{

		
								public CICSStartupMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSStartupMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 CICS-STARTUP").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Wmee4757_NoConfigMenu extends JavaMenuNodeBase
	{

		
								public Wmee4757_NoConfigMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wmee4757_NoConfigMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Wmee4757_NoConfig").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Wmee4757invalidConfigMenu extends JavaMenuNodeBase
	{

		
								public Wmee4757invalidConfigMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wmee4757invalidConfigMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Wmee4757_invalidConfig").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Wmee47571AllowedMenu extends JavaMenuNodeBase
	{

		
								public Wmee47571AllowedMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wmee47571AllowedMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Wmee4757_1_allowed").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Wmee47573AllowedMenu extends JavaMenuNodeBase
	{

		
								public Wmee47573AllowedMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wmee47573AllowedMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Wmee4757_3_allowed").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Delete extends JavaMenuNodeBase
	{

		
								public Delete(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Delete").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReplaceWithMenu extends JavaMenuNodeBase
	{

		
			private NewNaturalProgramMenu NewNaturalProgramMenu;
	private RunConfigurationMenu RunConfigurationMenu;
	private NewCobolProgram NewCobolProgram;
	private PreviousFromLocalHistoryMenu PreviousFromLocalHistoryMenu;
						public ReplaceWithMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNaturalProgramMenu = new NewNaturalProgramMenu(this, applicationModel);
		RunConfigurationMenu = new RunConfigurationMenu(this, applicationModel);
		NewCobolProgram = new NewCobolProgram(this, applicationModel);
		PreviousFromLocalHistoryMenu = new PreviousFromLocalHistoryMenu(this, applicationModel);

			setDisplayName("ReplaceWithMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Replace With").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNaturalProgramMenu NewNaturalProgramMenu() { return NewNaturalProgramMenu; }
		public RunConfigurationMenu RunConfigurationMenu() { return RunConfigurationMenu; }
		public NewCobolProgram NewCobolProgram() { return NewCobolProgram; }
		public PreviousFromLocalHistoryMenu PreviousFromLocalHistoryMenu() { return PreviousFromLocalHistoryMenu; }
		
			public class NewNaturalProgramMenu extends JavaMenuNodeBase
	{

		
								public NewNaturalProgramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Natural Program");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Natural program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationMenu extends JavaMenuNodeBase
	{

		
								public RunConfigurationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run Configurations...").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewCobolProgram extends JavaMenuNodeBase
	{

		
								public NewCobolProgram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewCobolProgram");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Cobol program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PreviousFromLocalHistoryMenu extends JavaMenuNodeBase
	{

		
								public PreviousFromLocalHistoryMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Previous from Local History");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Previous from Local History").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class OpenWithMenu extends JavaMenuNodeBase
	{

		
			private NewNaturalProgramMenu NewNaturalProgramMenu;
	private RunConfigurationMenu RunConfigurationMenu;
	private NewCobolProgram NewCobolProgram;
	private MeeclipseJavaEditorMenu MeeclipseJavaEditorMenu;
						public OpenWithMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNaturalProgramMenu = new NewNaturalProgramMenu(this, applicationModel);
		RunConfigurationMenu = new RunConfigurationMenu(this, applicationModel);
		NewCobolProgram = new NewCobolProgram(this, applicationModel);
		MeeclipseJavaEditorMenu = new MeeclipseJavaEditorMenu(this, applicationModel);

			setDisplayName("OpenWithMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Open With").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNaturalProgramMenu NewNaturalProgramMenu() { return NewNaturalProgramMenu; }
		public RunConfigurationMenu RunConfigurationMenu() { return RunConfigurationMenu; }
		public NewCobolProgram NewCobolProgram() { return NewCobolProgram; }
		public MeeclipseJavaEditorMenu MeeclipseJavaEditorMenu() { return MeeclipseJavaEditorMenu; }
		
			public class NewNaturalProgramMenu extends JavaMenuNodeBase
	{

		
								public NewNaturalProgramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Natural Program");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Natural program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationMenu extends JavaMenuNodeBase
	{

		
								public RunConfigurationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run Configurations...").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewCobolProgram extends JavaMenuNodeBase
	{

		
								public NewCobolProgram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewCobolProgram");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Cobol program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MeeclipseJavaEditorMenu extends JavaMenuNodeBase
	{

		
								public MeeclipseJavaEditorMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MeeclipseJavaEditorMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("meeclipse Java Editor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FieldTracingMenu extends JavaMenuNodeBase
	{

		
			private TraceDatabaseFieldMenu TraceDatabaseFieldMenu;
						public FieldTracingMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TraceDatabaseFieldMenu = new TraceDatabaseFieldMenu(this, applicationModel);

			setDisplayName("FieldTracingMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Field tracing").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TraceDatabaseFieldMenu TraceDatabaseFieldMenu() { return TraceDatabaseFieldMenu; }
		
			public class TraceDatabaseFieldMenu extends JavaMenuNodeBase
	{

		
								public TraceDatabaseFieldMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TraceDatabaseFieldMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Trace database field").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BatchclipseMenu extends JavaMenuNodeBase
	{

		
			private AddMeeclipseNatureMenu AddMeeclipseNatureMenu;
	private IncludeJcopyDataUsingCodeMenu IncludeJcopyDataUsingCodeMenu;
						public BatchclipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddMeeclipseNatureMenu = new AddMeeclipseNatureMenu(this, applicationModel);
		IncludeJcopyDataUsingCodeMenu = new IncludeJcopyDataUsingCodeMenu(this, applicationModel);

			setDisplayName("BatchclipseMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("batchclipse").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddMeeclipseNatureMenu AddMeeclipseNatureMenu() { return AddMeeclipseNatureMenu; }
		public IncludeJcopyDataUsingCodeMenu IncludeJcopyDataUsingCodeMenu() { return IncludeJcopyDataUsingCodeMenu; }
		
			public class AddMeeclipseNatureMenu extends JavaMenuNodeBase
	{

		
								public AddMeeclipseNatureMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddMeeclipseNatureMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Add meeclipse Nature").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IncludeJcopyDataUsingCodeMenu extends JavaMenuNodeBase
	{

		
								public IncludeJcopyDataUsingCodeMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IncludeJcopyDataUsingCode");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Include JCopy/Data Using Code").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ReferencesMenu extends JavaMenuNodeBase
	{

		
			private NewNaturalProgramMenu NewNaturalProgramMenu;
	private RunConfigurationMenu RunConfigurationMenu;
	private NewCobolProgram NewCobolProgram;
						public ReferencesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNaturalProgramMenu = new NewNaturalProgramMenu(this, applicationModel);
		RunConfigurationMenu = new RunConfigurationMenu(this, applicationModel);
		NewCobolProgram = new NewCobolProgram(this, applicationModel);

			setDisplayName("ReferencesMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("References").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNaturalProgramMenu NewNaturalProgramMenu() { return NewNaturalProgramMenu; }
		public RunConfigurationMenu RunConfigurationMenu() { return RunConfigurationMenu; }
		public NewCobolProgram NewCobolProgram() { return NewCobolProgram; }
		
			public class NewNaturalProgramMenu extends JavaMenuNodeBase
	{

		
								public NewNaturalProgramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Natural Program");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Natural program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationMenu extends JavaMenuNodeBase
	{

		
								public RunConfigurationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run Configurations...").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewCobolProgram extends JavaMenuNodeBase
	{

		
								public NewCobolProgram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewCobolProgram");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Cobol program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class Copy extends JavaMenuNodeBase
	{

		
								public Copy(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Copy");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Copy").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Paste extends JavaMenuNodeBase
	{

		
								public Paste(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Paste");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Paste").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RefreshMenu extends JavaMenuNodeBase
	{

		
			private AddMeeclipseNatureMenu AddMeeclipseNatureMenu;
	private IncludeJcopyDataUsingCodeMenu IncludeJcopyDataUsingCodeMenu;
						public RefreshMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddMeeclipseNatureMenu = new AddMeeclipseNatureMenu(this, applicationModel);
		IncludeJcopyDataUsingCodeMenu = new IncludeJcopyDataUsingCodeMenu(this, applicationModel);

			setDisplayName("RefreshMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Refresh").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddMeeclipseNatureMenu AddMeeclipseNatureMenu() { return AddMeeclipseNatureMenu; }
		public IncludeJcopyDataUsingCodeMenu IncludeJcopyDataUsingCodeMenu() { return IncludeJcopyDataUsingCodeMenu; }
		
			public class AddMeeclipseNatureMenu extends JavaMenuNodeBase
	{

		
								public AddMeeclipseNatureMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddMeeclipseNatureMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Add meeclipse Nature").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IncludeJcopyDataUsingCodeMenu extends JavaMenuNodeBase
	{

		
								public IncludeJcopyDataUsingCodeMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IncludeJcopyDataUsingCode");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Include JCopy/Data Using Code").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DeleteMenu extends JavaMenuNodeBase
	{

		
			private NewNaturalProgramMenu NewNaturalProgramMenu;
	private RunConfigurationMenu RunConfigurationMenu;
	private NewCobolProgram NewCobolProgram;
	private zOSMMRS511V zOSMMRS511V;
	private zOSMMRS511J zOSMMRS511J;
	private CICSSTARTUP CICSSTARTUP;
	private VaadinPrint VaadinPrint;
						public DeleteMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNaturalProgramMenu = new NewNaturalProgramMenu(this, applicationModel);
		RunConfigurationMenu = new RunConfigurationMenu(this, applicationModel);
		NewCobolProgram = new NewCobolProgram(this, applicationModel);
		zOSMMRS511V = new zOSMMRS511V(this, applicationModel);
		zOSMMRS511J = new zOSMMRS511J(this, applicationModel);
		CICSSTARTUP = new CICSSTARTUP(this, applicationModel);
		VaadinPrint = new VaadinPrint(this, applicationModel);

			setDisplayName("DeleteMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Delete").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNaturalProgramMenu NewNaturalProgramMenu() { return NewNaturalProgramMenu; }
		public RunConfigurationMenu RunConfigurationMenu() { return RunConfigurationMenu; }
		public NewCobolProgram NewCobolProgram() { return NewCobolProgram; }
		public zOSMMRS511V zOSMMRS511V() { return zOSMMRS511V; }
		public zOSMMRS511J zOSMMRS511J() { return zOSMMRS511J; }
		public CICSSTARTUP CICSSTARTUP() { return CICSSTARTUP; }
		public VaadinPrint VaadinPrint() { return VaadinPrint; }
		
			public class NewNaturalProgramMenu extends JavaMenuNodeBase
	{

		
								public NewNaturalProgramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Natural Program");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Natural program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationMenu extends JavaMenuNodeBase
	{

		
								public RunConfigurationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run Configurations...").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewCobolProgram extends JavaMenuNodeBase
	{

		
								public NewCobolProgram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewCobolProgram");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Cobol program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class zOSMMRS511V extends JavaMenuNodeBase
	{

		
								public zOSMMRS511V(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("zOSMMRS511V");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 zOS-MMRS511V")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class zOSMMRS511J extends JavaMenuNodeBase
	{

		
								public zOSMMRS511J(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("zOSMMRS511J");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 zOS-MMRS511J")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSSTARTUP extends JavaMenuNodeBase
	{

		
								public CICSSTARTUP(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSSTARTUP");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 CICS-STARTUP")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VaadinPrint extends JavaMenuNodeBase
	{

		
								public VaadinPrint(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VaadinPrint");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Vaadin Print").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ExportDemoViewScriptMenu extends JavaMenuNodeBase
	{

		
								public ExportDemoViewScriptMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ExportDemoViewScriptMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Export Demo: View Script").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowBMSmapMenu extends JavaMenuNodeBase
	{

		
			private NewNaturalProgramMenu NewNaturalProgramMenu;
	private RunConfigurationMenu RunConfigurationMenu;
	private NewCobolProgram NewCobolProgram;
	private zOSMMRS511V zOSMMRS511V;
	private zOSMMRS511J zOSMMRS511J;
	private CICSSTARTUP CICSSTARTUP;
	private VaadinPrint VaadinPrint;
						public ShowBMSmapMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNaturalProgramMenu = new NewNaturalProgramMenu(this, applicationModel);
		RunConfigurationMenu = new RunConfigurationMenu(this, applicationModel);
		NewCobolProgram = new NewCobolProgram(this, applicationModel);
		zOSMMRS511V = new zOSMMRS511V(this, applicationModel);
		zOSMMRS511J = new zOSMMRS511J(this, applicationModel);
		CICSSTARTUP = new CICSSTARTUP(this, applicationModel);
		VaadinPrint = new VaadinPrint(this, applicationModel);

			setDisplayName("ShowBMSmapMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Show BMS map").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNaturalProgramMenu NewNaturalProgramMenu() { return NewNaturalProgramMenu; }
		public RunConfigurationMenu RunConfigurationMenu() { return RunConfigurationMenu; }
		public NewCobolProgram NewCobolProgram() { return NewCobolProgram; }
		public zOSMMRS511V zOSMMRS511V() { return zOSMMRS511V; }
		public zOSMMRS511J zOSMMRS511J() { return zOSMMRS511J; }
		public CICSSTARTUP CICSSTARTUP() { return CICSSTARTUP; }
		public VaadinPrint VaadinPrint() { return VaadinPrint; }
		
			public class NewNaturalProgramMenu extends JavaMenuNodeBase
	{

		
								public NewNaturalProgramMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Natural Program");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Natural program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationMenu extends JavaMenuNodeBase
	{

		
								public RunConfigurationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Run Configurations...").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewCobolProgram extends JavaMenuNodeBase
	{

		
								public NewCobolProgram(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewCobolProgram");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 mee Cobol program").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class zOSMMRS511V extends JavaMenuNodeBase
	{

		
								public zOSMMRS511V(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("zOSMMRS511V");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 zOS-MMRS511V")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class zOSMMRS511J extends JavaMenuNodeBase
	{

		
								public zOSMMRS511J(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("zOSMMRS511J");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 zOS-MMRS511J")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSSTARTUP extends JavaMenuNodeBase
	{

		
								public CICSSTARTUP(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSSTARTUP");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label(new RegExpProperty("1 CICS-STARTUP")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VaadinPrint extends JavaMenuNodeBase
	{

		
								public VaadinPrint(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VaadinPrint");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("1 Vaadin Print").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ImportMenu extends JavaMenuNodeBase
	{

		
								public ImportMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Import");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Import...").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ExpertMenu extends JavaMenuNodeBase
	{

		
			private AddNatureAndClasspathMenu AddNatureAndClasspathMenu;
						public ExpertMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AddNatureAndClasspathMenu = new AddNatureAndClasspathMenu(this, applicationModel);

			setDisplayName("expert");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("expert").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AddNatureAndClasspathMenu AddNatureAndClasspathMenu() { return AddNatureAndClasspathMenu; }
		
			public class AddNatureAndClasspathMenu extends JavaMenuNodeBase
	{

		
								public AddNatureAndClasspathMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add Nature and Classpath");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add Nature and Classpath").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RefactorMenu extends JavaMenuNodeBase
	{

		
			private RenameMenu RenameMenu;
						public RefactorMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					RenameMenu = new RenameMenu(this, applicationModel);

			setDisplayName("Refactor");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Refactor").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public RenameMenu RenameMenu() { return RenameMenu; }
		
			public class RenameMenu extends JavaMenuNodeBase
	{

		
								public RenameMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Rename...");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Rename...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DBMaintenanceToolMenu extends JavaMenuNodeBase
	{

		
			private MaintenanceMenu MaintenanceMenu;
	private HealthCheckMenu HealthCheckMenu;
						public DBMaintenanceToolMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					MaintenanceMenu = new MaintenanceMenu(this, applicationModel);
		HealthCheckMenu = new HealthCheckMenu(this, applicationModel);

			setDisplayName("DB Maintenance Tool");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("db maintenance tool").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public MaintenanceMenu MaintenanceMenu() { return MaintenanceMenu; }
		public HealthCheckMenu HealthCheckMenu() { return HealthCheckMenu; }
		
			public class MaintenanceMenu extends JavaMenuNodeBase
	{

		
			private FullGenerationMenu FullGenerationMenu;
	private RemoveMenu RemoveMenu;
	private ModifyMenu ModifyMenu;
	private AddMenu AddMenu;
						public MaintenanceMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FullGenerationMenu = new FullGenerationMenu(this, applicationModel);
		RemoveMenu = new RemoveMenu(this, applicationModel);
		ModifyMenu = new ModifyMenu(this, applicationModel);
		AddMenu = new AddMenu(this, applicationModel);

			setDisplayName("Maintenance");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Maintenance").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FullGenerationMenu FullGenerationMenu() { return FullGenerationMenu; }
		public RemoveMenu RemoveMenu() { return RemoveMenu; }
		public ModifyMenu ModifyMenu() { return ModifyMenu; }
		public AddMenu AddMenu() { return AddMenu; }
		
			public class FullGenerationMenu extends JavaMenuNodeBase
	{

		
								public FullGenerationMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Full generation");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Full generation").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RemoveMenu extends JavaMenuNodeBase
	{

		
								public RemoveMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Remove");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Remove").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ModifyMenu extends JavaMenuNodeBase
	{

		
								public ModifyMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Modify");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Modify").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddMenu extends JavaMenuNodeBase
	{

		
								public AddMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class HealthCheckMenu extends JavaMenuNodeBase
	{

		
								public HealthCheckMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Health Check");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Health Check").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InnoWakeRefactoringMenu extends JavaMenuNodeBase
	{

		
			private Natural2JavaMenu Natural2JavaMenu;
	private Create3NFDatabaseSchemaMenu Create3NFDatabaseSchemaMenu;
						public InnoWakeRefactoringMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Natural2JavaMenu = new Natural2JavaMenu(this, applicationModel);
		Create3NFDatabaseSchemaMenu = new Create3NFDatabaseSchemaMenu(this, applicationModel);

			setDisplayName("innoWake Refactoring");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("innoWake Refactoring").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Natural2JavaMenu Natural2JavaMenu() { return Natural2JavaMenu; }
		public Create3NFDatabaseSchemaMenu Create3NFDatabaseSchemaMenu() { return Create3NFDatabaseSchemaMenu; }
		
			public class Natural2JavaMenu extends JavaMenuNodeBase
	{

		
								public Natural2JavaMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Natural 2 Java");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Natural 2 Java").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Create3NFDatabaseSchemaMenu extends JavaMenuNodeBase
	{

		
								public Create3NFDatabaseSchemaMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create 3NF database schema");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Create 3NF database schema").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class InitialComposite extends JavaUiObjectNodeBase
	{

		
			private CreateAJavaProjectHyperlink CreateAJavaProjectHyperlink;
						public InitialComposite(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateAJavaProjectHyperlink = new CreateAJavaProjectHyperlink(this, applicationModel);

			setDisplayName("Initial Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateAJavaProjectHyperlink CreateAJavaProjectHyperlink() { return CreateAJavaProjectHyperlink; }
		
			public class CreateAJavaProjectHyperlink extends JavaUiObjectNodeBase
	{

		
								public CreateAJavaProjectHyperlink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create A Java Project Hyperlink");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.ui.forms.widgets.Hyperlink").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PackageViewMenuToolbar extends JavaToolBarNodeBase
	{

		
								public PackageViewMenuToolbar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PackageViewMenuToolbar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newWindow extends JavaWindowNodeBase
	{

		
			private wizardsEditor wizardsEditor;
	private WizardsTreeView WizardsTreeView;
						public newWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					wizardsEditor = new wizardsEditor(this, applicationModel);
		WizardsTreeView = new WizardsTreeView(this, applicationModel);
			
			setDisplayName("New");
		}
				public newWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					wizardsEditor = new wizardsEditor(this, applicationModel);
		WizardsTreeView = new WizardsTreeView(this, applicationModel);

			setDisplayName("New");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Select a wizard").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public wizardsEditor wizardsEditor() { return wizardsEditor; }
		public WizardsTreeView WizardsTreeView() { return WizardsTreeView; }
		
			public class wizardsEditor extends JavaEditorNodeBase
	{

		
								public wizardsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WizardsTreeView extends JavaTreeViewNodeBase
	{

		
								public WizardsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WizardsTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RunConfigurationWindow extends JavaWindowNodeBase
	{

		
			private RunConfigurationTreeView RunConfigurationTreeView;
	private RunConfigurationTabControl RunConfigurationTabControl;
	private RunButton RunButton;
	private ProjectExecutionEnvironmentJavaSERadioButton ProjectExecutionEnvironmentJavaSERadioButton;
						public RunConfigurationWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					RunConfigurationTreeView = new RunConfigurationTreeView(this, applicationModel);
		RunConfigurationTabControl = new RunConfigurationTabControl(this, applicationModel);
		RunButton = new RunButton(this, applicationModel);
		ProjectExecutionEnvironmentJavaSERadioButton = new ProjectExecutionEnvironmentJavaSERadioButton(this, applicationModel);
			
			setDisplayName("Run Configuration");
		}
				public RunConfigurationWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					RunConfigurationTreeView = new RunConfigurationTreeView(this, applicationModel);
		RunConfigurationTabControl = new RunConfigurationTabControl(this, applicationModel);
		RunButton = new RunButton(this, applicationModel);
		ProjectExecutionEnvironmentJavaSERadioButton = new ProjectExecutionEnvironmentJavaSERadioButton(this, applicationModel);

			setDisplayName("Run Configuration");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Run Configurations").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public RunConfigurationTreeView RunConfigurationTreeView() { return RunConfigurationTreeView; }
		public RunConfigurationTabControl RunConfigurationTabControl() { return RunConfigurationTabControl; }
		public RunButton RunButton() { return RunButton; }
		public ProjectExecutionEnvironmentJavaSERadioButton ProjectExecutionEnvironmentJavaSERadioButton() { return ProjectExecutionEnvironmentJavaSERadioButton; }
		
			public class RunConfigurationTreeView extends JavaTreeViewNodeBase
	{

		
								public RunConfigurationTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run Configuration TreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigurationTabControl extends JavaTabControlNodeBase
	{

		
			private VmArgumentsEditor VmArgumentsEditor;
	private ProgramArgumentsEditor ProgramArgumentsEditor;
						public RunConfigurationTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					VmArgumentsEditor = new VmArgumentsEditor(this, applicationModel);
		ProgramArgumentsEditor = new ProgramArgumentsEditor(this, applicationModel);

			setDisplayName("Run Configuration TabControl");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public VmArgumentsEditor VmArgumentsEditor() { return VmArgumentsEditor; }
		public ProgramArgumentsEditor ProgramArgumentsEditor() { return ProgramArgumentsEditor; }
		
			public class VmArgumentsEditor extends JavaEditorNodeBase
	{

		
								public VmArgumentsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VM arguments");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProgramArgumentsEditor extends JavaEditorNodeBase
	{

		
								public ProgramArgumentsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Program arguments");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RunButton extends JavaButtonNodeBase
	{

		
								public RunButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Run").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectExecutionEnvironmentJavaSERadioButton extends JavaRadioButtonNodeBase
	{

		
								public ProjectExecutionEnvironmentJavaSERadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectExecutionEnvironmentJavaSERadioButton");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText(new RegExpProperty("Project execution environment.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ErrorWindow extends JavaWindowNodeBase
	{

		
								public ErrorWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

						
			setDisplayName("Error");
		}
				public ErrorWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Error");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Error").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewJavaPackageWindow extends JavaWindowNodeBase
	{

		
			private NameEditor NameEditor;
	private FinishButton FinishButton;
						public NewJavaPackageWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("New Java Package");
		}
				public NewJavaPackageWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New Java Package");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Java Package").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CompositeUiObject extends JavaUiObjectNodeBase
	{

		
			private TreeTreeView TreeTreeView;
						public CompositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					TreeTreeView = new TreeTreeView(this, applicationModel);

			setDisplayName("Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public TreeTreeView TreeTreeView() { return TreeTreeView; }
		
			public class TreeTreeView extends JavaTreeViewNodeBase
	{

		
								public TreeTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class TreeTreeView extends JavaTreeViewNodeBase
	{

		
								public TreeTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewProjectWizard extends JavaWindowNodeBase
	{

		
			private WizardsTreeViewNew WizardsTreeViewNew;
						public NewProjectWizard(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					WizardsTreeViewNew = new WizardsTreeViewNew(this, applicationModel);
			
			setDisplayName("NewProjectWizard");
		}
				public NewProjectWizard(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardsTreeViewNew = new WizardsTreeViewNew(this, applicationModel);

			setDisplayName("NewProjectWizard");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().tagName("New Project").title("New Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardsTreeViewNew WizardsTreeViewNew() { return WizardsTreeViewNew; }
		
			public class WizardsTreeViewNew extends JavaTreeViewNodeBase
	{

		
								public WizardsTreeViewNew(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WizardsTreeViewNew");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CreateMeeclipseCobolMainprogramWindow extends JavaWindowNodeBase
	{

		
			private NameEditor NameEditor;
	private PackageEditor PackageEditor;
	private CobolMainProgramBrowseButton CobolMainProgramBrowseButton;
	private PackageSelectionWindow PackageSelectionWindow;
	private GenerateCommentsCheckBox GenerateCommentsCheckBox;
	private FinishButton FinishButton;
						public CreateMeeclipseCobolMainprogramWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		PackageEditor = new PackageEditor(this, applicationModel);
		CobolMainProgramBrowseButton = new CobolMainProgramBrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("Create meeclipse Cobol Mainprogram");
		}
				public CreateMeeclipseCobolMainprogramWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		PackageEditor = new PackageEditor(this, applicationModel);
		CobolMainProgramBrowseButton = new CobolMainProgramBrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("Create meeclipse Cobol Mainprogram");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create meeclipse Cobol Mainprogram").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public PackageEditor PackageEditor() { return PackageEditor; }
		public CobolMainProgramBrowseButton CobolMainProgramBrowseButton() { return CobolMainProgramBrowseButton; }
		public PackageSelectionWindow PackageSelectionWindow() { return PackageSelectionWindow; }
		public GenerateCommentsCheckBox GenerateCommentsCheckBox() { return GenerateCommentsCheckBox; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageEditor extends JavaEditorNodeBase
	{

		
								public PackageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CobolMainProgramBrowseButton extends JavaButtonNodeBase
	{

		
								public CobolMainProgramBrowseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CobolMainProgramBrowseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageSelectionWindow extends JavaWindowNodeBase
	{

		
			private ChooseAFolderTable ChooseAFolderTable;
	private CancelButton CancelButton;
						public PackageSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Package Selection");
		}
				public PackageSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Package Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Package Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseAFolderTable ChooseAFolderTable() { return ChooseAFolderTable; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class ChooseAFolderTable extends JavaTableNodeBase
	{

		
								public ChooseAFolderTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose a folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class GenerateCommentsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public GenerateCommentsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Generate comments");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Generate comments").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class TreeTreeViewMeeclipse extends JavaTreeViewNodeBase
	{

		
								public TreeTreeViewMeeclipse(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TreeTreeViewMeeclipse");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StyledTextEditor extends JavaEditorNodeBase
	{

		
			private ShowBMSmapMenu ShowBMSmapMenu;
						public StyledTextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ShowBMSmapMenu = new ShowBMSmapMenu(this, applicationModel);

			setDisplayName("StyledText");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ShowBMSmapMenu ShowBMSmapMenu() { return ShowBMSmapMenu; }
		
			public class ShowBMSmapMenu extends JavaMenuNodeBase
	{

		
								public ShowBMSmapMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ShowBMSmapMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Show BMS map").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CreateMeeclipseSubprogramWindow extends JavaWindowNodeBase
	{

		
			private NameEditor NameEditor;
	private FinishButton FinishButton;
	private PackageEditor PackageEditor;
	private PackageSelectionWindow PackageSelectionWindow;
	private SubProgramBrowseButton SubProgramBrowseButton;
						public CreateMeeclipseSubprogramWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		PackageEditor = new PackageEditor(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		SubProgramBrowseButton = new SubProgramBrowseButton(this, applicationModel);
			
			setDisplayName("Create meeclipse Subprogram");
		}
				public CreateMeeclipseSubprogramWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		PackageEditor = new PackageEditor(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		SubProgramBrowseButton = new SubProgramBrowseButton(this, applicationModel);

			setDisplayName("Create meeclipse Subprogram");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create meeclipse Subprogram").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		public PackageEditor PackageEditor() { return PackageEditor; }
		public PackageSelectionWindow PackageSelectionWindow() { return PackageSelectionWindow; }
		public SubProgramBrowseButton SubProgramBrowseButton() { return SubProgramBrowseButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageEditor extends JavaEditorNodeBase
	{

		
								public PackageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageSelectionWindow extends JavaWindowNodeBase
	{

		
			private ChooseAFolderTable ChooseAFolderTable;
	private CancelButton CancelButton;
						public PackageSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Package Selection");
		}
				public PackageSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Package Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Package Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseAFolderTable ChooseAFolderTable() { return ChooseAFolderTable; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class ChooseAFolderTable extends JavaTableNodeBase
	{

		
								public ChooseAFolderTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose a folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SubProgramBrowseButton extends JavaButtonNodeBase
	{

		
								public SubProgramBrowseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SubProgramBrowseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CompositeUiObject1 extends JavaUiObjectNodeBase
	{

		
								public CompositeUiObject1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite1");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CreateMeeclipseDataAreaWindow extends JavaWindowNodeBase
	{

		
			private PackageEditor PackageEditor;
	private BrowseButton BrowseButton;
	private PackageSelectionWindow PackageSelectionWindow;
	private FinishButton FinishButton;
	private NameEditor NameEditor;
	private GenerateCommentsCheckBox GenerateCommentsCheckBox;
						public CreateMeeclipseDataAreaWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
			
			setDisplayName("CreateMeeclipseDataAreaWindow");
		}
				public CreateMeeclipseDataAreaWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);

			setDisplayName("CreateMeeclipseDataAreaWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create meeclipse Data Area").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageEditor PackageEditor() { return PackageEditor; }
		public BrowseButton BrowseButton() { return BrowseButton; }
		public PackageSelectionWindow PackageSelectionWindow() { return PackageSelectionWindow; }
		public FinishButton FinishButton() { return FinishButton; }
		public NameEditor NameEditor() { return NameEditor; }
		public GenerateCommentsCheckBox GenerateCommentsCheckBox() { return GenerateCommentsCheckBox; }
		
			public class PackageEditor extends JavaEditorNodeBase
	{

		
								public PackageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PackageEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BrowseButton extends JavaButtonNodeBase
	{

		
								public BrowseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BrowseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageSelectionWindow extends JavaWindowNodeBase
	{

		
			private ChooseAFolderTable ChooseAFolderTable;
	private CancelButton CancelButton;
						public PackageSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("Package Selection");
		}
				public PackageSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("Package Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Package Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseAFolderTable ChooseAFolderTable() { return ChooseAFolderTable; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class ChooseAFolderTable extends JavaTableNodeBase
	{

		
								public ChooseAFolderTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose a folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NameEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GenerateCommentsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public GenerateCommentsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Generate comments");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Generate comments").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CreateMeeclipseDatabaseTableWindow extends JavaWindowNodeBase
	{

		
			private PackageEditor PackageEditor;
	private FinishButton FinishButton;
	private NameEditor NameEditor;
	private BrowseButton BrowseButton;
	private PackageSelectionWindow PackageSelectionWindow;
	private GenerateCommentsCheckBox GenerateCommentsCheckBox;
						public CreateMeeclipseDatabaseTableWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
			
			setDisplayName("CreateMeeclipseDatabaseTableWindow");
		}
				public CreateMeeclipseDatabaseTableWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);

			setDisplayName("CreateMeeclipseDatabaseTableWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create meeclipse Database Table").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageEditor PackageEditor() { return PackageEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		public NameEditor NameEditor() { return NameEditor; }
		public BrowseButton BrowseButton() { return BrowseButton; }
		public PackageSelectionWindow PackageSelectionWindow() { return PackageSelectionWindow; }
		public GenerateCommentsCheckBox GenerateCommentsCheckBox() { return GenerateCommentsCheckBox; }
		
			public class PackageEditor extends JavaEditorNodeBase
	{

		
								public PackageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PackageEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NameEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BrowseButton extends JavaButtonNodeBase
	{

		
								public BrowseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BrowseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageSelectionWindow extends JavaWindowNodeBase
	{

		
			private ChooseAFolderTable ChooseAFolderTable;
	private CancelButton CancelButton;
						public PackageSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("PackageSelectionWindow");
		}
				public PackageSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("PackageSelectionWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Package Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseAFolderTable ChooseAFolderTable() { return ChooseAFolderTable; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class ChooseAFolderTable extends JavaTableNodeBase
	{

		
								public ChooseAFolderTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose a folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class GenerateCommentsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public GenerateCommentsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GenerateCommentsCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Generate comments").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CreateMeeclipseExternalSubroutineWindow extends JavaWindowNodeBase
	{

		
			private PackageEditor PackageEditor;
	private NameEditor NameEditor;
	private GenerateCommentsCheckBox GenerateCommentsCheckBox;
	private FinishButton FinishButton;
	private BrowseButton BrowseButton;
	private PackageSelectionWindow PackageSelectionWindow;
						public CreateMeeclipseExternalSubroutineWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
			
			setDisplayName("CreateMeeclipseExternalSubroutineWindow");
		}
				public CreateMeeclipseExternalSubroutineWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);

			setDisplayName("CreateMeeclipseExternalSubroutineWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create meeclipse external Subroutine").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageEditor PackageEditor() { return PackageEditor; }
		public NameEditor NameEditor() { return NameEditor; }
		public GenerateCommentsCheckBox GenerateCommentsCheckBox() { return GenerateCommentsCheckBox; }
		public FinishButton FinishButton() { return FinishButton; }
		public BrowseButton BrowseButton() { return BrowseButton; }
		public PackageSelectionWindow PackageSelectionWindow() { return PackageSelectionWindow; }
		
			public class PackageEditor extends JavaEditorNodeBase
	{

		
								public PackageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PackageEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NameEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GenerateCommentsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public GenerateCommentsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GenerateCommentsCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Generate comments").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BrowseButton extends JavaButtonNodeBase
	{

		
								public BrowseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BrowseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageSelectionWindow extends JavaWindowNodeBase
	{

		
			private ChooseAFolderTable ChooseAFolderTable;
	private CancelButton CancelButton;
						public PackageSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("PackageSelectionWindow");
		}
				public PackageSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("PackageSelectionWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Package Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseAFolderTable ChooseAFolderTable() { return ChooseAFolderTable; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class ChooseAFolderTable extends JavaTableNodeBase
	{

		
								public ChooseAFolderTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose a folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class CreateMeeclipseHelpfileWindow extends JavaWindowNodeBase
	{

		
			private PackageEditor PackageEditor;
	private NameEditor NameEditor;
	private GenerateCommentsCheckBox GenerateCommentsCheckBox;
	private FinishButton FinishButton;
	private BrowseButton BrowseButton;
	private PackageSelectionWindow PackageSelectionWindow;
						public CreateMeeclipseHelpfileWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);
			
			setDisplayName("CreateMeeclipseHelpfileWindow");
		}
				public CreateMeeclipseHelpfileWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PackageEditor = new PackageEditor(this, applicationModel);
		NameEditor = new NameEditor(this, applicationModel);
		GenerateCommentsCheckBox = new GenerateCommentsCheckBox(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		BrowseButton = new BrowseButton(this, applicationModel);
		PackageSelectionWindow = new PackageSelectionWindow(this, applicationModel);

			setDisplayName("CreateMeeclipseHelpfileWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create meeclipse Helpfile").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PackageEditor PackageEditor() { return PackageEditor; }
		public NameEditor NameEditor() { return NameEditor; }
		public GenerateCommentsCheckBox GenerateCommentsCheckBox() { return GenerateCommentsCheckBox; }
		public FinishButton FinishButton() { return FinishButton; }
		public BrowseButton BrowseButton() { return BrowseButton; }
		public PackageSelectionWindow PackageSelectionWindow() { return PackageSelectionWindow; }
		
			public class PackageEditor extends JavaEditorNodeBase
	{

		
								public PackageEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PackageEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Package:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NameEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GenerateCommentsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public GenerateCommentsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GenerateCommentsCheckBox");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Generate comments").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BrowseButton extends JavaButtonNodeBase
	{

		
								public BrowseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BrowseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Browse...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageSelectionWindow extends JavaWindowNodeBase
	{

		
			private ChooseAFolderTable ChooseAFolderTable;
	private CancelButton CancelButton;
						public PackageSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);
			
			setDisplayName("PackageSelectionWindow");
		}
				public PackageSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ChooseAFolderTable = new ChooseAFolderTable(this, applicationModel);
		CancelButton = new CancelButton(this, applicationModel);

			setDisplayName("PackageSelectionWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Package Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ChooseAFolderTable ChooseAFolderTable() { return ChooseAFolderTable; }
		public CancelButton CancelButton() { return CancelButton; }
		
			public class ChooseAFolderTable extends JavaTableNodeBase
	{

		
								public ChooseAFolderTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Choose a folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CancelButton extends JavaButtonNodeBase
	{

		
								public CancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CancelButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class ShowViewWindow extends JavaWindowNodeBase
	{

		
			private EnterShowViewEditor EnterShowViewEditor;
	private OpenButton OpenButton;
						public ShowViewWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					EnterShowViewEditor = new EnterShowViewEditor(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
			
			setDisplayName("Show View");
		}
				public ShowViewWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EnterShowViewEditor = new EnterShowViewEditor(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);

			setDisplayName("Show View");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EnterShowViewEditor EnterShowViewEditor() { return EnterShowViewEditor; }
		public OpenButton OpenButton() { return OpenButton; }
		
			public class EnterShowViewEditor extends JavaEditorNodeBase
	{

		
								public EnterShowViewEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterShowView");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText(new RegExpProperty(".*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenButton extends JavaButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NavigatorTreeView extends JavaTreeViewNodeBase
	{

		
								public NavigatorTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NavigatorTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ConfirmOverwriteWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
						public ConfirmOverwriteWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Confirm Overwrite");
		}
				public ConfirmOverwriteWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Confirm Overwrite");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Confirm Overwrite").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AnnotationRuler extends JavaUiObjectNodeBase
	{

		
								public AnnotationRuler(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationRuler");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.jface.text.source.AnnotationRulerColumn$4").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditMenu extends JavaMenuNodeBase
	{

		
			private SwitchWorkspaceMenu SwitchWorkspaceMenu;
	private NewMenu NewMenu;
						public EditMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SwitchWorkspaceMenu = new SwitchWorkspaceMenu(this, applicationModel);
		NewMenu = new NewMenu(this, applicationModel);

			setDisplayName("EditMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Edit").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SwitchWorkspaceMenu SwitchWorkspaceMenu() { return SwitchWorkspaceMenu; }
		public NewMenu NewMenu() { return NewMenu; }
		
			public class SwitchWorkspaceMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public SwitchWorkspaceMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("SwitchWorkspaceMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Switch Workspace").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").nativeClass("org.eclipse.swt.widgets.MenuItem").path("MenuItem;MenuItem;MenuItem;Shell;").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewMenu extends JavaMenuNodeBase
	{

		
			private JavaProjectMenu JavaProjectMenu;
	private ProjectMenu ProjectMenu;
	private Package Package;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					JavaProjectMenu = new JavaProjectMenu(this, applicationModel);
		ProjectMenu = new ProjectMenu(this, applicationModel);
		Package = new Package(this, applicationModel);

			setDisplayName("NewMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("New").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public JavaProjectMenu JavaProjectMenu() { return JavaProjectMenu; }
		public ProjectMenu ProjectMenu() { return ProjectMenu; }
		public Package Package() { return Package; }
		
			public class JavaProjectMenu extends JavaMenuNodeBase
	{

		
								public JavaProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Java Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectMenu extends JavaMenuNodeBase
	{

		
								public ProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Project...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Package extends JavaMenuNodeBase
	{

		
								public Package(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Package").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class DeleteWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
						public DeleteWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Delete");
		}
				public DeleteWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Delete").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RenameResourceWindow extends JavaWindowNodeBase
	{

		
			private NewNameEditor NewNameEditor;
	private OKButton OKButton;
						public RenameResourceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewNameEditor = new NewNameEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("RenameResourceWindow");
		}
				public RenameResourceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewNameEditor = new NewNameEditor(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("RenameResourceWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Rename Resource").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewNameEditor NewNameEditor() { return NewNameEditor; }
		public OKButton OKButton() { return OKButton; }
		
			public class NewNameEditor extends JavaEditorNodeBase
	{

		
								public NewNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewNameEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("New name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class CreateNewFileWindow extends JavaWindowNodeBase
	{

		
			private FileNameEditor FileNameEditor;
	private FinishButton FinishButton;
						public CreateNewFileWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FileNameEditor = new FileNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("CreateNewFileWindow");
		}
				public CreateNewFileWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FileNameEditor = new FileNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("CreateNewFileWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Create New File").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FileNameEditor FileNameEditor() { return FileNameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class FileNameEditor extends JavaEditorNodeBase
	{

		
								public FileNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FileNameEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("File name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class OpenResourceWindow extends JavaWindowNodeBase
	{

		
			private EnterResourceName EnterResourceName;
	private OpenButton OpenButton;
	private MatchingItemsTable MatchingItemsTable;
						public OpenResourceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					EnterResourceName = new EnterResourceName(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
		MatchingItemsTable = new MatchingItemsTable(this, applicationModel);
			
			setDisplayName("Open Resource");
		}
				public OpenResourceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EnterResourceName = new EnterResourceName(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
		MatchingItemsTable = new MatchingItemsTable(this, applicationModel);

			setDisplayName("Open Resource");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Open Resource").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EnterResourceName EnterResourceName() { return EnterResourceName; }
		public OpenButton OpenButton() { return OpenButton; }
		public MatchingItemsTable MatchingItemsTable() { return MatchingItemsTable; }
		
			public class EnterResourceName extends JavaEditorNodeBase
	{

		
								public EnterResourceName(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterResourceName");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Enter resource name prefix, path prefix or pattern (?, * or camel case):").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenButton extends JavaButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OpenButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MatchingItemsTable extends JavaTableNodeBase
	{

		
								public MatchingItemsTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MatchingItemsTable");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().attachedText("Matching items:").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ShowInPackageExplorerWindow extends JavaWindowNodeBase
	{

		
			private YesButton YesButton;
						public ShowInPackageExplorerWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					YesButton = new YesButton(this, applicationModel);
			
			setDisplayName("Show In Package Explorer");
		}
				public ShowInPackageExplorerWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					YesButton = new YesButton(this, applicationModel);

			setDisplayName("Show In Package Explorer");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Show In Package Explorer").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public YesButton YesButton() { return YesButton; }
		
			public class YesButton extends JavaButtonNodeBase
	{

		
								public YesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("YesButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BatchclipseMenu extends JavaMenuNodeBase
	{

		
			private SwitchWorkspaceMenu SwitchWorkspaceMenu;
	private NewMenu NewMenu;
						public BatchclipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SwitchWorkspaceMenu = new SwitchWorkspaceMenu(this, applicationModel);
		NewMenu = new NewMenu(this, applicationModel);

			setDisplayName("BatchclipseMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("batchclipse").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SwitchWorkspaceMenu SwitchWorkspaceMenu() { return SwitchWorkspaceMenu; }
		public NewMenu NewMenu() { return NewMenu; }
		
			public class SwitchWorkspaceMenu extends JavaMenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public SwitchWorkspaceMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("SwitchWorkspaceMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Switch Workspace").path("MenuItem;MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends JavaMenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").nativeClass("org.eclipse.swt.widgets.MenuItem").path("MenuItem;MenuItem;MenuItem;Shell;").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewMenu extends JavaMenuNodeBase
	{

		
			private JavaProjectMenu JavaProjectMenu;
	private ProjectMenu ProjectMenu;
	private Package Package;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					JavaProjectMenu = new JavaProjectMenu(this, applicationModel);
		ProjectMenu = new ProjectMenu(this, applicationModel);
		Package = new Package(this, applicationModel);

			setDisplayName("NewMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("New").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public JavaProjectMenu JavaProjectMenu() { return JavaProjectMenu; }
		public ProjectMenu ProjectMenu() { return ProjectMenu; }
		public Package Package() { return Package; }
		
			public class JavaProjectMenu extends JavaMenuNodeBase
	{

		
								public JavaProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JavaProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Java Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectMenu extends JavaMenuNodeBase
	{

		
								public ProjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ProjectMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Project...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Package extends JavaMenuNodeBase
	{

		
								public Package(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Package");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Package").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class OutlineTreeView extends JavaTreeViewNodeBase
	{

		
								public OutlineTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OutlineTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ObjectDependenciesToolBar extends JavaToolBarNodeBase
	{

		
								public ObjectDependenciesToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ObjectDependenciesToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().nativeClass("org.eclipse.swt.widgets.ToolBar").path("ToolBar;Composite;CTabFolder;Composite;Composite;Composite;Composite;Composite;Shell;").tagName("ToolBar").size(new com.hp.lft.sdk.SizeProperty().setHeight(22).setWidth(92)).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShellWindow extends JavaWindowNodeBase
	{

		
			private Table Table;
						public ShellWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Table = new Table(this, applicationModel);
			
			setDisplayName("Shell");
		}
				public ShellWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Table = new Table(this, applicationModel);

			setDisplayName("Shell");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Table Table() { return Table; }
		
			public class Table extends JavaTableNodeBase
	{

		
								public Table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NameConflictWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
						public NameConflictWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Name Conflict");
		}
				public NameConflictWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Name Conflict");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Name Conflict").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SearchConsoleLink extends JavaLinkNodeBase
	{

		
								public SearchConsoleLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SearchConsoleLink");
		}

		@Override
		protected com.hp.lft.sdk.java.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LinkDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewJavaClassWindow extends JavaWindowNodeBase
	{

		
			private NameEditor NameEditor;
	private FinishButton FinishButton;
						public NewJavaClassWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("New Java Class");
		}
				public NewJavaClassWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New Java Class");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Java Class").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AddBookmarkWindow extends JavaWindowNodeBase
	{

		
			private EnterBookmarkNameEditor EnterBookmarkNameEditor;
	private AddButton AddButton;
	private OKButton OKButton;
						public AddBookmarkWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					EnterBookmarkNameEditor = new EnterBookmarkNameEditor(this, applicationModel);
		AddButton = new AddButton(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Add Bookmark");
		}
				public AddBookmarkWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					EnterBookmarkNameEditor = new EnterBookmarkNameEditor(this, applicationModel);
		AddButton = new AddButton(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Add Bookmark");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Add Bookmark").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public EnterBookmarkNameEditor EnterBookmarkNameEditor() { return EnterBookmarkNameEditor; }
		public AddButton AddButton() { return AddButton; }
		public OKButton OKButton() { return OKButton; }
		
			public class EnterBookmarkNameEditor extends JavaEditorNodeBase
	{

		
								public EnterBookmarkNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enter Bookmark name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Enter Bookmark name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class AddButton extends JavaButtonNodeBase
	{

		
								public AddButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Add");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Add").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BreakpointsTreeView extends JavaTreeViewNodeBase
	{

		
								public BreakpointsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BreakpointsTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CompositeUiObject2 extends JavaUiObjectNodeBase
	{

		
								public CompositeUiObject2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite2");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(24).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class BookmarksTreeView extends JavaTreeViewNodeBase
	{

		
								public BookmarksTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("BookmarksTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("1 items").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveResourceWindow extends JavaWindowNodeBase
	{

		
			private DonTSaveButton DonTSaveButton;
						public SaveResourceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					DonTSaveButton = new DonTSaveButton(this, applicationModel);
			
			setDisplayName("Save Resource");
		}
				public SaveResourceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					DonTSaveButton = new DonTSaveButton(this, applicationModel);

			setDisplayName("Save Resource");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Save Resource").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public DonTSaveButton DonTSaveButton() { return DonTSaveButton; }
		
			public class DonTSaveButton extends JavaButtonNodeBase
	{

		
								public DonTSaveButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DonTSaveButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Don't Save").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewNaturalProjectWindow extends JavaWindowNodeBase
	{

		
			private NewProjectEditor NewProjectEditor;
	private FinishButton FinishButton;
						public NewNaturalProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewProjectEditor = new NewProjectEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("NewNaturalProjectWindow");
		}
				public NewNaturalProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewProjectEditor = new NewProjectEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("NewNaturalProjectWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Natural Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewProjectEditor NewProjectEditor() { return NewProjectEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class NewProjectEditor extends JavaEditorNodeBase
	{

		
								public NewProjectEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NewProjectEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("New Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FinishButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PropertiesTabControl extends JavaTabControlNodeBase
	{

		
			private PropertiesTreeView PropertiesTreeView;
						public PropertiesTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PropertiesTreeView = new PropertiesTreeView(this, applicationModel);

			setDisplayName("PropertiesTabControl");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().origLogicalLocation("X_BIG__Y_UNK").nativeClass("org.eclipse.swt.custom.CTabFolder").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PropertiesTreeView PropertiesTreeView() { return PropertiesTreeView; }
		
			public class PropertiesTreeView extends JavaTreeViewNodeBase
	{

		
								public PropertiesTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PropertiesTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class SaveIsNotAllowedWindow extends JavaWindowNodeBase
	{

		
			private OKButton OKButton;
	private SaveNotAllowedErrorMessage SaveNotAllowedErrorMessage;
						public SaveIsNotAllowedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
		SaveNotAllowedErrorMessage = new SaveNotAllowedErrorMessage(this, applicationModel);
			
			setDisplayName("SaveIsNotAllowedWindow");
		}
				public SaveIsNotAllowedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);
		SaveNotAllowedErrorMessage = new SaveNotAllowedErrorMessage(this, applicationModel);

			setDisplayName("SaveIsNotAllowedWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Save is not allowed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		public SaveNotAllowedErrorMessage SaveNotAllowedErrorMessage() { return SaveNotAllowedErrorMessage; }
		
			public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OKButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SaveNotAllowedErrorMessage extends JavaLabelNodeBase
	{

		
								public SaveNotAllowedErrorMessage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SaveNotAllowedErrorMessage");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().label("Please add at least one component to this map.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FindReplaceWindow extends JavaWindowNodeBase
	{

		
			private FindEdit FindEdit;
	private ReplaceWithEdit ReplaceWithEdit;
	private ReplaceAllButton ReplaceAllButton;
	private CloseButton CloseButton;
	private FindReplaceCloseButton FindReplaceCloseButton;
	private RegularExpressionsCheckBox RegularExpressionsCheckBox;
						public FindReplaceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FindEdit = new FindEdit(this, applicationModel);
		ReplaceWithEdit = new ReplaceWithEdit(this, applicationModel);
		ReplaceAllButton = new ReplaceAllButton(this, applicationModel);
		CloseButton = new CloseButton(this, applicationModel);
		FindReplaceCloseButton = new FindReplaceCloseButton(this, applicationModel);
		RegularExpressionsCheckBox = new RegularExpressionsCheckBox(this, applicationModel);
			
			setDisplayName("Find/Replace");
		}
				public FindReplaceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FindEdit = new FindEdit(this, applicationModel);
		ReplaceWithEdit = new ReplaceWithEdit(this, applicationModel);
		ReplaceAllButton = new ReplaceAllButton(this, applicationModel);
		CloseButton = new CloseButton(this, applicationModel);
		FindReplaceCloseButton = new FindReplaceCloseButton(this, applicationModel);
		RegularExpressionsCheckBox = new RegularExpressionsCheckBox(this, applicationModel);

			setDisplayName("Find/Replace");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Find/Replace").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FindEdit FindEdit() { return FindEdit; }
		public ReplaceWithEdit ReplaceWithEdit() { return ReplaceWithEdit; }
		public ReplaceAllButton ReplaceAllButton() { return ReplaceAllButton; }
		public CloseButton CloseButton() { return CloseButton; }
		public FindReplaceCloseButton FindReplaceCloseButton() { return FindReplaceCloseButton; }
		public RegularExpressionsCheckBox RegularExpressionsCheckBox() { return RegularExpressionsCheckBox; }
		
			public class FindEdit extends JavaListNodeBase
	{

		
								public FindEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FindEdit");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Find:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReplaceWithEdit extends JavaListNodeBase
	{

		
								public ReplaceWithEdit(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReplaceWithEdit");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Replace with:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ReplaceAllButton extends JavaButtonNodeBase
	{

		
								public ReplaceAllButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ReplaceAllButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Replace All").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CloseButton extends JavaButtonNodeBase
	{

		
								public CloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CloseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Please add at least one component to this map.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FindReplaceCloseButton extends JavaButtonNodeBase
	{

		
								public FindReplaceCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FindReplaceCloseButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RegularExpressionsCheckBox extends JavaCheckBoxNodeBase
	{

		
								public RegularExpressionsCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Regular expressions");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Regular expressions").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class GraphicalEditorUiObject extends JavaUiObjectNodeBase
	{

		
								public GraphicalEditorUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GraphicalEditorUiObject");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.draw2d.FigureCanvas").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DimensionsNotBetween0And3StLabel extends JavaLabelNodeBase
	{

		
								public DimensionsNotBetween0And3StLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DimensionsNotBetween0And3StLabel");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().label("Dimensions not between 0 and 3").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class IsNotAValidRangeStLabel extends JavaLabelNodeBase
	{

		
								public IsNotAValidRangeStLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IsNotAValidRangeStLabel");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().attachedText(new RegExpProperty(".*is not a valid range")).label(new RegExpProperty(" .*is not a valid range")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewFolderWindow extends JavaWindowNodeBase
	{

		
			private FolderNameEditor FolderNameEditor;
	private FinishButton FinishButton;
						public NewFolderWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FolderNameEditor = new FolderNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("New Folder");
		}
				public NewFolderWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FolderNameEditor = new FolderNameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FolderNameEditor FolderNameEditor() { return FolderNameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class FolderNameEditor extends JavaEditorNodeBase
	{

		
								public FolderNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder Name");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Folder name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ImportWindow extends JavaWindowNodeBase
	{

		
			private NextButton NextButton;
	private SelectScreen SelectScreen;
	private FileSystemScreen FileSystemScreen;
	private FinishButton FinishButton;
						public ImportWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NextButton = new NextButton(this, applicationModel);
		SelectScreen = new SelectScreen(this, applicationModel);
		FileSystemScreen = new FileSystemScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("Import");
		}
				public ImportWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NextButton = new NextButton(this, applicationModel);
		SelectScreen = new SelectScreen(this, applicationModel);
		FileSystemScreen = new FileSystemScreen(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("Import");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Import").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NextButton NextButton() { return NextButton; }
		public SelectScreen SelectScreen() { return SelectScreen; }
		public FileSystemScreen FileSystemScreen() { return FileSystemScreen; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class NextButton extends JavaButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectScreen extends JavaUiObjectNodeBase
	{

		
			private SelectAnImportWizardEditor SelectAnImportWizardEditor;
						public SelectScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectAnImportWizardEditor = new SelectAnImportWizardEditor(this, applicationModel);

			setDisplayName("Select Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectAnImportWizardEditor SelectAnImportWizardEditor() { return SelectAnImportWizardEditor; }
		
			public class SelectAnImportWizardEditor extends JavaEditorNodeBase
	{

		
								public SelectAnImportWizardEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select an import wizard:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Select an import wizard:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FileSystemScreen extends JavaUiObjectNodeBase
	{

		
			private FromDirectoryList FromDirectoryList;
	private SelectAllButton SelectAllButton;
						public FileSystemScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FromDirectoryList = new FromDirectoryList(this, applicationModel);
		SelectAllButton = new SelectAllButton(this, applicationModel);

			setDisplayName("File System Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FromDirectoryList FromDirectoryList() { return FromDirectoryList; }
		public SelectAllButton SelectAllButton() { return SelectAllButton; }
		
			public class FromDirectoryList extends JavaListNodeBase
	{

		
								public FromDirectoryList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("From directory:");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("From directory:").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SelectAllButton extends JavaButtonNodeBase
	{

		
								public SelectAllButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select All");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Select All").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AddNatureAndClasspathWindow extends JavaWindowNodeBase
	{

		
			private CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox;
	private OKButton OKButton;
						public AddNatureAndClasspathWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox = new CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Add Nature and Classpath");
		}
				public AddNatureAndClasspathWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox = new CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox(this, applicationModel);
		OKButton = new OKButton(this, applicationModel);

			setDisplayName("Add Nature and Classpath");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Add Nature and Classpath").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox() { return CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox; }
		public OKButton OKButton() { return OKButton; }
		
			public class CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox extends JavaCheckBoxNodeBase
	{

		
								public CreateExampleScriptsDoesnTOverwriteExistingFilesCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Create example scripts (doesn't overwrite existing files).");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("Create example scripts (doesn't overwrite existing files).").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OKButton extends JavaButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewJavaInterfaceWindow extends JavaWindowNodeBase
	{

		
			private NameEditor NameEditor;
	private FinishButton FinishButton;
						public NewJavaInterfaceWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
			
			setDisplayName("New Java Interface");
		}
				public NewJavaInterfaceWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NameEditor = new NameEditor(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);

			setDisplayName("New Java Interface");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Java Interface").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NameEditor NameEditor() { return NameEditor; }
		public FinishButton FinishButton() { return FinishButton; }
		
			public class NameEditor extends JavaEditorNodeBase
	{

		
								public NameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends JavaButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class innoWakeWindow extends StdWindowNodeBase
	{

		
			private newMeeclipseProjectDialog newMeeclipseProjectDialog;
	private JARSelectionDialog JARSelectionDialog;
	private RunConfigurationsDialog RunConfigurationsDialog;
						public innoWakeWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					newMeeclipseProjectDialog = new newMeeclipseProjectDialog(this, applicationModel);
		JARSelectionDialog = new JARSelectionDialog(this, applicationModel);
		RunConfigurationsDialog = new RunConfigurationsDialog(this, applicationModel);
			
			setDisplayName(" innoWake");
		}
				public innoWakeWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					newMeeclipseProjectDialog = new newMeeclipseProjectDialog(this, applicationModel);
		JARSelectionDialog = new JARSelectionDialog(this, applicationModel);
		RunConfigurationsDialog = new RunConfigurationsDialog(this, applicationModel);

			setDisplayName(" innoWake");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.WindowDescription.Builder().childWindow(false).ownedWindow(false).windowClassRegExp("SWT_Window0").windowTitleRegExp(" innoWake").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public newMeeclipseProjectDialog newMeeclipseProjectDialog() { return newMeeclipseProjectDialog; }
		public JARSelectionDialog JARSelectionDialog() { return JARSelectionDialog; }
		public RunConfigurationsDialog RunConfigurationsDialog() { return RunConfigurationsDialog; }
		
			public class newMeeclipseProjectDialog extends StdDialogNodeBase
	{

		
			private selectFolderDialog selectFolderDialog;
						public newMeeclipseProjectDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					selectFolderDialog = new selectFolderDialog(this, applicationModel);
			
			setDisplayName("New meeclipse Project");
		}
				public newMeeclipseProjectDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					selectFolderDialog = new selectFolderDialog(this, applicationModel);

			setDisplayName("New meeclipse Project");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("New meeclipse Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public selectFolderDialog selectFolderDialog() { return selectFolderDialog; }
		
			public class selectFolderDialog extends StdDialogNodeBase
	{

		
			private cancelButton cancelButton;
						public selectFolderDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					cancelButton = new cancelButton(this, applicationModel);
			
			setDisplayName("Select Folder");
		}
				public selectFolderDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("Select Folder");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("Select Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public cancelButton cancelButton() { return cancelButton; }
		
			public class cancelButton extends StdButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ButtonDescription.Builder().nativeClass("Button").text("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class JARSelectionDialog extends StdDialogNodeBase
	{

		
			private ItemsViewUiObject ItemsViewUiObject;
	private AddressJarSelection AddressJarSelection;
	private OpenButton OpenButton;
	private FileNameEditField FileNameEditField;
						public JARSelectionDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					ItemsViewUiObject = new ItemsViewUiObject(this, applicationModel);
		AddressJarSelection = new AddressJarSelection(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
		FileNameEditField = new FileNameEditField(this, applicationModel);
			
			setDisplayName("JAR Selection");
		}
				public JARSelectionDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ItemsViewUiObject = new ItemsViewUiObject(this, applicationModel);
		AddressJarSelection = new AddressJarSelection(this, applicationModel);
		OpenButton = new OpenButton(this, applicationModel);
		FileNameEditField = new FileNameEditField(this, applicationModel);

			setDisplayName("JAR Selection");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("JAR Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ItemsViewUiObject ItemsViewUiObject() { return ItemsViewUiObject; }
		public AddressJarSelection AddressJarSelection() { return AddressJarSelection; }
		public OpenButton OpenButton() { return OpenButton; }
		public FileNameEditField FileNameEditField() { return FileNameEditField; }
		
			public class ItemsViewUiObject extends StdUiObjectNodeBase
	{

		
			private ItemsViewListBox ItemsViewListBox;
						public ItemsViewUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ItemsViewListBox = new ItemsViewListBox(this, applicationModel);

			setDisplayName("Items View");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.UiObjectDescription.Builder().accessibleName("Items View").windowClassRegExp("DirectUIHWND").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ItemsViewListBox ItemsViewListBox() { return ItemsViewListBox; }
		
			public class ItemsViewListBox extends StdListBoxNodeBase
	{

		
								public ItemsViewListBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ItemsViewListBox");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ListBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ListBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ListBoxDescription.Builder().accessibleName("Items View").attachedText("").nativeClass("list").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AddressJarSelection extends StdToolBarNodeBase
	{

		
								public AddressJarSelection(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddressJarSelection");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ToolBarDescription.Builder().nativeClass("ToolbarWindow32").text(new RegExpProperty("Address:.*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenButton extends StdButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ButtonDescription.Builder().nativeClass("Button").text("&Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FileNameEditField extends StdEditFieldNodeBase
	{

		
								public FileNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FileNameEditField");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.EditFieldDescription.Builder().attachedText("File &name:").nativeClass("Edit").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class RunConfigurationsDialog extends StdDialogNodeBase
	{

		
			private SysTreeView32TreeView SysTreeView32TreeView;
	private NameUiObject NameUiObject;
	private RunConfigWindow RunConfigWindow;
	private EditEditor EditEditor;
	private RunButton RunButton;
						public RunConfigurationsDialog(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SysTreeView32TreeView = new SysTreeView32TreeView(this, applicationModel);
		NameUiObject = new NameUiObject(this, applicationModel);
		RunConfigWindow = new RunConfigWindow(this, applicationModel);
		EditEditor = new EditEditor(this, applicationModel);
		RunButton = new RunButton(this, applicationModel);
			
			setDisplayName("Run Configurations");
		}
				public RunConfigurationsDialog(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SysTreeView32TreeView = new SysTreeView32TreeView(this, applicationModel);
		NameUiObject = new NameUiObject(this, applicationModel);
		RunConfigWindow = new RunConfigWindow(this, applicationModel);
		EditEditor = new EditEditor(this, applicationModel);
		RunButton = new RunButton(this, applicationModel);

			setDisplayName("Run Configurations");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.DialogDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.DialogDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.DialogDescription.Builder().childWindow(false).ownedWindow(true).nativeClass("#32770").text("Run Configurations").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SysTreeView32TreeView SysTreeView32TreeView() { return SysTreeView32TreeView; }
		public NameUiObject NameUiObject() { return NameUiObject; }
		public RunConfigWindow RunConfigWindow() { return RunConfigWindow; }
		public EditEditor EditEditor() { return EditEditor; }
		public RunButton RunButton() { return RunButton; }
		
			public class SysTreeView32TreeView extends StdTreeViewNodeBase
	{

		
								public SysTreeView32TreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SysTreeView32TreeView");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.TreeViewDescription.Builder().nativeClass("SysTreeView32").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameUiObject extends StdUiObjectNodeBase
	{

		
								public NameUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.UiObjectDescription.Builder().attachedText("&Name:").nativeClass("SWT_Window0").text("").windowClassRegExp("SWT_Window0").windowId(0).index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunConfigWindow extends StdUiObjectNodeBase
	{

		
								public RunConfigWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RunConfigWindow");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.UiObjectDescription.Builder().attachedText("&Name:").nativeClass("SWT_Window0").text("").windowClassRegExp("SWT_Window0").windowId(0).index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EditEditor extends StdEditorNodeBase
	{

		
								public EditEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Edit");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.EditorDescription.Builder().nativeClass("Edit").windowId(0).index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RunButton extends StdButtonNodeBase
	{

		
								public RunButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Run");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.ButtonDescription.Builder().nativeClass("Button").text("&Run").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class jFrameWindow extends JavaWindowNodeBase
	{

		
			private Label1Editor Label1Editor;
	private Label2Editor Label2Editor;
						public jFrameWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Label1Editor = new Label1Editor(this, applicationModel);
		Label2Editor = new Label2Editor(this, applicationModel);
			
			setDisplayName("JFrame");
		}
				public jFrameWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Label1Editor = new Label1Editor(this, applicationModel);
		Label2Editor = new Label2Editor(this, applicationModel);

			setDisplayName("JFrame");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Label1Editor Label1Editor() { return Label1Editor; }
		public Label2Editor Label2Editor() { return Label2Editor; }
		
			public class Label1Editor extends JavaEditorNodeBase
	{

		
								public Label1Editor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Label 1");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().nativeClass("innowake.mee.natural.runtime.core.io.screen.swing.b").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class Label2Editor extends JavaEditorNodeBase
	{

		
								public Label2Editor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Label 2");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().nativeClass("innowake.mee.natural.runtime.core.io.screen.swing.b").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FieldTracingWindow extends JavaWindowNodeBase
	{

		
			private FieldTable FieldTable;
	private FieldUsageTreeView FieldUsageTreeView;
						public FieldTracingWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					FieldTable = new FieldTable(this, applicationModel);
		FieldUsageTreeView = new FieldUsageTreeView(this, applicationModel);
			
			setDisplayName("FieldTracingWindow");
		}
				public FieldTracingWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					FieldTable = new FieldTable(this, applicationModel);
		FieldUsageTreeView = new FieldUsageTreeView(this, applicationModel);

			setDisplayName("FieldTracingWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Field tracing [EMPLOYEES]").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public FieldTable FieldTable() { return FieldTable; }
		public FieldUsageTreeView FieldUsageTreeView() { return FieldUsageTreeView; }
		
			public class FieldTable extends JavaTableNodeBase
	{

		
								public FieldTable(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FieldTable");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Table").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FieldUsageTreeView extends JavaTreeViewNodeBase
	{

		
								public FieldUsageTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FieldUsageTreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InnoWakeTMRuntimePage extends WebPageNodeBase
	{

		
			private MeeScreenReadCompatibilityPluginTest MeeScreenReadCompatibilityPluginTest;
	private PrintLink PrintLink;
	private SalutationField SalutationField;
	private NameField NameField;
	private TimeErrorMessage TimeErrorMessage;
	private WebEditEditField WebEditEditField;
	private CICSBMSWindow CICSBMSWindow;
	private CICSDemoApplicationFirstField CICSDemoApplicationFirstField;
	private TestingDFHMDFPARSecondField TestingDFHMDFPARSecondField;
	private TestingDFHMDFPARThirdField TestingDFHMDFPARThirdField;
	private TestingDFHMDFPARFourthField TestingDFHMDFPARFourthField;
	private TestingDFHMDFPARFifthField TestingDFHMDFPARFifthField;
	private TestingDFHMDFPARSixthField TestingDFHMDFPARSixthField;
	private ABSeventhField ABSeventhField;
	private TestingDFHMDFPAREighthField TestingDFHMDFPAREighthField;
	private TestingDFHMDFPARNinthField TestingDFHMDFPARNinthField;
	private TestingDFHMDFPARTenthField TestingDFHMDFPARTenthField;
	private JKEleventhField JKEleventhField;
	private WebEditTwelfthField WebEditTwelfthField;
	private WebEditThirteenthField WebEditThirteenthField;
	private TestingDFHMDFPARFourteenthField TestingDFHMDFPARFourteenthField;
	private WebEditFifteenthField WebEditFifteenthField;
	private CICSDemoApplicationSixteenthField CICSDemoApplicationSixteenthField;
	private MapColourSeventeenthField MapColourSeventeenthField;
	private UITaxSystemHeader UITaxSystemHeader;
	private ApplicationClosedText ApplicationClosedText;
	private CICSDemoApplicationWebElement CICSDemoApplicationWebElement;
						public InnoWakeTMRuntimePage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					MeeScreenReadCompatibilityPluginTest = new MeeScreenReadCompatibilityPluginTest(this, applicationModel);
		PrintLink = new PrintLink(this, applicationModel);
		SalutationField = new SalutationField(this, applicationModel);
		NameField = new NameField(this, applicationModel);
		TimeErrorMessage = new TimeErrorMessage(this, applicationModel);
		WebEditEditField = new WebEditEditField(this, applicationModel);
		CICSBMSWindow = new CICSBMSWindow(this, applicationModel);
		CICSDemoApplicationFirstField = new CICSDemoApplicationFirstField(this, applicationModel);
		TestingDFHMDFPARSecondField = new TestingDFHMDFPARSecondField(this, applicationModel);
		TestingDFHMDFPARThirdField = new TestingDFHMDFPARThirdField(this, applicationModel);
		TestingDFHMDFPARFourthField = new TestingDFHMDFPARFourthField(this, applicationModel);
		TestingDFHMDFPARFifthField = new TestingDFHMDFPARFifthField(this, applicationModel);
		TestingDFHMDFPARSixthField = new TestingDFHMDFPARSixthField(this, applicationModel);
		ABSeventhField = new ABSeventhField(this, applicationModel);
		TestingDFHMDFPAREighthField = new TestingDFHMDFPAREighthField(this, applicationModel);
		TestingDFHMDFPARNinthField = new TestingDFHMDFPARNinthField(this, applicationModel);
		TestingDFHMDFPARTenthField = new TestingDFHMDFPARTenthField(this, applicationModel);
		JKEleventhField = new JKEleventhField(this, applicationModel);
		WebEditTwelfthField = new WebEditTwelfthField(this, applicationModel);
		WebEditThirteenthField = new WebEditThirteenthField(this, applicationModel);
		TestingDFHMDFPARFourteenthField = new TestingDFHMDFPARFourteenthField(this, applicationModel);
		WebEditFifteenthField = new WebEditFifteenthField(this, applicationModel);
		CICSDemoApplicationSixteenthField = new CICSDemoApplicationSixteenthField(this, applicationModel);
		MapColourSeventeenthField = new MapColourSeventeenthField(this, applicationModel);
		UITaxSystemHeader = new UITaxSystemHeader(this, applicationModel);
		ApplicationClosedText = new ApplicationClosedText(this, applicationModel);
		CICSDemoApplicationWebElement = new CICSDemoApplicationWebElement(this, applicationModel);

			setDisplayName("innoWake(TM) runtime");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public MeeScreenReadCompatibilityPluginTest MeeScreenReadCompatibilityPluginTest() { return MeeScreenReadCompatibilityPluginTest; }
		public PrintLink PrintLink() { return PrintLink; }
		public SalutationField SalutationField() { return SalutationField; }
		public NameField NameField() { return NameField; }
		public TimeErrorMessage TimeErrorMessage() { return TimeErrorMessage; }
		public WebEditEditField WebEditEditField() { return WebEditEditField; }
		public CICSBMSWindow CICSBMSWindow() { return CICSBMSWindow; }
		public CICSDemoApplicationFirstField CICSDemoApplicationFirstField() { return CICSDemoApplicationFirstField; }
		public TestingDFHMDFPARSecondField TestingDFHMDFPARSecondField() { return TestingDFHMDFPARSecondField; }
		public TestingDFHMDFPARThirdField TestingDFHMDFPARThirdField() { return TestingDFHMDFPARThirdField; }
		public TestingDFHMDFPARFourthField TestingDFHMDFPARFourthField() { return TestingDFHMDFPARFourthField; }
		public TestingDFHMDFPARFifthField TestingDFHMDFPARFifthField() { return TestingDFHMDFPARFifthField; }
		public TestingDFHMDFPARSixthField TestingDFHMDFPARSixthField() { return TestingDFHMDFPARSixthField; }
		public ABSeventhField ABSeventhField() { return ABSeventhField; }
		public TestingDFHMDFPAREighthField TestingDFHMDFPAREighthField() { return TestingDFHMDFPAREighthField; }
		public TestingDFHMDFPARNinthField TestingDFHMDFPARNinthField() { return TestingDFHMDFPARNinthField; }
		public TestingDFHMDFPARTenthField TestingDFHMDFPARTenthField() { return TestingDFHMDFPARTenthField; }
		public JKEleventhField JKEleventhField() { return JKEleventhField; }
		public WebEditTwelfthField WebEditTwelfthField() { return WebEditTwelfthField; }
		public WebEditThirteenthField WebEditThirteenthField() { return WebEditThirteenthField; }
		public TestingDFHMDFPARFourteenthField TestingDFHMDFPARFourteenthField() { return TestingDFHMDFPARFourteenthField; }
		public WebEditFifteenthField WebEditFifteenthField() { return WebEditFifteenthField; }
		public CICSDemoApplicationSixteenthField CICSDemoApplicationSixteenthField() { return CICSDemoApplicationSixteenthField; }
		public MapColourSeventeenthField MapColourSeventeenthField() { return MapColourSeventeenthField; }
		public UITaxSystemHeader UITaxSystemHeader() { return UITaxSystemHeader; }
		public ApplicationClosedText ApplicationClosedText() { return ApplicationClosedText; }
		public CICSDemoApplicationWebElement CICSDemoApplicationWebElement() { return CICSDemoApplicationWebElement; }
		
			public class MeeScreenReadCompatibilityPluginTest extends WebPageNodeBase
	{

		
			private CLRWebElement CLRWebElement;
	private ICONIB4VIEWWebEditField ICONIB4VIEWWebEditField;
	private CommandEntryWebEditField CommandEntryWebEditField;
	private TXWebEditField TXWebEditField;
	private HIWebEditField HIWebEditField;
	private MOWebEditField MOWebEditField;
	private KSWebEditField KSWebEditField;
	private OHWebEditField OHWebEditField;
	private VAWebEditField VAWebEditField;
	private NYWebEditField NYWebEditField;
	private FLWebEditField FLWebEditField;
	private CAWebEditField CAWebEditField;
	private NJWebEditField NJWebEditField;
	private ILWebEditField ILWebEditField;
	private GAWebEditField GAWebEditField;
	private ALWebEditField ALWebEditField;
	private PrinterWebEditField PrinterWebEditField;
	private MOLineWebEditEditField MOLineWebEditEditField;
	private SocialSecurityNumberLastWebEditField SocialSecurityNumberLastWebEditField;
	private SocialSecurityNumberFirstWebEditField SocialSecurityNumberFirstWebEditField;
	private SocialSecurityNumberSecondWebEditField SocialSecurityNumberSecondWebEditField;
	private TransactionOptionWebEditField TransactionOptionWebEditField;
	private SocialSecurityNumberWebEditField SocialSecurityNumberWebEditField;
	private SecondSocialSecurityNumberWebEditField SecondSocialSecurityNumberWebEditField;
	private EmployerAccountNumberWebEditFieldLineEditField EmployerAccountNumberWebEditFieldLineEditField;
	private DataEntryWebEditField DataEntryWebEditField;
	private DataEntryWageChangeWebEditField DataEntryWageChangeWebEditField;
						public MeeScreenReadCompatibilityPluginTest(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CLRWebElement = new CLRWebElement(this, applicationModel);
		ICONIB4VIEWWebEditField = new ICONIB4VIEWWebEditField(this, applicationModel);
		CommandEntryWebEditField = new CommandEntryWebEditField(this, applicationModel);
		TXWebEditField = new TXWebEditField(this, applicationModel);
		HIWebEditField = new HIWebEditField(this, applicationModel);
		MOWebEditField = new MOWebEditField(this, applicationModel);
		KSWebEditField = new KSWebEditField(this, applicationModel);
		OHWebEditField = new OHWebEditField(this, applicationModel);
		VAWebEditField = new VAWebEditField(this, applicationModel);
		NYWebEditField = new NYWebEditField(this, applicationModel);
		FLWebEditField = new FLWebEditField(this, applicationModel);
		CAWebEditField = new CAWebEditField(this, applicationModel);
		NJWebEditField = new NJWebEditField(this, applicationModel);
		ILWebEditField = new ILWebEditField(this, applicationModel);
		GAWebEditField = new GAWebEditField(this, applicationModel);
		ALWebEditField = new ALWebEditField(this, applicationModel);
		PrinterWebEditField = new PrinterWebEditField(this, applicationModel);
		MOLineWebEditEditField = new MOLineWebEditEditField(this, applicationModel);
		SocialSecurityNumberLastWebEditField = new SocialSecurityNumberLastWebEditField(this, applicationModel);
		SocialSecurityNumberFirstWebEditField = new SocialSecurityNumberFirstWebEditField(this, applicationModel);
		SocialSecurityNumberSecondWebEditField = new SocialSecurityNumberSecondWebEditField(this, applicationModel);
		TransactionOptionWebEditField = new TransactionOptionWebEditField(this, applicationModel);
		SocialSecurityNumberWebEditField = new SocialSecurityNumberWebEditField(this, applicationModel);
		SecondSocialSecurityNumberWebEditField = new SecondSocialSecurityNumberWebEditField(this, applicationModel);
		EmployerAccountNumberWebEditFieldLineEditField = new EmployerAccountNumberWebEditFieldLineEditField(this, applicationModel);
		DataEntryWebEditField = new DataEntryWebEditField(this, applicationModel);
		DataEntryWageChangeWebEditField = new DataEntryWageChangeWebEditField(this, applicationModel);

			setDisplayName("MeeScreenReadCompatibilityPluginTest");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CLRWebElement CLRWebElement() { return CLRWebElement; }
		public ICONIB4VIEWWebEditField ICONIB4VIEWWebEditField() { return ICONIB4VIEWWebEditField; }
		public CommandEntryWebEditField CommandEntryWebEditField() { return CommandEntryWebEditField; }
		public TXWebEditField TXWebEditField() { return TXWebEditField; }
		public HIWebEditField HIWebEditField() { return HIWebEditField; }
		public MOWebEditField MOWebEditField() { return MOWebEditField; }
		public KSWebEditField KSWebEditField() { return KSWebEditField; }
		public OHWebEditField OHWebEditField() { return OHWebEditField; }
		public VAWebEditField VAWebEditField() { return VAWebEditField; }
		public NYWebEditField NYWebEditField() { return NYWebEditField; }
		public FLWebEditField FLWebEditField() { return FLWebEditField; }
		public CAWebEditField CAWebEditField() { return CAWebEditField; }
		public NJWebEditField NJWebEditField() { return NJWebEditField; }
		public ILWebEditField ILWebEditField() { return ILWebEditField; }
		public GAWebEditField GAWebEditField() { return GAWebEditField; }
		public ALWebEditField ALWebEditField() { return ALWebEditField; }
		public PrinterWebEditField PrinterWebEditField() { return PrinterWebEditField; }
		public MOLineWebEditEditField MOLineWebEditEditField() { return MOLineWebEditEditField; }
		public SocialSecurityNumberLastWebEditField SocialSecurityNumberLastWebEditField() { return SocialSecurityNumberLastWebEditField; }
		public SocialSecurityNumberFirstWebEditField SocialSecurityNumberFirstWebEditField() { return SocialSecurityNumberFirstWebEditField; }
		public SocialSecurityNumberSecondWebEditField SocialSecurityNumberSecondWebEditField() { return SocialSecurityNumberSecondWebEditField; }
		public TransactionOptionWebEditField TransactionOptionWebEditField() { return TransactionOptionWebEditField; }
		public SocialSecurityNumberWebEditField SocialSecurityNumberWebEditField() { return SocialSecurityNumberWebEditField; }
		public SecondSocialSecurityNumberWebEditField SecondSocialSecurityNumberWebEditField() { return SecondSocialSecurityNumberWebEditField; }
		public EmployerAccountNumberWebEditFieldLineEditField EmployerAccountNumberWebEditFieldLineEditField() { return EmployerAccountNumberWebEditFieldLineEditField; }
		public DataEntryWebEditField DataEntryWebEditField() { return DataEntryWebEditField; }
		public DataEntryWageChangeWebEditField DataEntryWageChangeWebEditField() { return DataEntryWageChangeWebEditField; }
		
			public class CLRWebElement extends WebWebElementNodeBase
	{

		
								public CLRWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CLRWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-button-caption").innerText("CLR").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ICONIB4VIEWWebEditField extends WebEditFieldNodeBase
	{

		
								public ICONIB4VIEWWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ICONIB4VIEWWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").className("iw-jaws-line v-widget v-textfield v-readonly v-textfield-readonly v-has-width").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CommandEntryWebEditField extends WebEditFieldNodeBase
	{

		
								public CommandEntryWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CommandEntryWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("CE043O").type("text").index(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TXWebEditField extends WebEditFieldNodeBase
	{

		
								public TXWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TXWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP1043O").type("text").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class HIWebEditField extends WebEditFieldNodeBase
	{

		
								public HIWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("HIWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP2043O").type("text").index(31).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MOWebEditField extends WebEditFieldNodeBase
	{

		
								public MOWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MOWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP3043O").type("text").index(37).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class KSWebEditField extends WebEditFieldNodeBase
	{

		
								public KSWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("KSWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP4043O").type("text").index(43).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OHWebEditField extends WebEditFieldNodeBase
	{

		
								public OHWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OHWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP5043O").type("text").index(49).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class VAWebEditField extends WebEditFieldNodeBase
	{

		
								public VAWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("VAWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP6043O").type("text").index(55).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NYWebEditField extends WebEditFieldNodeBase
	{

		
								public NYWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NYWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP7043O").type("text").index(61).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FLWebEditField extends WebEditFieldNodeBase
	{

		
								public FLWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("FLWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP8043O").type("text").index(67).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CAWebEditField extends WebEditFieldNodeBase
	{

		
								public CAWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CAWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP9043O").type("text").index(73).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NJWebEditField extends WebEditFieldNodeBase
	{

		
								public NJWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NJWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP10043O").type("text").index(79).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ILWebEditField extends WebEditFieldNodeBase
	{

		
								public ILWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ILWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP11043O").type("text").index(85).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class GAWebEditField extends WebEditFieldNodeBase
	{

		
								public GAWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("GAWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP12043O").type("text").index(91).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ALWebEditField extends WebEditFieldNodeBase
	{

		
								public ALWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ALWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("OP13043O").type("text").index(97).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PrinterWebEditField extends WebEditFieldNodeBase
	{

		
								public PrinterWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PrinterWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("RUSE043O").type("text").index(107).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MOLineWebEditEditField extends WebEditFieldNodeBase
	{

		
								public MOLineWebEditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MOLineWebEdit");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(36).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SocialSecurityNumberLastWebEditField extends WebEditFieldNodeBase
	{

		
								public SocialSecurityNumberLastWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SocialSecurityNumberLastWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("SB1SS23O").type("text").index(113).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SocialSecurityNumberFirstWebEditField extends WebEditFieldNodeBase
	{

		
								public SocialSecurityNumberFirstWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SocialSecurityNumberFirstWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("SB1SSN1O").type("password").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SocialSecurityNumberSecondWebEditField extends WebEditFieldNodeBase
	{

		
								public SocialSecurityNumberSecondWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SocialSecurityNumberSecondWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("SB1SSN2O").type("password").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TransactionOptionWebEditField extends WebEditFieldNodeBase
	{

		
								public TransactionOptionWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TransactionOptionWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("SW1TRIDO").type("text").index(29).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SocialSecurityNumberWebEditField extends WebEditFieldNodeBase
	{

		
								public SocialSecurityNumberWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SocialSecurityNumberWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("SW1SSN1O").type("text").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SecondSocialSecurityNumberWebEditField extends WebEditFieldNodeBase
	{

		
								public SecondSocialSecurityNumberWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SecondSocialSecurityNumberWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").title("SW1SSN2O").type("text").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EmployerAccountNumberWebEditFieldLineEditField extends WebEditFieldNodeBase
	{

		
								public EmployerAccountNumberWebEditFieldLineEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EmployerAccountNumberWebEditFieldLine");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataEntryWebEditField extends WebEditFieldNodeBase
	{

		
								public DataEntryWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataEntryWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").value("DATA ENTRY - INITIAL CLAIM INFORMATION").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DataEntryWageChangeWebEditField extends WebEditFieldNodeBase
	{

		
								public DataEntryWageChangeWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DataEntryWageChangeWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").value("   DATA ENTRY - WAGE CHANGE  ").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class PrintLink extends WebLinkNodeBase
	{

		
								public PrintLink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PrintLink");
		}

		@Override
		protected com.hp.lft.sdk.web.LinkDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.LinkDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.LinkDescription.Builder().innerText("Print").tagName("A").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SalutationField extends WebEditFieldNodeBase
	{

		
								public SalutationField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SalutationField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NameField extends WebEditFieldNodeBase
	{

		
								public NameField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NameField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TimeErrorMessage extends WebWebElementNodeBase
	{

		
								public TimeErrorMessage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TimeErrorMessage");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("This application has terminated due to a timeout while waiting for UI interaction.").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WebEditEditField extends WebEditFieldNodeBase
	{

		
								public WebEditEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebEditEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSBMSWindow extends WebWebElementNodeBase
	{

		
								public CICSBMSWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSBMSWindow");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-tabsheet v-widget v-has-width iw-content v-tabsheet-iw-content").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSDemoApplicationFirstField extends WebEditFieldNodeBase
	{

		
								public CICSDemoApplicationFirstField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSDemoApplicationFirstField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[1]/INPUT[1]").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARSecondField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARSecondField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARSecondField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[2]/INPUT[1]").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARThirdField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARThirdField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARThirdField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[3]/INPUT[1]").index(2).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARFourthField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARFourthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARFourthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[4]/INPUT[1]").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARFifthField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARFifthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARFifthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[5]/INPUT[1]").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARSixthField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARSixthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARSixthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[6]/INPUT[1]").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ABSeventhField extends WebEditFieldNodeBase
	{

		
								public ABSeventhField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ABSeventhField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[7]/INPUT[1]").index(6).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPAREighthField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPAREighthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPAREighthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[8]/INPUT[1]").index(7).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARNinthField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARNinthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARNinthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[9]/INPUT[1]").index(8).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARTenthField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARTenthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARTenthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[10]/INPUT[1]").index(9).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class JKEleventhField extends WebEditFieldNodeBase
	{

		
								public JKEleventhField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("JKEleventhField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[11]/INPUT[1]").index(10).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WebEditTwelfthField extends WebEditFieldNodeBase
	{

		
								public WebEditTwelfthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebEditTwelfthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").outerHTML("<input type=\"text\" class=\"v-textfield v-widget align-left v-textfield-align-left v-has-width\" tabindex=\"0\" maxlength=\"80\" alt=\"TESTFLD3O\" title=\"TESTFLD3O\" style=\"width: 646px;\">").placeholder("").tagName("INPUT").type("text").xpath("//DIV[12]/INPUT[1]").index(11).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WebEditThirteenthField extends WebEditFieldNodeBase
	{

		
								public WebEditThirteenthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebEditThirteenthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("INPUT").type("password").xpath("//DIV[13]/INPUT[1]").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TestingDFHMDFPARFourteenthField extends WebEditFieldNodeBase
	{

		
								public TestingDFHMDFPARFourteenthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TestingDFHMDFPARFourteenthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[14]/INPUT[1]").index(12).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WebEditFifteenthField extends WebEditFieldNodeBase
	{

		
								public WebEditFifteenthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("WebEditFifteenthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[15]/INPUT[1]").index(13).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSDemoApplicationSixteenthField extends WebEditFieldNodeBase
	{

		
								public CICSDemoApplicationSixteenthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSDemoApplicationSixteenthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[16]/INPUT[1]").index(14).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class MapColourSeventeenthField extends WebEditFieldNodeBase
	{

		
								public MapColourSeventeenthField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MapColourSeventeenthField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").xpath("//DIV[17]/INPUT[1]").index(15).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UITaxSystemHeader extends WebEditFieldNodeBase
	{

		
								public UITaxSystemHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UITaxSystemHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").value("UI TAX SYSTEM BATCH LOG DISPLAY").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplicationClosedText extends WebWebElementNodeBase
	{

		
								public ApplicationClosedText(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApplicationClosedText");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("This application has been closed.").tagName("SPAN").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CICSDemoApplicationWebElement extends WebWebElementNodeBase
	{

		
			private CICSDemoApplication CICSDemoApplication;
	private EnterNameEditField EnterNameEditField;
	private EnterDeptEditField EnterDeptEditField;
						public CICSDemoApplicationWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CICSDemoApplication = new CICSDemoApplication(this, applicationModel);
		EnterNameEditField = new EnterNameEditField(this, applicationModel);
		EnterDeptEditField = new EnterDeptEditField(this, applicationModel);

			setDisplayName("CICSDemoApplicationWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("MCICS DEMO APPLICATION CICS DEMO APPLICATION HELLO, WELCOME HELLO, WELCOME ENTER NAME ENTER NAME ENTER DEPT: ENTER DEPT: CLRPA1PA2PA3Waiting for application ...").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CICSDemoApplication CICSDemoApplication() { return CICSDemoApplication; }
		public EnterNameEditField EnterNameEditField() { return EnterNameEditField; }
		public EnterDeptEditField EnterDeptEditField() { return EnterDeptEditField; }
		
			public class CICSDemoApplication extends WebWebElementNodeBase
	{

		
								public CICSDemoApplication(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CICSDemoApplication");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("mee-terminal-field readonly x25 y0").innerText("CICS DEMO APPLICATION ").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnterNameEditField extends WebEditFieldNodeBase
	{

		
								public EnterNameEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterNameEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("INPUT").type("text").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnterDeptEditField extends WebEditFieldNodeBase
	{

		
								public EnterDeptEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("EnterDeptEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("INPUT").type("password").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class AutomatedChildSupportEnforcementSystemACSESPage extends WebPageNodeBase
	{

		
			private AIWebEditField AIWebEditField;
	private SleepWebEditField SleepWebEditField;
	private ValueWebEditField ValueWebEditField;
	private SessionExpiredWebElement SessionExpiredWebElement;
	private TakeNoteOfAnyUnsavedDataErrorMessage TakeNoteOfAnyUnsavedDataErrorMessage;
						public AutomatedChildSupportEnforcementSystemACSESPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					AIWebEditField = new AIWebEditField(this, applicationModel);
		SleepWebEditField = new SleepWebEditField(this, applicationModel);
		ValueWebEditField = new ValueWebEditField(this, applicationModel);
		SessionExpiredWebElement = new SessionExpiredWebElement(this, applicationModel);
		TakeNoteOfAnyUnsavedDataErrorMessage = new TakeNoteOfAnyUnsavedDataErrorMessage(this, applicationModel);

			setDisplayName("Automated Child Support Enforcement System (ACSES)");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public AIWebEditField AIWebEditField() { return AIWebEditField; }
		public SleepWebEditField SleepWebEditField() { return SleepWebEditField; }
		public ValueWebEditField ValueWebEditField() { return ValueWebEditField; }
		public SessionExpiredWebElement SessionExpiredWebElement() { return SessionExpiredWebElement; }
		public TakeNoteOfAnyUnsavedDataErrorMessage TakeNoteOfAnyUnsavedDataErrorMessage() { return TakeNoteOfAnyUnsavedDataErrorMessage; }
		
			public class AIWebEditField extends WebEditFieldNodeBase
	{

		
								public AIWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AIWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(3).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SleepWebEditField extends WebEditFieldNodeBase
	{

		
								public SleepWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SleepWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(5).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ValueWebEditField extends WebEditFieldNodeBase
	{

		
								public ValueWebEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ValueWebEditField");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().accessibilityName("").name("WebEdit").placeholder("").tagName("INPUT").type("text").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class SessionExpiredWebElement extends WebWebElementNodeBase
	{

		
								public SessionExpiredWebElement(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("SessionExpiredWebElement");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Session Expired").tagName("H1").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TakeNoteOfAnyUnsavedDataErrorMessage extends WebWebElementNodeBase
	{

		
								public TakeNoteOfAnyUnsavedDataErrorMessage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("TakeNoteOfAnyUnsavedDataErrorMessage");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().innerText("Take note of any unsaved data, and click here or press ESC key to continue.").tagName("P").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class MaxensoMonitorPage extends WebPageNodeBase
	{

		
			private ListHeader ListHeader;
	private ApplicationFoundTextAreaEditField ApplicationFoundTextAreaEditField;
	private ActiveApplicationMEE4757AText ActiveApplicationMEE4757AText;
	private StartMeeApplicationButton StartMeeApplicationButton;
	private ActiveApplicationMEE4757CText ActiveApplicationMEE4757CText;
	private CloseMeeApplicationButton CloseMeeApplicationButton;
	private ActiveMeeApplicationList ActiveMeeApplicationList;
						public MaxensoMonitorPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ListHeader = new ListHeader(this, applicationModel);
		ApplicationFoundTextAreaEditField = new ApplicationFoundTextAreaEditField(this, applicationModel);
		ActiveApplicationMEE4757AText = new ActiveApplicationMEE4757AText(this, applicationModel);
		StartMeeApplicationButton = new StartMeeApplicationButton(this, applicationModel);
		ActiveApplicationMEE4757CText = new ActiveApplicationMEE4757CText(this, applicationModel);
		CloseMeeApplicationButton = new CloseMeeApplicationButton(this, applicationModel);
		ActiveMeeApplicationList = new ActiveMeeApplicationList(this, applicationModel);

			setDisplayName("maxenso monitor");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ListHeader ListHeader() { return ListHeader; }
		public ApplicationFoundTextAreaEditField ApplicationFoundTextAreaEditField() { return ApplicationFoundTextAreaEditField; }
		public ActiveApplicationMEE4757AText ActiveApplicationMEE4757AText() { return ActiveApplicationMEE4757AText; }
		public StartMeeApplicationButton StartMeeApplicationButton() { return StartMeeApplicationButton; }
		public ActiveApplicationMEE4757CText ActiveApplicationMEE4757CText() { return ActiveApplicationMEE4757CText; }
		public CloseMeeApplicationButton CloseMeeApplicationButton() { return CloseMeeApplicationButton; }
		public ActiveMeeApplicationList ActiveMeeApplicationList() { return ActiveMeeApplicationList; }
		
			public class ListHeader extends WebWebElementNodeBase
	{

		
								public ListHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ListHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-label v-widget iw-title-label v-label-iw-title-label v-label-undef-w").innerText("List of currently running mee applications").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplicationFoundTextAreaEditField extends WebEditFieldNodeBase
	{

		
								public ApplicationFoundTextAreaEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApplicationFoundTextArea");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("TEXTAREA").type("textarea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ActiveApplicationMEE4757AText extends WebWebElementNodeBase
	{

		
								public ActiveApplicationMEE4757AText(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ActiveApplicationMEE4757AText");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-label v-widget iw-app-label v-label-iw-app-label v-label-undef-w").innerText("active mee application: MEE4757A").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class StartMeeApplicationButton extends WebButtonNodeBase
	{

		
								public StartMeeApplicationButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StartMeeApplicationButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("").name("Start mee application").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ActiveApplicationMEE4757CText extends WebWebElementNodeBase
	{

		
								public ActiveApplicationMEE4757CText(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ActiveApplicationMEE4757CText");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-label v-widget iw-app-label v-label-iw-app-label v-label-undef-w").innerText("active mee application: MEE4757C").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CloseMeeApplicationButton extends WebButtonNodeBase
	{

		
								public CloseMeeApplicationButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CloseMeeApplicationButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().accessibilityName("").buttonType("").name("Close mee application").role("button").tagName("DIV").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ActiveMeeApplicationList extends WebWebElementNodeBase
	{

		
								public ActiveMeeApplicationList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ActiveMeeApplicationList");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().tagName("DIV").xpath("//DIV[4]/DIV[1]").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class InnoWakeTMMonitoringPage extends WebPageNodeBase
	{

		
			private MonitoringOfApplicationsHeader MonitoringOfApplicationsHeader;
	private ActiveApplicationTextareaEditField ActiveApplicationTextareaEditField;
	private ApplicationList ApplicationList;
	private CloseButton CloseButton;
	private RefreshButton RefreshButton;
	private ContinueButton ContinueButton;
						public InnoWakeTMMonitoringPage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					MonitoringOfApplicationsHeader = new MonitoringOfApplicationsHeader(this, applicationModel);
		ActiveApplicationTextareaEditField = new ActiveApplicationTextareaEditField(this, applicationModel);
		ApplicationList = new ApplicationList(this, applicationModel);
		CloseButton = new CloseButton(this, applicationModel);
		RefreshButton = new RefreshButton(this, applicationModel);
		ContinueButton = new ContinueButton(this, applicationModel);

			setDisplayName("innoWake(TM) monitoring");
		}

		@Override
		protected com.hp.lft.sdk.web.PageDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.PageDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.PageDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public MonitoringOfApplicationsHeader MonitoringOfApplicationsHeader() { return MonitoringOfApplicationsHeader; }
		public ActiveApplicationTextareaEditField ActiveApplicationTextareaEditField() { return ActiveApplicationTextareaEditField; }
		public ApplicationList ApplicationList() { return ApplicationList; }
		public CloseButton CloseButton() { return CloseButton; }
		public RefreshButton RefreshButton() { return RefreshButton; }
		public ContinueButton ContinueButton() { return ContinueButton; }
		
			public class MonitoringOfApplicationsHeader extends WebWebElementNodeBase
	{

		
								public MonitoringOfApplicationsHeader(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("MonitoringOfApplicationsHeader");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-label v-widget iw-title-label v-label-iw-title-label v-label-undef-w").innerText("Monitoring of applications").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ActiveApplicationTextareaEditField extends WebEditFieldNodeBase
	{

		
								public ActiveApplicationTextareaEditField(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ActiveApplicationTextarea");
		}

		@Override
		protected com.hp.lft.sdk.web.EditFieldDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.EditFieldDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.EditFieldDescription.Builder().name("WebEdit").tagName("TEXTAREA").type("textarea").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplicationList extends WebWebElementNodeBase
	{

		
								public ApplicationList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ApplicationList");
		}

		@Override
		protected com.hp.lft.sdk.web.WebElementDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.WebElementDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.WebElementDescription.Builder().className("v-verticallayout v-layout v-vertical v-widget iw-app-list-container v-verticallayout-iw-app-list-container v-has-width").tagName("DIV").xpath("//DIV[4]/DIV[1]").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CloseButton extends WebButtonNodeBase
	{

		
								public CloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CloseButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("").name("Close").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class RefreshButton extends WebButtonNodeBase
	{

		
								public RefreshButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("RefreshButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("").name("Refresh").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ContinueButton extends WebButtonNodeBase
	{

		
								public ContinueButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ContinueButton");
		}

		@Override
		protected com.hp.lft.sdk.web.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.web.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.web.ButtonDescription.Builder().buttonType("").name("Continue").tagName("DIV").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class GoogleChromeWindow extends StdWindowNodeBase
	{

		
			private RestorePagesWindow RestorePagesWindow;
						public GoogleChromeWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					RestorePagesWindow = new RestorePagesWindow(this, applicationModel);
			
			setDisplayName(" Google Chrome");
		}
				public GoogleChromeWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					RestorePagesWindow = new RestorePagesWindow(this, applicationModel);

			setDisplayName(" Google Chrome");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.WindowDescription.Builder().childWindow(false).ownedWindow(false).windowClassRegExp("Chrome_WidgetWin_1").windowTitleRegExp(" Google Chrome").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public RestorePagesWindow RestorePagesWindow() { return RestorePagesWindow; }
		
			public class RestorePagesWindow extends StdWindowNodeBase
	{

		
			private IntermediateD3DWindowUiObject IntermediateD3DWindowUiObject;
						public RestorePagesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					IntermediateD3DWindowUiObject = new IntermediateD3DWindowUiObject(this, applicationModel);
			
			setDisplayName("Restore pages?");
		}
				public RestorePagesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					IntermediateD3DWindowUiObject = new IntermediateD3DWindowUiObject(this, applicationModel);

			setDisplayName("Restore pages?");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.WindowDescription.Builder().childWindow(false).ownedWindow(true).windowClassRegExp("Chrome_WidgetWin_1").windowTitleRegExp("Restore pages?").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public IntermediateD3DWindowUiObject IntermediateD3DWindowUiObject() { return IntermediateD3DWindowUiObject; }
		
			public class IntermediateD3DWindowUiObject extends StdUiObjectNodeBase
	{

		
								public IntermediateD3DWindowUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("IntermediateD3DWindowUiObject");
		}

		@Override
		protected com.hp.lft.sdk.stdwin.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.stdwin.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.stdwin.UiObjectDescription.Builder().windowClassRegExp("Intermediate D3D Window").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}


			
	public abstract class JavaWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Window, com.hp.lft.sdk.java.WindowDescription> implements com.hp.lft.sdk.java.Window
	{
		public JavaWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public JavaWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Table, com.hp.lft.sdk.java.TableDescription> implements com.hp.lft.sdk.java.Table
	{		
		public JavaTableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateColumn(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateColumn(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateRow(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void deselectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.TableCell getCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCell(arg0, arg1);
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void selectCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCellsRange(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectCellsRange(int arg0, java.lang.String arg1, int arg2, java.lang.String arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void selectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Button, com.hp.lft.sdk.java.ButtonDescription> implements com.hp.lft.sdk.java.Button
	{		
		public JavaButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTreeViewNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TreeView, com.hp.lft.sdk.java.TreeViewDescription> implements com.hp.lft.sdk.java.TreeView
	{		
		public JavaTreeViewNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateNode(com.hp.lft.sdk.java.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public java.lang.String buildNodePath(java.lang.Object... arg0)  
		{
			return getConcrete().buildNodePath(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeader(arg0);
		}

		@Override 
		public int getColumnsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnsCount();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public com.hp.lft.sdk.java.TreeViewNode getNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNode(arg0);
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TreeViewNode> getSelectedNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedNodes();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public int getVisibleNodesCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleNodesCount();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.TreeViewNode arg0, com.hp.lft.sdk.java.TreeViewNode arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaUiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.UiObject, com.hp.lft.sdk.java.UiObjectDescription> implements com.hp.lft.sdk.java.UiObject
	{		
		public JavaUiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaEditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Editor, com.hp.lft.sdk.java.EditorDescription> implements com.hp.lft.sdk.java.Editor
	{		
		public JavaEditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void clickLink(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().clickLink(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public void delete(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().delete(arg0, arg1, arg2, arg3);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void insert(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().insert(arg0, arg1, arg2);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void replace(java.lang.String arg0, int arg1, int arg2, int arg3, int arg4) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().replace(arg0, arg1, arg2, arg3, arg4);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setCursorPosition(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaListNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.List, com.hp.lft.sdk.java.ListDescription> implements com.hp.lft.sdk.java.List
	{		
		public JavaListNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(com.hp.lft.sdk.java.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.ListItem arg0, com.hp.lft.sdk.java.ListItem arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaCheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.CheckBox, com.hp.lft.sdk.java.CheckBoxDescription> implements com.hp.lft.sdk.java.CheckBox
	{		
		public JavaCheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.CheckedState getState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getState();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setState(com.hp.lft.sdk.CheckedState arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setState(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaMenuNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Menu, com.hp.lft.sdk.java.MenuDescription> implements com.hp.lft.sdk.java.Menu
	{		
		public JavaMenuNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public com.hp.lft.sdk.java.Menu getSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenu(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.Menu> getSubMenus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenus();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select();
		}

		@Override 
		public void selectSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectSubMenu(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaToolBarNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.ToolBar, com.hp.lft.sdk.java.ToolBarDescription> implements com.hp.lft.sdk.java.ToolBar
	{		
		public JavaToolBarNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ToolBarButton getButton(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButton(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtons();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getSelectedButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedButtons();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaTabControlNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TabControl, com.hp.lft.sdk.java.TabControlDescription> implements com.hp.lft.sdk.java.TabControl
	{		
		public JavaTabControlNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public void close(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getOrigLogicalLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOrigLogicalLocation();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.lang.String getSelectedTab() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedTab();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public int getTabsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTabsCount();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaLabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Label, com.hp.lft.sdk.java.LabelDescription> implements com.hp.lft.sdk.java.Label
	{		
		public JavaLabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaRadioButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.RadioButton, com.hp.lft.sdk.java.RadioButtonDescription> implements com.hp.lft.sdk.java.RadioButton
	{		
		public JavaRadioButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void set() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set();
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class JavaLinkNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Link, com.hp.lft.sdk.java.LinkDescription> implements com.hp.lft.sdk.java.Link
	{		
		public JavaLinkNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void clickLink(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().clickLink(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
		
	public abstract class WebPageNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Page, com.hp.lft.sdk.web.PageDescription> implements com.hp.lft.sdk.web.Page
	{		
		public WebPageNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getURL() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getURL();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public java.lang.String runJavaScript(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0);
		}

		@Override 
		public <TResult> TResult runJavaScript(java.lang.String arg0, java.lang.Class<TResult> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().runJavaScript(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void sync() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sync();
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class WebWebElementNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.WebElement, com.hp.lft.sdk.web.WebElementDescription> implements com.hp.lft.sdk.web.WebElement
	{		
		public WebWebElementNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.EditField, com.hp.lft.sdk.web.EditFieldDescription> implements com.hp.lft.sdk.web.EditField
	{		
		public WebEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDefaultValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getDefaultValue();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public int getMaxCharsInLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxCharsInLine();
		}

		@Override 
		public int getMaxLength() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getMaxLength();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getPattern() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPattern();
		}

		@Override 
		public java.lang.String getPlaceholder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPlaceholder();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public int getRowsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRowsCount();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getValue() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getValue();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isRequired() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRequired();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setValue(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setValue(arg0);
		}

		@Override 
		public void submit() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().submit();
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebLinkNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Link, com.hp.lft.sdk.web.LinkDescription> implements com.hp.lft.sdk.web.Link
	{		
		public WebLinkNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColor();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getFontName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getFontName();
		}

		@Override 
		public java.lang.String getHref() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHref();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getTarget() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTarget();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class WebButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.web.Button, com.hp.lft.sdk.web.ButtonDescription> implements com.hp.lft.sdk.web.Button
	{		
		public WebButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.CSSDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.web.WebElement> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.web.XPathDescription arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.web.WebDoubleClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.web.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibilityName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibilityName();
		}

		@Override 
		public java.lang.String getAttribute(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttribute(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getAttributes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttributes();
		}

		@Override 
		public java.lang.String getButtonType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtonType();
		}

		@Override 
		public java.lang.String getCSSSelector() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCSSSelector();
		}

		@Override 
		public java.lang.String getClassName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getClassName();
		}

		@Override 
		public java.lang.String getComputedStyle(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyle(arg0);
		}

		@Override 
		public java.util.Map<java.lang.String, java.lang.String> getComputedStyles() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getComputedStyles();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getId();
		}

		@Override 
		public java.lang.String getInnerHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerHTML();
		}

		@Override 
		public java.lang.String getInnerText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getInnerText();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getName();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getOuterHTML() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterHTML();
		}

		@Override 
		public java.lang.String getOuterText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOuterText();
		}

		@Override 
		public java.lang.String getRole() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRole();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getXPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getXPath();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void hoverTap() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap();
		}

		@Override 
		public void hoverTap(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().hoverTap(arg0);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void longPress() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress();
		}

		@Override 
		public void longPress(com.hp.lft.sdk.web.WebLongPressArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().longPress(arg0);
		}

		@Override 
		public void pan(com.hp.lft.sdk.web.WebPanArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0);
		}

		@Override 
		public void pan(long arg0, long arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pan(arg0, arg1);
		}

		@Override 
		public void pinch(com.hp.lft.sdk.web.WebPinchArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void pinch(double arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().pinch(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.SwipeDirection arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public void swipe(com.hp.lft.sdk.web.WebSwipeArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().swipe(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
		
	public abstract class StdMenuNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Menu, com.hp.lft.sdk.stdwin.MenuDescription> implements com.hp.lft.sdk.stdwin.Menu
	{		
		public StdMenuNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public java.lang.String buildMenuPath(java.lang.Object... arg0)  
		{
			return getConcrete().buildMenuPath(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.MenuItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.stdwin.MenuType getType() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getType();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void select(com.hp.lft.sdk.stdwin.MenuItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}
	}
	
	public abstract class StdWindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.stdwin.Window, com.hp.lft.sdk.stdwin.WindowDescription> implements com.hp.lft.sdk.stdwin.Window
	{
		public StdWindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public StdWindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdDialogNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.stdwin.Dialog, com.hp.lft.sdk.stdwin.DialogDescription> implements com.hp.lft.sdk.stdwin.Dialog
	{
		public StdDialogNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public StdDialogNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void activate(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public boolean hasBorder() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasBorder();
		}

		@Override 
		public boolean hasCaption() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasCaption();
		}

		@Override 
		public boolean hasSizebox() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSizebox();
		}

		@Override 
		public boolean hasSystemMenu() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().hasSystemMenu();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isActive() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isActive();
		}

		@Override 
		public boolean isChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChildWindow();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMdiChildWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMdiChildWindow();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isOwnedWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isOwnedWindow();
		}

		@Override 
		public boolean isPopupWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isPopupWindow();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isToolWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isToolWindow();
		}

		@Override 
		public boolean isTopmost() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isTopmost();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Button, com.hp.lft.sdk.stdwin.ButtonDescription> implements com.hp.lft.sdk.stdwin.Button
	{		
		public StdButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdUiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.UiObject, com.hp.lft.sdk.stdwin.UiObjectDescription> implements com.hp.lft.sdk.stdwin.UiObject
	{		
		public StdUiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public com.hp.lft.sdk.ScrollInfo getHorizontalScroll() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHorizontalScroll();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public com.hp.lft.sdk.ScrollInfo getVerticalScroll() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVerticalScroll();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.VerticalScrollPosition getVerticalScrollPosition() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVerticalScrollPosition();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1);
		}

		@Override 
		public void scroll(com.hp.lft.sdk.ScrollOrientation arg0, com.hp.lft.sdk.ScrollType arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().scroll(arg0, arg1, arg2);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdListBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.ListBox, com.hp.lft.sdk.stdwin.ListBoxDescription> implements com.hp.lft.sdk.stdwin.ListBox
	{		
		public StdListBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(com.hp.lft.sdk.stdwin.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void activateItem(com.hp.lft.sdk.stdwin.ListItem arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void activateItem(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0, arg1);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.stdwin.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.stdwin.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.stdwin.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.stdwin.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0);
		}

		@Override 
		public void selectRange(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.stdwin.ListItem arg0, com.hp.lft.sdk.stdwin.ListItem arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdToolBarNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.ToolBar, com.hp.lft.sdk.stdwin.ToolBarDescription> implements com.hp.lft.sdk.stdwin.ToolBar
	{		
		public StdToolBarNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.ToolBarButton getButton(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButton(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.ToolBarButton> getButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtons();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.ToolBarButton> getSelectedButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedButtons();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdEditFieldNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.EditField, com.hp.lft.sdk.stdwin.EditFieldDescription> implements com.hp.lft.sdk.stdwin.EditField
	{		
		public StdEditFieldNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdTreeViewNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.TreeView, com.hp.lft.sdk.stdwin.TreeViewDescription> implements com.hp.lft.sdk.stdwin.TreeView
	{		
		public StdTreeViewNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateNode(com.hp.lft.sdk.stdwin.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(com.hp.lft.sdk.stdwin.TreeViewNode arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0, arg1);
		}

		@Override 
		public void activateNode(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0, arg1);
		}

		@Override 
		public void activateNode(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0, arg1);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.TreeViewNode> getCheckedVisibleNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCheckedVisibleNodes();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.stdwin.TreeViewNode getNode(java.lang.String arg0)  
		{
			return getConcrete().getNode(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.TreeViewNode> getSelectedNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedNodes();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.stdwin.TreeViewNode> getVisibleNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleNodes();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.stdwin.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.stdwin.TreeViewNode arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void select(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void select(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class StdEditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.stdwin.Editor, com.hp.lft.sdk.stdwin.EditorDescription> implements com.hp.lft.sdk.stdwin.Editor
	{		
		public StdEditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0);
		}

		@Override 
		public void dragAndDropOn(com.hp.lft.sdk.SupportDragAndDrop arg0, com.hp.lft.sdk.DragAndDropArgs arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().dragAndDropOn(arg0, arg1);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAccessibleName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAccessibleName();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public int getCursorColumn() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCursorColumn();
		}

		@Override 
		public int getCursorLine() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCursorLine();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public int getHandle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getHandle();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public java.lang.String getWindowClassRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowClassRegExp();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowExtendedStyles> getWindowExtendedStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyle();
		}

		@Override 
		public long getWindowExtendedStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowExtendedStyleAsLong();
		}

		@Override 
		public int getWindowId() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowId();
		}

		@Override 
		public java.util.EnumSet<com.hp.lft.sdk.WindowStyles> getWindowStyle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyle();
		}

		@Override 
		public long getWindowStyleAsLong() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowStyleAsLong();
		}

		@Override 
		public java.lang.String getWindowTitleRegExp() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowTitleRegExp();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isRightAligned() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightAligned();
		}

		@Override 
		public boolean isRightToLeftLayout() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftLayout();
		}

		@Override 
		public boolean isRightToLeftReading() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isRightToLeftReading();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void mouseMove(com.hp.lft.sdk.Location arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().mouseMove(arg0);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setCursorPosition(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
