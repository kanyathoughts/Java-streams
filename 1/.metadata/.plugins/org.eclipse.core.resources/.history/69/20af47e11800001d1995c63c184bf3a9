
/** ----------------------------------------------------------------------------------------------------
* 
*	This code was automatically generated by the LeanFT Application Model code generator.
*
*	Changes to this file may cause incorrect behavior and will be lost 
*	when the code is regenerated.
*
*   ----------------------------------------------------------------------------------------------------
*/
package appmodels;

import com.hp.lft.sdk.*;

// This class is automatically generated by the LeanFT Application Model code generator - version 14.53
public class NatCreatorApplicationModel extends AppModelBase {		private MainWindow MainWindow;

	public NatCreatorApplicationModel() throws GeneralLeanFtException 
	{
		setName("NatCreatorApplicationModel");
			MainWindow = new MainWindow(this);
		rebuildDescriptions();
	}
	
	public NatCreatorApplicationModel(TestObject contextTestObject) throws GeneralLeanFtException
	{
		setName("NatCreatorApplicationModel");
				MainWindow = new MainWindow(contextTestObject, this);
		rebuildDescriptions();
	}	

			public MainWindow MainWindow() { return MainWindow; }

		public class MainWindow extends WindowNodeBase
	{

		
			private NewProjectWindowPart1 NewProjectWindowPart1;
	private NavigatorTabControl NavigatorTabControl;
	private NewProjectWindowPart2 NewProjectWindowPart2;
	private OpenPerspectiveWindow OpenPerspectiveWindow;
	private BottomTabControl BottomTabControl;
	private preferencesWindow preferencesWindow;
	private WindowMenu WindowMenu;
	private showViewWindow showViewWindow;
	private ProblemsTreeView ProblemsTreeView;
	private newNaturalProjectWindow newNaturalProjectWindow;
	private yesButton yesButton;
	private addCobolNatureWindow addCobolNatureWindow;
	private newFolderWindow newFolderWindow;
	private propertiesWindow propertiesWindow;
	private newCobolObjectWindow newCobolObjectWindow;
	private NewNaturalObjectWindow NewNaturalObjectWindow;
	private NatcreatorGenerateNewObjectWindow NatcreatorGenerateNewObjectWindow;
	private cTabFolderTabControl cTabFolderTabControl;
	private FileMenu FileMenu;
	private importProjectsFromFileSystemOrArchiveWindow importProjectsFromFileSystemOrArchiveWindow;
	private AnnotationRulerColumn1 AnnotationRulerColumn1;
	private DeleteResourcesWindow DeleteResourcesWindow;
	private NewWindow NewWindow;
	private SelectAWizardWindow SelectAWizardWindow;
	private NatcreatorGenerateNewObjectWindow1 NatcreatorGenerateNewObjectWindow1;
						public MainWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NewProjectWindowPart1 = new NewProjectWindowPart1(this, applicationModel);
		NavigatorTabControl = new NavigatorTabControl(this, applicationModel);
		NewProjectWindowPart2 = new NewProjectWindowPart2(this, applicationModel);
		OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		preferencesWindow = new preferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		showViewWindow = new showViewWindow(this, applicationModel);
		ProblemsTreeView = new ProblemsTreeView(this, applicationModel);
		newNaturalProjectWindow = new newNaturalProjectWindow(this, applicationModel);
		yesButton = new yesButton(this, applicationModel);
		addCobolNatureWindow = new addCobolNatureWindow(this, applicationModel);
		newFolderWindow = new newFolderWindow(this, applicationModel);
		propertiesWindow = new propertiesWindow(this, applicationModel);
		newCobolObjectWindow = new newCobolObjectWindow(this, applicationModel);
		NewNaturalObjectWindow = new NewNaturalObjectWindow(this, applicationModel);
		NatcreatorGenerateNewObjectWindow = new NatcreatorGenerateNewObjectWindow(this, applicationModel);
		cTabFolderTabControl = new cTabFolderTabControl(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		importProjectsFromFileSystemOrArchiveWindow = new importProjectsFromFileSystemOrArchiveWindow(this, applicationModel);
		AnnotationRulerColumn1 = new AnnotationRulerColumn1(this, applicationModel);
		DeleteResourcesWindow = new DeleteResourcesWindow(this, applicationModel);
		NewWindow = new NewWindow(this, applicationModel);
		SelectAWizardWindow = new SelectAWizardWindow(this, applicationModel);
		NatcreatorGenerateNewObjectWindow1 = new NatcreatorGenerateNewObjectWindow1(this, applicationModel);
			
			setDisplayName("MainWindow");
		}
				public MainWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewProjectWindowPart1 = new NewProjectWindowPart1(this, applicationModel);
		NavigatorTabControl = new NavigatorTabControl(this, applicationModel);
		NewProjectWindowPart2 = new NewProjectWindowPart2(this, applicationModel);
		OpenPerspectiveWindow = new OpenPerspectiveWindow(this, applicationModel);
		BottomTabControl = new BottomTabControl(this, applicationModel);
		preferencesWindow = new preferencesWindow(this, applicationModel);
		WindowMenu = new WindowMenu(this, applicationModel);
		showViewWindow = new showViewWindow(this, applicationModel);
		ProblemsTreeView = new ProblemsTreeView(this, applicationModel);
		newNaturalProjectWindow = new newNaturalProjectWindow(this, applicationModel);
		yesButton = new yesButton(this, applicationModel);
		addCobolNatureWindow = new addCobolNatureWindow(this, applicationModel);
		newFolderWindow = new newFolderWindow(this, applicationModel);
		propertiesWindow = new propertiesWindow(this, applicationModel);
		newCobolObjectWindow = new newCobolObjectWindow(this, applicationModel);
		NewNaturalObjectWindow = new NewNaturalObjectWindow(this, applicationModel);
		NatcreatorGenerateNewObjectWindow = new NatcreatorGenerateNewObjectWindow(this, applicationModel);
		cTabFolderTabControl = new cTabFolderTabControl(this, applicationModel);
		FileMenu = new FileMenu(this, applicationModel);
		importProjectsFromFileSystemOrArchiveWindow = new importProjectsFromFileSystemOrArchiveWindow(this, applicationModel);
		AnnotationRulerColumn1 = new AnnotationRulerColumn1(this, applicationModel);
		DeleteResourcesWindow = new DeleteResourcesWindow(this, applicationModel);
		NewWindow = new NewWindow(this, applicationModel);
		SelectAWizardWindow = new SelectAWizardWindow(this, applicationModel);
		NatcreatorGenerateNewObjectWindow1 = new NatcreatorGenerateNewObjectWindow1(this, applicationModel);

			setDisplayName("MainWindow");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty(".* - (innoWake|maxenso)")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewProjectWindowPart1 NewProjectWindowPart1() { return NewProjectWindowPart1; }
		public NavigatorTabControl NavigatorTabControl() { return NavigatorTabControl; }
		public NewProjectWindowPart2 NewProjectWindowPart2() { return NewProjectWindowPart2; }
		public OpenPerspectiveWindow OpenPerspectiveWindow() { return OpenPerspectiveWindow; }
		public BottomTabControl BottomTabControl() { return BottomTabControl; }
		public preferencesWindow preferencesWindow() { return preferencesWindow; }
		public WindowMenu WindowMenu() { return WindowMenu; }
		public showViewWindow showViewWindow() { return showViewWindow; }
		public ProblemsTreeView ProblemsTreeView() { return ProblemsTreeView; }
		public newNaturalProjectWindow newNaturalProjectWindow() { return newNaturalProjectWindow; }
		public yesButton yesButton() { return yesButton; }
		public addCobolNatureWindow addCobolNatureWindow() { return addCobolNatureWindow; }
		public newFolderWindow newFolderWindow() { return newFolderWindow; }
		public propertiesWindow propertiesWindow() { return propertiesWindow; }
		public newCobolObjectWindow newCobolObjectWindow() { return newCobolObjectWindow; }
		public NewNaturalObjectWindow NewNaturalObjectWindow() { return NewNaturalObjectWindow; }
		public NatcreatorGenerateNewObjectWindow NatcreatorGenerateNewObjectWindow() { return NatcreatorGenerateNewObjectWindow; }
		public cTabFolderTabControl cTabFolderTabControl() { return cTabFolderTabControl; }
		public FileMenu FileMenu() { return FileMenu; }
		public importProjectsFromFileSystemOrArchiveWindow importProjectsFromFileSystemOrArchiveWindow() { return importProjectsFromFileSystemOrArchiveWindow; }
		public AnnotationRulerColumn1 AnnotationRulerColumn1() { return AnnotationRulerColumn1; }
		public DeleteResourcesWindow DeleteResourcesWindow() { return DeleteResourcesWindow; }
		public NewWindow NewWindow() { return NewWindow; }
		public SelectAWizardWindow SelectAWizardWindow() { return SelectAWizardWindow; }
		public NatcreatorGenerateNewObjectWindow1 NatcreatorGenerateNewObjectWindow1() { return NatcreatorGenerateNewObjectWindow1; }
		
			public class NewProjectWindowPart1 extends WindowNodeBase
	{

		
			private SelectAWizardScreen SelectAWizardScreen;
						public NewProjectWindowPart1(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);
			
			setDisplayName("New Project Window Part 1");
		}
				public NewProjectWindowPart1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);

			setDisplayName("New Project Window Part 1");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectAWizardScreen SelectAWizardScreen() { return SelectAWizardScreen; }
		
			public class SelectAWizardScreen extends UiObjectNodeBase
	{

		
			private WizardsEditor WizardsEditor;
	private NextButton NextButton;
	private WizardsTreeView WizardsTreeView;
	private finishButton finishButton;
	private cancelButton cancelButton;
						public SelectAWizardScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardsEditor = new WizardsEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		WizardsTreeView = new WizardsTreeView(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("Select a wizard Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardsEditor WizardsEditor() { return WizardsEditor; }
		public NextButton NextButton() { return NextButton; }
		public WizardsTreeView WizardsTreeView() { return WizardsTreeView; }
		public finishButton finishButton() { return finishButton; }
		public cancelButton cancelButton() { return cancelButton; }
		
			public class WizardsEditor extends EditorNodeBase
	{

		
								public WizardsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends ButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WizardsTreeView extends TreeViewNodeBase
	{

		
								public WizardsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends ButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cancelButton extends ButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NavigatorTabControl extends TabControlNodeBase
	{

		
			private NavigatorTreeView NavigatorTreeView;
	private ToolBar ToolBar;
	private InitialComposite InitialComposite;
						public NavigatorTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NavigatorTreeView = new NavigatorTreeView(this, applicationModel);
		ToolBar = new ToolBar(this, applicationModel);
		InitialComposite = new InitialComposite(this, applicationModel);

			setDisplayName("Navigator TabControl");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NavigatorTreeView NavigatorTreeView() { return NavigatorTreeView; }
		public ToolBar ToolBar() { return ToolBar; }
		public InitialComposite InitialComposite() { return InitialComposite; }
		
			public class NavigatorTreeView extends TreeViewNodeBase
	{

		
			private NewMenu NewMenu;
	private cobolClipseMenu cobolClipseMenu;
	private propertiesMenu propertiesMenu;
	private CompareWith CompareWith;
	private DeleteMenu DeleteMenu;
	private OpenWithMenu OpenWithMenu;
						public NavigatorTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NewMenu = new NewMenu(this, applicationModel);
		cobolClipseMenu = new cobolClipseMenu(this, applicationModel);
		propertiesMenu = new propertiesMenu(this, applicationModel);
		CompareWith = new CompareWith(this, applicationModel);
		DeleteMenu = new DeleteMenu(this, applicationModel);
		OpenWithMenu = new OpenWithMenu(this, applicationModel);

			setDisplayName("Navigator TreeView");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.widgets.Tree").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NewMenu NewMenu() { return NewMenu; }
		public cobolClipseMenu cobolClipseMenu() { return cobolClipseMenu; }
		public propertiesMenu propertiesMenu() { return propertiesMenu; }
		public CompareWith CompareWith() { return CompareWith; }
		public DeleteMenu DeleteMenu() { return DeleteMenu; }
		public OpenWithMenu OpenWithMenu() { return OpenWithMenu; }
		
			public class NewMenu extends MenuNodeBase
	{

		
			private newFolderMenu newFolderMenu;
	private newCobolObjectMenu newCobolObjectMenu;
	private NewNaturalObjectMenu NewNaturalObjectMenu;
	private otherMenu otherMenu;
	private ObjectFromTemplateMenu ObjectFromTemplateMenu;
	private ObjectToNewTemplateVersionMenu ObjectToNewTemplateVersionMenu;
	private PackageMenu PackageMenu;
	private ClassItemMenu ClassItemMenu;
	private DialogMenu DialogMenu;
						public NewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					newFolderMenu = new newFolderMenu(this, applicationModel);
		newCobolObjectMenu = new newCobolObjectMenu(this, applicationModel);
		NewNaturalObjectMenu = new NewNaturalObjectMenu(this, applicationModel);
		otherMenu = new otherMenu(this, applicationModel);
		ObjectFromTemplateMenu = new ObjectFromTemplateMenu(this, applicationModel);
		ObjectToNewTemplateVersionMenu = new ObjectToNewTemplateVersionMenu(this, applicationModel);
		PackageMenu = new PackageMenu(this, applicationModel);
		ClassItemMenu = new ClassItemMenu(this, applicationModel);
		DialogMenu = new DialogMenu(this, applicationModel);

			setDisplayName("New Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("New").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public newFolderMenu newFolderMenu() { return newFolderMenu; }
		public newCobolObjectMenu newCobolObjectMenu() { return newCobolObjectMenu; }
		public NewNaturalObjectMenu NewNaturalObjectMenu() { return NewNaturalObjectMenu; }
		public otherMenu otherMenu() { return otherMenu; }
		public ObjectFromTemplateMenu ObjectFromTemplateMenu() { return ObjectFromTemplateMenu; }
		public ObjectToNewTemplateVersionMenu ObjectToNewTemplateVersionMenu() { return ObjectToNewTemplateVersionMenu; }
		public PackageMenu PackageMenu() { return PackageMenu; }
		public ClassItemMenu ClassItemMenu() { return ClassItemMenu; }
		public DialogMenu DialogMenu() { return DialogMenu; }
		
			public class newFolderMenu extends MenuNodeBase
	{

		
								public newFolderMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newCobolObjectMenu extends MenuNodeBase
	{

		
								public newCobolObjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cobol Object");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Cobol Object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NewNaturalObjectMenu extends MenuNodeBase
	{

		
								public NewNaturalObjectMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Natural Object Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Natural Object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class otherMenu extends MenuNodeBase
	{

		
								public otherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Other Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ObjectFromTemplateMenu extends MenuNodeBase
	{

		
								public ObjectFromTemplateMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Object From Template");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Object from template").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ObjectToNewTemplateVersionMenu extends MenuNodeBase
	{

		
								public ObjectToNewTemplateVersionMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ObjectToNewTemplateVersion");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Object to new template version").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class PackageMenu extends MenuNodeBase
	{

		
								public PackageMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("PackageMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Package").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClassItemMenu extends MenuNodeBase
	{

		
								public ClassItemMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ClassItemMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Class item").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DialogMenu extends MenuNodeBase
	{

		
								public DialogMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("DialogMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;MenuItem;Shell;").label("Dialog").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cobolClipseMenu extends MenuNodeBase
	{

		
			private addCobolNatureMenu addCobolNatureMenu;
						public cobolClipseMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					addCobolNatureMenu = new addCobolNatureMenu(this, applicationModel);

			setDisplayName("CobolClipseMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("cobolclipse").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public addCobolNatureMenu addCobolNatureMenu() { return addCobolNatureMenu; }
		
			public class addCobolNatureMenu extends MenuNodeBase
	{

		
								public addCobolNatureMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AddCobolNatureMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Add Cobol Nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class propertiesMenu extends MenuNodeBase
	{

		
								public propertiesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Properties");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Properties").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class CompareWith extends MenuNodeBase
	{

		
			private latestFromRepository latestFromRepository;
						public CompareWith(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					latestFromRepository = new latestFromRepository(this, applicationModel);

			setDisplayName("compareWith");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Compare With").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public latestFromRepository latestFromRepository() { return latestFromRepository; }
		
			public class latestFromRepository extends MenuNodeBase
	{

		
								public latestFromRepository(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Latest from Repository");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Latest from Repository").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class DeleteMenu extends MenuNodeBase
	{

		
								public DeleteMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Delete");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Delete").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class OpenWithMenu extends MenuNodeBase
	{

		
			private NatcreatorEditorMenu NatcreatorEditorMenu;
						public OpenWithMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NatcreatorEditorMenu = new NatcreatorEditorMenu(this, applicationModel);

			setDisplayName("Open With");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().path("MenuItem;Shell;").label("Open With").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NatcreatorEditorMenu NatcreatorEditorMenu() { return NatcreatorEditorMenu; }
		
			public class NatcreatorEditorMenu extends MenuNodeBase
	{

		
								public NatcreatorEditorMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NatcreatorEditorMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Natcreator Editor").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class ToolBar extends ToolBarNodeBase
	{

		
								public ToolBar(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ToolBar");
		}

		@Override
		protected com.hp.lft.sdk.java.ToolBarDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ToolBarDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ToolBarDescription.Builder().index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class InitialComposite extends UiObjectNodeBase
	{

		
			private NaturalProjectHyperlink NaturalProjectHyperlink;
						public InitialComposite(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NaturalProjectHyperlink = new NaturalProjectHyperlink(this, applicationModel);

			setDisplayName("Initial composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NaturalProjectHyperlink NaturalProjectHyperlink() { return NaturalProjectHyperlink; }
		
			public class NaturalProjectHyperlink extends UiObjectNodeBase
	{

		
								public NaturalProjectHyperlink(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Natural Project Hyperlink");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.ui.forms.widgets.Hyperlink").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class NewProjectWindowPart2 extends WindowNodeBase
	{

		
			private CreateApplicationBuilderProjectScreen CreateApplicationBuilderProjectScreen;
						public NewProjectWindowPart2(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					CreateApplicationBuilderProjectScreen = new CreateApplicationBuilderProjectScreen(this, applicationModel);
			
			setDisplayName("New Project Window Part 2");
		}
				public NewProjectWindowPart2(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateApplicationBuilderProjectScreen = new CreateApplicationBuilderProjectScreen(this, applicationModel);

			setDisplayName("New Project Window Part 2");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateApplicationBuilderProjectScreen CreateApplicationBuilderProjectScreen() { return CreateApplicationBuilderProjectScreen; }
		
			public class CreateApplicationBuilderProjectScreen extends UiObjectNodeBase
	{

		
			private CreateTwoProjectsUiAndCore CreateTwoProjectsUiAndCore;
	private FinishButton FinishButton;
	private ProjectBasenameEditor ProjectBasenameEditor;
						public CreateApplicationBuilderProjectScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					CreateTwoProjectsUiAndCore = new CreateTwoProjectsUiAndCore(this, applicationModel);
		FinishButton = new FinishButton(this, applicationModel);
		ProjectBasenameEditor = new ProjectBasenameEditor(this, applicationModel);

			setDisplayName("CreateApplicationBuilderProjectScreen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public CreateTwoProjectsUiAndCore CreateTwoProjectsUiAndCore() { return CreateTwoProjectsUiAndCore; }
		public FinishButton FinishButton() { return FinishButton; }
		public ProjectBasenameEditor ProjectBasenameEditor() { return ProjectBasenameEditor; }
		
			public class CreateTwoProjectsUiAndCore extends CheckBoxNodeBase
	{

		
								public CreateTwoProjectsUiAndCore(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CreateTwoProjectsUiAndCore");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().label("Create two projects (ui and core)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class FinishButton extends ButtonNodeBase
	{

		
								public FinishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ProjectBasenameEditor extends EditorNodeBase
	{

		
								public ProjectBasenameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Project basename:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Project basename:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class OpenPerspectiveWindow extends WindowNodeBase
	{

		
			private Table Table;
	private oKButton oKButton;
						public OpenPerspectiveWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Table = new Table(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Open Perspective");
		}
				public OpenPerspectiveWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Table = new Table(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Open Perspective");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Open Perspective").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Table Table() { return Table; }
		public oKButton oKButton() { return oKButton; }
		
			public class Table extends TableNodeBase
	{

		
								public Table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends ButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class BottomTabControl extends TabControlNodeBase
	{

		
			private ConsoleEditor ConsoleEditor;
	private problemsView problemsView;
						public BottomTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					ConsoleEditor = new ConsoleEditor(this, applicationModel);
		problemsView = new problemsView(this, applicationModel);

			setDisplayName("Bottom Tab Control");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_BIG__Y_BIG").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public ConsoleEditor ConsoleEditor() { return ConsoleEditor; }
		public problemsView problemsView() { return problemsView; }
		
			public class ConsoleEditor extends EditorNodeBase
	{

		
								public ConsoleEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Console Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("application-builder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class problemsView extends TreeViewNodeBase
	{

		
								public problemsView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Problems View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class preferencesWindow extends WindowNodeBase
	{

		
			private Tree Tree;
	private ApplyAndCloseButton ApplyAndCloseButton;
	private ClasspathVariablesScreen ClasspathVariablesScreen;
	private newVariableEntryWindow newVariableEntryWindow;
	private classpathVariablesChangedWindow classpathVariablesChangedWindow;
						public preferencesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
			
			setDisplayName("Preferences Window");
		}
				public preferencesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		ClasspathVariablesScreen = new ClasspathVariablesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);

			setDisplayName("Preferences Window");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tree Tree() { return Tree; }
		public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public ClasspathVariablesScreen ClasspathVariablesScreen() { return ClasspathVariablesScreen; }
		public newVariableEntryWindow newVariableEntryWindow() { return newVariableEntryWindow; }
		public classpathVariablesChangedWindow classpathVariablesChangedWindow() { return classpathVariablesChangedWindow; }
		
			public class Tree extends TreeViewNodeBase
	{

		
								public Tree(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplyAndCloseButton extends ButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply and Close");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ClasspathVariablesScreen extends UiObjectNodeBase
	{

		
			private newButton newButton;
						public ClasspathVariablesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					newButton = new newButton(this, applicationModel);

			setDisplayName("Classpath Variables Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public newButton newButton() { return newButton; }
		
			public class newButton extends ButtonNodeBase
	{

		
								public newButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New...");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("New...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newVariableEntryWindow extends WindowNodeBase
	{

		
			private oKButton oKButton;
	private pathEditor pathEditor;
	private nameEditor nameEditor;
						public newVariableEntryWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
			
			setDisplayName("New Variable Entry");
		}
				public newVariableEntryWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);

			setDisplayName("New Variable Entry");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Variable Entry").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		public pathEditor pathEditor() { return pathEditor; }
		public nameEditor nameEditor() { return nameEditor; }
		
			public class oKButton extends ButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pathEditor extends EditorNodeBase
	{

		
								public pathEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Path:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nameEditor extends EditorNodeBase
	{

		
								public nameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class classpathVariablesChangedWindow extends WindowNodeBase
	{

		
			private yesButton yesButton;
						public classpathVariablesChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					yesButton = new yesButton(this, applicationModel);
			
			setDisplayName("Classpath Variables Changed");
		}
				public classpathVariablesChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					yesButton = new yesButton(this, applicationModel);

			setDisplayName("Classpath Variables Changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Classpath Variables Changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public yesButton yesButton() { return yesButton; }
		
			public class yesButton extends ButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class WindowMenu extends MenuNodeBase
	{

		
			private PreferencesMenu PreferencesMenu;
	private ShowViewMenu ShowViewMenu;
						public WindowMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					PreferencesMenu = new PreferencesMenu(this, applicationModel);
		ShowViewMenu = new ShowViewMenu(this, applicationModel);

			setDisplayName("Window Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Window").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public PreferencesMenu PreferencesMenu() { return PreferencesMenu; }
		public ShowViewMenu ShowViewMenu() { return ShowViewMenu; }
		
			public class PreferencesMenu extends MenuNodeBase
	{

		
								public PreferencesMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Preferences Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Preferences").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ShowViewMenu extends MenuNodeBase
	{

		
			private OtherMenu OtherMenu;
						public ShowViewMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OtherMenu = new OtherMenu(this, applicationModel);

			setDisplayName("Show View Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OtherMenu OtherMenu() { return OtherMenu; }
		
			public class OtherMenu extends MenuNodeBase
	{

		
								public OtherMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OtherMenu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Other...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class showViewWindow extends WindowNodeBase
	{

		
			private OpenButton OpenButton;
	private TextEditor TextEditor;
						public showViewWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OpenButton = new OpenButton(this, applicationModel);
		TextEditor = new TextEditor(this, applicationModel);
			
			setDisplayName("Show View");
		}
				public showViewWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OpenButton = new OpenButton(this, applicationModel);
		TextEditor = new TextEditor(this, applicationModel);

			setDisplayName("Show View");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Show View").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OpenButton OpenButton() { return OpenButton; }
		public TextEditor TextEditor() { return TextEditor; }
		
			public class OpenButton extends ButtonNodeBase
	{

		
								public OpenButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Open").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TextEditor extends EditorNodeBase
	{

		
								public TextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Text Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class ProblemsTreeView extends TreeViewNodeBase
	{

		
								public ProblemsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Problems Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("0 items").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newNaturalProjectWindow extends WindowNodeBase
	{

		
			private finishButton finishButton;
	private nextButton nextButton;
	private wizardsTreeView wizardsTreeView;
	private newProjectEditor newProjectEditor;
						public newNaturalProjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					finishButton = new finishButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		wizardsTreeView = new wizardsTreeView(this, applicationModel);
		newProjectEditor = new newProjectEditor(this, applicationModel);
			
			setDisplayName("New Natural Project");
		}
				public newNaturalProjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					finishButton = new finishButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		wizardsTreeView = new wizardsTreeView(this, applicationModel);
		newProjectEditor = new newProjectEditor(this, applicationModel);

			setDisplayName("New Natural Project");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Natural Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public finishButton finishButton() { return finishButton; }
		public nextButton nextButton() { return nextButton; }
		public wizardsTreeView wizardsTreeView() { return wizardsTreeView; }
		public newProjectEditor newProjectEditor() { return newProjectEditor; }
		
			public class finishButton extends ButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nextButton extends ButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NextButton");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class wizardsTreeView extends TreeViewNodeBase
	{

		
								public wizardsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class newProjectEditor extends EditorNodeBase
	{

		
								public newProjectEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("New Project");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("New Project").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class yesButton extends ButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class addCobolNatureWindow extends WindowNodeBase
	{

		
			private openSystemsRadioButton openSystemsRadioButton;
	private oKButton oKButton;
						public addCobolNatureWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					openSystemsRadioButton = new openSystemsRadioButton(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Add Cobol nature");
		}
				public addCobolNatureWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					openSystemsRadioButton = new openSystemsRadioButton(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Add Cobol nature");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Add Cobol nature").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public openSystemsRadioButton openSystemsRadioButton() { return openSystemsRadioButton; }
		public oKButton oKButton() { return oKButton; }
		
			public class openSystemsRadioButton extends RadioButtonNodeBase
	{

		
								public openSystemsRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open Systems");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("Open Systems").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends ButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newFolderWindow extends WindowNodeBase
	{

		
			private finishButton finishButton;
	private folderNameEditor folderNameEditor;
						public newFolderWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					finishButton = new finishButton(this, applicationModel);
		folderNameEditor = new folderNameEditor(this, applicationModel);
			
			setDisplayName("New Folder");
		}
				public newFolderWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					finishButton = new finishButton(this, applicationModel);
		folderNameEditor = new folderNameEditor(this, applicationModel);

			setDisplayName("New Folder");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Folder").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public finishButton finishButton() { return finishButton; }
		public folderNameEditor folderNameEditor() { return folderNameEditor; }
		
			public class finishButton extends ButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class folderNameEditor extends EditorNodeBase
	{

		
								public folderNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Folder Name");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Folder name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class propertiesWindow extends WindowNodeBase
	{

		
			private Tree Tree;
	private ApplyAndCloseButton ApplyAndCloseButton;
	private cobolProjectPropertiesScreen cobolProjectPropertiesScreen;
	private newVariableEntryWindow newVariableEntryWindow;
	private classpathVariablesChangedWindow classpathVariablesChangedWindow;
	private folderSelectionWindow folderSelectionWindow;
						public propertiesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		cobolProjectPropertiesScreen = new cobolProjectPropertiesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		folderSelectionWindow = new folderSelectionWindow(this, applicationModel);
			
			setDisplayName("Properties");
		}
				public propertiesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					Tree = new Tree(this, applicationModel);
		ApplyAndCloseButton = new ApplyAndCloseButton(this, applicationModel);
		cobolProjectPropertiesScreen = new cobolProjectPropertiesScreen(this, applicationModel);
		newVariableEntryWindow = new newVariableEntryWindow(this, applicationModel);
		classpathVariablesChangedWindow = new classpathVariablesChangedWindow(this, applicationModel);
		folderSelectionWindow = new folderSelectionWindow(this, applicationModel);

			setDisplayName("Properties");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title(new RegExpProperty("Properties .*")).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public Tree Tree() { return Tree; }
		public ApplyAndCloseButton ApplyAndCloseButton() { return ApplyAndCloseButton; }
		public cobolProjectPropertiesScreen cobolProjectPropertiesScreen() { return cobolProjectPropertiesScreen; }
		public newVariableEntryWindow newVariableEntryWindow() { return newVariableEntryWindow; }
		public classpathVariablesChangedWindow classpathVariablesChangedWindow() { return classpathVariablesChangedWindow; }
		public folderSelectionWindow folderSelectionWindow() { return folderSelectionWindow; }
		
			public class Tree extends TreeViewNodeBase
	{

		
								public Tree(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Tree");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ApplyAndCloseButton extends ButtonNodeBase
	{

		
								public ApplyAndCloseButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Apply and Close");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Apply and Close").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cobolProjectPropertiesScreen extends UiObjectNodeBase
	{

		
			private selectButton selectButton;
						public cobolProjectPropertiesScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					selectButton = new selectButton(this, applicationModel);

			setDisplayName("Cobol Project Properties Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public selectButton selectButton() { return selectButton; }
		
			public class selectButton extends ButtonNodeBase
	{

		
								public selectButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Select...").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class newVariableEntryWindow extends WindowNodeBase
	{

		
			private oKButton oKButton;
	private pathEditor pathEditor;
	private nameEditor nameEditor;
						public newVariableEntryWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
			
			setDisplayName("New Variable Entry");
		}
				public newVariableEntryWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					oKButton = new oKButton(this, applicationModel);
		pathEditor = new pathEditor(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);

			setDisplayName("New Variable Entry");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Variable Entry").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public oKButton oKButton() { return oKButton; }
		public pathEditor pathEditor() { return pathEditor; }
		public nameEditor nameEditor() { return nameEditor; }
		
			public class oKButton extends ButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class pathEditor extends EditorNodeBase
	{

		
								public pathEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Path:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Path:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nameEditor extends EditorNodeBase
	{

		
								public nameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class classpathVariablesChangedWindow extends WindowNodeBase
	{

		
			private yesButton yesButton;
						public classpathVariablesChangedWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					yesButton = new yesButton(this, applicationModel);
			
			setDisplayName("Classpath Variables Changed");
		}
				public classpathVariablesChangedWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					yesButton = new yesButton(this, applicationModel);

			setDisplayName("Classpath Variables Changed");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Classpath Variables Changed").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public yesButton yesButton() { return yesButton; }
		
			public class yesButton extends ButtonNodeBase
	{

		
								public yesButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Yes");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Yes").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class folderSelectionWindow extends WindowNodeBase
	{

		
			private selectSourceFolderTreeView selectSourceFolderTreeView;
	private oKButton oKButton;
						public folderSelectionWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					selectSourceFolderTreeView = new selectSourceFolderTreeView(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);
			
			setDisplayName("Folder Selection");
		}
				public folderSelectionWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					selectSourceFolderTreeView = new selectSourceFolderTreeView(this, applicationModel);
		oKButton = new oKButton(this, applicationModel);

			setDisplayName("Folder Selection");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Folder Selection").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public selectSourceFolderTreeView selectSourceFolderTreeView() { return selectSourceFolderTreeView; }
		public oKButton oKButton() { return oKButton; }
		
			public class selectSourceFolderTreeView extends TreeViewNodeBase
	{

		
								public selectSourceFolderTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select source folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Select source folder:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class oKButton extends ButtonNodeBase
	{

		
								public oKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class newCobolObjectWindow extends WindowNodeBase
	{

		
			private finishButton finishButton;
	private cobolObjectNameEditor cobolObjectNameEditor;
	private cBLProgramRadioButton cBLProgramRadioButton;
	private nextButton nextButton;
	private enterOrSelectTheParentFolderTreeView enterOrSelectTheParentFolderTreeView;
						public newCobolObjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					finishButton = new finishButton(this, applicationModel);
		cobolObjectNameEditor = new cobolObjectNameEditor(this, applicationModel);
		cBLProgramRadioButton = new cBLProgramRadioButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		enterOrSelectTheParentFolderTreeView = new enterOrSelectTheParentFolderTreeView(this, applicationModel);
			
			setDisplayName("New Cobol object");
		}
				public newCobolObjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					finishButton = new finishButton(this, applicationModel);
		cobolObjectNameEditor = new cobolObjectNameEditor(this, applicationModel);
		cBLProgramRadioButton = new cBLProgramRadioButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		enterOrSelectTheParentFolderTreeView = new enterOrSelectTheParentFolderTreeView(this, applicationModel);

			setDisplayName("New Cobol object");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Cobol object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public finishButton finishButton() { return finishButton; }
		public cobolObjectNameEditor cobolObjectNameEditor() { return cobolObjectNameEditor; }
		public cBLProgramRadioButton cBLProgramRadioButton() { return cBLProgramRadioButton; }
		public nextButton nextButton() { return nextButton; }
		public enterOrSelectTheParentFolderTreeView enterOrSelectTheParentFolderTreeView() { return enterOrSelectTheParentFolderTreeView; }
		
			public class finishButton extends ButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cobolObjectNameEditor extends EditorNodeBase
	{

		
								public cobolObjectNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:                     ");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:                     ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cBLProgramRadioButton extends RadioButtonNodeBase
	{

		
								public cBLProgramRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("CBL (program)");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("CBL (program)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nextButton extends ButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class enterOrSelectTheParentFolderTreeView extends TreeViewNodeBase
	{

		
								public enterOrSelectTheParentFolderTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Enter or select the parent folder:");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Enter or select the parent folder:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewNaturalObjectWindow extends WindowNodeBase
	{

		
			private NCTNatcreatorTemplateRadioButton NCTNatcreatorTemplateRadioButton;
	private nextButton nextButton;
	private nameEditor nameEditor;
	private finishButton finishButton;
	private backButton backButton;
	private NCCNatcreatorLogicalBlockRadioButton NCCNatcreatorLogicalBlockRadioButton;
	private NCDNatcreatorDocumentRadioButton NCDNatcreatorDocumentRadioButton;
						public NewNaturalObjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NCTNatcreatorTemplateRadioButton = new NCTNatcreatorTemplateRadioButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		backButton = new backButton(this, applicationModel);
		NCCNatcreatorLogicalBlockRadioButton = new NCCNatcreatorLogicalBlockRadioButton(this, applicationModel);
		NCDNatcreatorDocumentRadioButton = new NCDNatcreatorDocumentRadioButton(this, applicationModel);
			
			setDisplayName("New Natural object");
		}
				public NewNaturalObjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NCTNatcreatorTemplateRadioButton = new NCTNatcreatorTemplateRadioButton(this, applicationModel);
		nextButton = new nextButton(this, applicationModel);
		nameEditor = new nameEditor(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		backButton = new backButton(this, applicationModel);
		NCCNatcreatorLogicalBlockRadioButton = new NCCNatcreatorLogicalBlockRadioButton(this, applicationModel);
		NCDNatcreatorDocumentRadioButton = new NCDNatcreatorDocumentRadioButton(this, applicationModel);

			setDisplayName("New Natural object");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New Natural object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NCTNatcreatorTemplateRadioButton NCTNatcreatorTemplateRadioButton() { return NCTNatcreatorTemplateRadioButton; }
		public nextButton nextButton() { return nextButton; }
		public nameEditor nameEditor() { return nameEditor; }
		public finishButton finishButton() { return finishButton; }
		public backButton backButton() { return backButton; }
		public NCCNatcreatorLogicalBlockRadioButton NCCNatcreatorLogicalBlockRadioButton() { return NCCNatcreatorLogicalBlockRadioButton; }
		public NCDNatcreatorDocumentRadioButton NCDNatcreatorDocumentRadioButton() { return NCDNatcreatorDocumentRadioButton; }
		
			public class NCTNatcreatorTemplateRadioButton extends RadioButtonNodeBase
	{

		
								public NCTNatcreatorTemplateRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NCT (natcreator Template)");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("NCT (natcreator Template)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nextButton extends ButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class nameEditor extends EditorNodeBase
	{

		
								public nameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Name:                     ");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Name:                     ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends ButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class backButton extends ButtonNodeBase
	{

		
								public backButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("< Back");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("< Back").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NCCNatcreatorLogicalBlockRadioButton extends RadioButtonNodeBase
	{

		
								public NCCNatcreatorLogicalBlockRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NCC (natcreator Logical Block)");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("NCC (natcreator Logical Block)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NCDNatcreatorDocumentRadioButton extends RadioButtonNodeBase
	{

		
								public NCDNatcreatorDocumentRadioButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("NCD (natcreator Document)");
		}

		@Override
		protected com.hp.lft.sdk.java.RadioButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.RadioButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.RadioButtonDescription.Builder().attachedText("NCD (natcreator Document)").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NatcreatorGenerateNewObjectWindow extends WindowNodeBase
	{

		
			private nextButton nextButton;
	private naturalNameEditor naturalNameEditor;
	private selectTargetEditor selectTargetEditor;
	private compositeUiObject compositeUiObject;
	private textEditor textEditor;
	private addButton addButton;
	private verboseCheckBox verboseCheckBox;
	private valueEditor valueEditor;
	private backButton backButton;
	private table table;
	private userExitsEditor userExitsEditor;
	private finishButton finishButton;
	private errorMessage errorMessage;
	private ComboList ComboList;
	private EnterTheValueForGroupData1List EnterTheValueForGroupData1List;
						public NatcreatorGenerateNewObjectWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					nextButton = new nextButton(this, applicationModel);
		naturalNameEditor = new naturalNameEditor(this, applicationModel);
		selectTargetEditor = new selectTargetEditor(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		textEditor = new textEditor(this, applicationModel);
		addButton = new addButton(this, applicationModel);
		verboseCheckBox = new verboseCheckBox(this, applicationModel);
		valueEditor = new valueEditor(this, applicationModel);
		backButton = new backButton(this, applicationModel);
		table = new table(this, applicationModel);
		userExitsEditor = new userExitsEditor(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		errorMessage = new errorMessage(this, applicationModel);
		ComboList = new ComboList(this, applicationModel);
		EnterTheValueForGroupData1List = new EnterTheValueForGroupData1List(this, applicationModel);
			
			setDisplayName("natcreator - Generate New Object");
		}
				public NatcreatorGenerateNewObjectWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					nextButton = new nextButton(this, applicationModel);
		naturalNameEditor = new naturalNameEditor(this, applicationModel);
		selectTargetEditor = new selectTargetEditor(this, applicationModel);
		compositeUiObject = new compositeUiObject(this, applicationModel);
		textEditor = new textEditor(this, applicationModel);
		addButton = new addButton(this, applicationModel);
		verboseCheckBox = new verboseCheckBox(this, applicationModel);
		valueEditor = new valueEditor(this, applicationModel);
		backButton = new backButton(this, applicationModel);
		table = new table(this, applicationModel);
		userExitsEditor = new userExitsEditor(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		errorMessage = new errorMessage(this, applicationModel);
		ComboList = new ComboList(this, applicationModel);
		EnterTheValueForGroupData1List = new EnterTheValueForGroupData1List(this, applicationModel);

			setDisplayName("natcreator - Generate New Object");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("natcreator - Generate New Object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public nextButton nextButton() { return nextButton; }
		public naturalNameEditor naturalNameEditor() { return naturalNameEditor; }
		public selectTargetEditor selectTargetEditor() { return selectTargetEditor; }
		public compositeUiObject compositeUiObject() { return compositeUiObject; }
		public textEditor textEditor() { return textEditor; }
		public addButton addButton() { return addButton; }
		public verboseCheckBox verboseCheckBox() { return verboseCheckBox; }
		public valueEditor valueEditor() { return valueEditor; }
		public backButton backButton() { return backButton; }
		public table table() { return table; }
		public userExitsEditor userExitsEditor() { return userExitsEditor; }
		public finishButton finishButton() { return finishButton; }
		public errorMessage errorMessage() { return errorMessage; }
		public ComboList ComboList() { return ComboList; }
		public EnterTheValueForGroupData1List EnterTheValueForGroupData1List() { return EnterTheValueForGroupData1List; }
		
			public class nextButton extends ButtonNodeBase
	{

		
								public nextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next >");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class naturalNameEditor extends EditorNodeBase
	{

		
								public naturalNameEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Natural name: ");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Natural name: ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class selectTargetEditor extends EditorNodeBase
	{

		
								public selectTargetEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Select target:");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Select target:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class compositeUiObject extends UiObjectNodeBase
	{

		
								public compositeUiObject(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Composite");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(4).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class textEditor extends EditorNodeBase
	{

		
								public textEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Text");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().text("").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class addButton extends ButtonNodeBase
	{

		
								public addButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName(" Add ");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label(" Add ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class verboseCheckBox extends CheckBoxNodeBase
	{

		
								public verboseCheckBox(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("verbose");
		}

		@Override
		protected com.hp.lft.sdk.java.CheckBoxDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.CheckBoxDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.CheckBoxDescription.Builder().attachedText("verbose").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class valueEditor extends EditorNodeBase
	{

		
								public valueEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Value: ");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Value: ").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class backButton extends ButtonNodeBase
	{

		
								public backButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("< Back");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("< Back").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class table extends TableNodeBase
	{

		
								public table(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Table");
		}

		@Override
		protected com.hp.lft.sdk.java.TableDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TableDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TableDescription();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class userExitsEditor extends EditorNodeBase
	{

		
								public userExitsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("User exits");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("User exits").nativeClass("org.eclipse.swt.custom.StyledText").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends ButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class errorMessage extends EditorNodeBase
	{

		
								public errorMessage(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Error message");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Generate new object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class ComboList extends ListNodeBase
	{

		
								public ComboList(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Combo");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.custom.CCombo").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class EnterTheValueForGroupData1List extends ListNodeBase
	{

		
								public EnterTheValueForGroupData1List(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("ParameterDataFieldDefination");
		}

		@Override
		protected com.hp.lft.sdk.java.ListDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ListDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ListDescription.Builder().attachedText("Enter the value for group data_1").nativeClass("org.eclipse.swt.custom.CCombo").tagName("Enter the value for group data_1").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class cTabFolderTabControl extends TabControlNodeBase
	{

		
			private styledTextEditor styledTextEditor;
						public cTabFolderTabControl(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					styledTextEditor = new styledTextEditor(this, applicationModel);

			setDisplayName("CTabFolder");
		}

		@Override
		protected com.hp.lft.sdk.java.TabControlDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TabControlDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TabControlDescription.Builder().nativeClass("org.eclipse.swt.custom.CTabFolder").origLogicalLocation("X_UNK__Y_SMALL").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public styledTextEditor styledTextEditor() { return styledTextEditor; }
		
			public class styledTextEditor extends EditorNodeBase
	{

		
								public styledTextEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("StyledText");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("").nativeClass("org.eclipse.swt.custom.StyledText").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class FileMenu extends MenuNodeBase
	{

		
			private OpenProjectsFromFileMenu OpenProjectsFromFileMenu;
						public FileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OpenProjectsFromFileMenu = new OpenProjectsFromFileMenu(this, applicationModel);

			setDisplayName("File Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("File").path("MenuItem;Shell;").nativeClass("org.eclipse.swt.widgets.MenuItem").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OpenProjectsFromFileMenu OpenProjectsFromFileMenu() { return OpenProjectsFromFileMenu; }
		
			public class OpenProjectsFromFileMenu extends MenuNodeBase
	{

		
								public OpenProjectsFromFileMenu(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Open Projects From File Menu");
		}

		@Override
		protected com.hp.lft.sdk.java.MenuDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.MenuDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.MenuDescription.Builder().label("Open Projects from File System...").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class importProjectsFromFileSystemOrArchiveWindow extends WindowNodeBase
	{

		
			private cancelButton cancelButton;
						public importProjectsFromFileSystemOrArchiveWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					cancelButton = new cancelButton(this, applicationModel);
			
			setDisplayName("Import Projects from File System or Archive");
		}
				public importProjectsFromFileSystemOrArchiveWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("Import Projects from File System or Archive");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Import Projects from File System or Archive").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public cancelButton cancelButton() { return cancelButton; }
		
			public class cancelButton extends ButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class AnnotationRulerColumn1 extends UiObjectNodeBase
	{

		
								public AnnotationRulerColumn1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("AnnotationRulerColumn1");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.jface.text.source.AnnotationRulerColumn$7").index(1).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class DeleteResourcesWindow extends WindowNodeBase
	{

		
			private OKButton OKButton;
						public DeleteResourcesWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					OKButton = new OKButton(this, applicationModel);
			
			setDisplayName("Delete Resources");
		}
				public DeleteResourcesWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					OKButton = new OKButton(this, applicationModel);

			setDisplayName("Delete Resources");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Delete Resources").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public OKButton OKButton() { return OKButton; }
		
			public class OKButton extends ButtonNodeBase
	{

		
								public OKButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("OK");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("OK").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NewWindow extends WindowNodeBase
	{

		
			private SelectAWizardScreen SelectAWizardScreen;
						public NewWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);
			
			setDisplayName("New Window");
		}
				public NewWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					SelectAWizardScreen = new SelectAWizardScreen(this, applicationModel);

			setDisplayName("New Window");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("New").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public SelectAWizardScreen SelectAWizardScreen() { return SelectAWizardScreen; }
		
			public class SelectAWizardScreen extends UiObjectNodeBase
	{

		
			private WizardsEditor WizardsEditor;
	private NextButton NextButton;
	private WizardsTreeView WizardsTreeView;
	private finishButton finishButton;
	private cancelButton cancelButton;
						public SelectAWizardScreen(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardsEditor = new WizardsEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
		WizardsTreeView = new WizardsTreeView(this, applicationModel);
		finishButton = new finishButton(this, applicationModel);
		cancelButton = new cancelButton(this, applicationModel);

			setDisplayName("Select a wizard Screen");
		}

		@Override
		protected com.hp.lft.sdk.java.UiObjectDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.UiObjectDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.UiObjectDescription.Builder().nativeClass("org.eclipse.swt.widgets.Composite").index(0).build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardsEditor WizardsEditor() { return WizardsEditor; }
		public NextButton NextButton() { return NextButton; }
		public WizardsTreeView WizardsTreeView() { return WizardsTreeView; }
		public finishButton finishButton() { return finishButton; }
		public cancelButton cancelButton() { return cancelButton; }
		
			public class WizardsEditor extends EditorNodeBase
	{

		
								public WizardsEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Editor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends ButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next Button");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class WizardsTreeView extends TreeViewNodeBase
	{

		
								public WizardsTreeView(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizards Tree View");
		}

		@Override
		protected com.hp.lft.sdk.java.TreeViewDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.TreeViewDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.TreeViewDescription.Builder().attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class finishButton extends ButtonNodeBase
	{

		
								public finishButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Finish");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Finish").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class cancelButton extends ButtonNodeBase
	{

		
								public cancelButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Cancel");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().label("Cancel").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}

	public class SelectAWizardWindow extends WindowNodeBase
	{

		
			private WizardEditor WizardEditor;
	private NextButton NextButton;
						public SelectAWizardWindow(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					WizardEditor = new WizardEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);
			
			setDisplayName("Select A Wizard");
		}
				public SelectAWizardWindow(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					WizardEditor = new WizardEditor(this, applicationModel);
		NextButton = new NextButton(this, applicationModel);

			setDisplayName("Select A Wizard");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().title("Select a wizard").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public WizardEditor WizardEditor() { return WizardEditor; }
		public NextButton NextButton() { return NextButton; }
		
			public class WizardEditor extends EditorNodeBase
	{

		
								public WizardEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Wizard");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().tagName("Wizards:").attachedText("Wizards:").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class NextButton extends ButtonNodeBase
	{

		
								public NextButton(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("Next");
		}

		@Override
		protected com.hp.lft.sdk.java.ButtonDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.ButtonDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.ButtonDescription.Builder().tagName("Next >").label("Next >").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	public class NatcreatorGenerateNewObjectWindow1 extends WindowNodeBase
	{

		
			private NoNaturalNameSelectedStLabel NoNaturalNameSelectedStLabel;
	private TargetFileAlreadyExistsWizardWillOverwriteItStLabel TargetFileAlreadyExistsWizardWillOverwriteItStLabel;
	private UserExitEditor UserExitEditor;
						public NatcreatorGenerateNewObjectWindow1(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);

					NoNaturalNameSelectedStLabel = new NoNaturalNameSelectedStLabel(this, applicationModel);
		TargetFileAlreadyExistsWizardWillOverwriteItStLabel = new TargetFileAlreadyExistsWizardWillOverwriteItStLabel(this, applicationModel);
		UserExitEditor = new UserExitEditor(this, applicationModel);
			
			setDisplayName("natcreator - Generate New Object1");
		}
				public NatcreatorGenerateNewObjectWindow1(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

					NoNaturalNameSelectedStLabel = new NoNaturalNameSelectedStLabel(this, applicationModel);
		TargetFileAlreadyExistsWizardWillOverwriteItStLabel = new TargetFileAlreadyExistsWizardWillOverwriteItStLabel(this, applicationModel);
		UserExitEditor = new UserExitEditor(this, applicationModel);

			setDisplayName("natcreator - Generate New Object1");
		}

		@Override
		protected com.hp.lft.sdk.java.WindowDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.WindowDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.WindowDescription.Builder().label("natcreator - Generate New Object").tagName("natcreator - Generate New Object").title("natcreator - Generate New Object").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				public NoNaturalNameSelectedStLabel NoNaturalNameSelectedStLabel() { return NoNaturalNameSelectedStLabel; }
		public TargetFileAlreadyExistsWizardWillOverwriteItStLabel TargetFileAlreadyExistsWizardWillOverwriteItStLabel() { return TargetFileAlreadyExistsWizardWillOverwriteItStLabel; }
		public UserExitEditor UserExitEditor() { return UserExitEditor; }
		
			public class NoNaturalNameSelectedStLabel extends LabelNodeBase
	{

		
								public NoNaturalNameSelectedStLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName(" No Natural name selected.(st)");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().label(" No Natural name selected.").tagName(" No Natural name selected.(st)").text(" No Natural name selected.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class TargetFileAlreadyExistsWizardWillOverwriteItStLabel extends LabelNodeBase
	{

		
								public TargetFileAlreadyExistsWizardWillOverwriteItStLabel(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName(" Target file already exists. Wizard will overwrite it.(st)");
		}

		@Override
		protected com.hp.lft.sdk.java.LabelDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.LabelDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.LabelDescription.Builder().label(" Target file already exists. Wizard will overwrite it.").tagName(" Target file already exists. Wizard will overwrite it.(st)").text(" Target file already exists. Wizard will overwrite it.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	public class UserExitEditor extends EditorNodeBase
	{

		
								public UserExitEditor(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);

			
			setDisplayName("UserExitEditor");
		}

		@Override
		protected com.hp.lft.sdk.java.EditorDescription createDescription() throws GeneralLeanFtException{
			com.hp.lft.sdk.java.EditorDescription description = null; 
			try{
				description = new com.hp.lft.sdk.java.EditorDescription.Builder().attachedText("A User Exit can be specified here. If it is not mandatory, it has to be activated first.\n If you want to specify your own code, see the description and the example to conform to the intended code.").tagName("A User Exit can be specified here. If it is not mandatory, it has to be activated first.\n If you want to specify your own code, see the description and the example to conform to the intended code.").build();
			}catch(Exception e){
				throw new GeneralLeanFtException(e.getMessage(), e);
			}
			return description;
		}

				
			}

	}

	}


			
	public abstract class WindowNodeBase extends TopLevelObjectNodeBase<com.hp.lft.sdk.java.Window, com.hp.lft.sdk.java.WindowDescription> implements com.hp.lft.sdk.java.Window
	{
		public WindowNodeBase(AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(applicationModel);
		}

		public WindowNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getTitle() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTitle();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public com.hp.lft.sdk.WindowState getWindowState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getWindowState();
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isJavaWindow() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isJavaWindow();
		}

		@Override 
		public boolean isMaximizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMaximizable();
		}

		@Override 
		public boolean isMinimizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isMinimizable();
		}

		@Override 
		public boolean isResizable() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isResizable();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void maximize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().maximize();
		}

		@Override 
		public void minimize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().minimize();
		}

		@Override 
		public void move(java.awt.Point arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0);
		}

		@Override 
		public void move(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().move(arg0, arg1);
		}

		@Override 
		public void resize(java.awt.Dimension arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0);
		}

		@Override 
		public void resize(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().resize(arg0, arg1);
		}

		@Override 
		public void restore() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().restore();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class UiObjectNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.UiObject, com.hp.lft.sdk.java.UiObjectDescription> implements com.hp.lft.sdk.java.UiObject
	{		
		public UiObjectNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class EditorNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Editor, com.hp.lft.sdk.java.EditorDescription> implements com.hp.lft.sdk.java.Editor
	{		
		public EditorNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activate() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activate();
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void clickLink(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().clickLink(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public void delete(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().delete(arg0, arg1, arg2, arg3);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public void insert(java.lang.String arg0, int arg1, int arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().insert(arg0, arg1, arg2);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isReadOnly() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isReadOnly();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void replace(java.lang.String arg0, int arg1, int arg2, int arg3, int arg4) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().replace(arg0, arg1, arg2, arg3, arg4);
		}

		@Override 
		public void select(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setCursorPosition(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setCursorPosition(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setFocus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setFocus();
		}

		@Override 
		public void setSecure(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setSecure(arg0);
		}

		@Override 
		public void setText(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setText(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class ButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Button, com.hp.lft.sdk.java.ButtonDescription> implements com.hp.lft.sdk.java.Button
	{		
		public ButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class TreeViewNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TreeView, com.hp.lft.sdk.java.TreeViewDescription> implements com.hp.lft.sdk.java.TreeView
	{		
		public TreeViewNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateNode(com.hp.lft.sdk.java.TreeViewNode arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public void activateNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateNode(arg0);
		}

		@Override 
		public java.lang.String buildNodePath(java.lang.Object... arg0)  
		{
			return getConcrete().buildNodePath(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeader(arg0);
		}

		@Override 
		public int getColumnsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnsCount();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public com.hp.lft.sdk.java.TreeViewNode getNode(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNode(arg0);
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TreeViewNode> getSelectedNodes() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedNodes();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public int getVisibleNodesCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleNodesCount();
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(com.hp.lft.sdk.java.TreeViewNode... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.TreeViewNode arg0, com.hp.lft.sdk.java.TreeViewNode arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class TabControlNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.TabControl, com.hp.lft.sdk.java.TabControlDescription> implements com.hp.lft.sdk.java.TabControl
	{		
		public TabControlNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void close(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public void close(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().close(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getOrigLogicalLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getOrigLogicalLocation();
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.lang.String getSelectedTab() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedTab();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public int getTabsCount() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTabsCount();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class MenuNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Menu, com.hp.lft.sdk.java.MenuDescription> implements com.hp.lft.sdk.java.Menu
	{		
		public MenuNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public com.hp.lft.sdk.java.Menu getSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenu(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.Menu> getSubMenus() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSubMenus();
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select();
		}

		@Override 
		public void selectSubMenu(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectSubMenu(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class ToolBarNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.ToolBar, com.hp.lft.sdk.java.ToolBarDescription> implements com.hp.lft.sdk.java.ToolBar
	{		
		public ToolBarNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ToolBarButton getButton(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButton(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getButtons();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ToolBarButton> getSelectedButtons() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedButtons();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class CheckBoxNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.CheckBox, com.hp.lft.sdk.java.CheckBoxDescription> implements com.hp.lft.sdk.java.CheckBox
	{		
		public CheckBoxNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.CheckedState getState() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getState();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public void setState(com.hp.lft.sdk.CheckedState arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().setState(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class TableNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Table, com.hp.lft.sdk.java.TableDescription> implements com.hp.lft.sdk.java.Table
	{		
		public TableNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateCell(arg0, arg1);
		}

		@Override 
		public void activateColumn(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateColumn(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateColumn(arg0);
		}

		@Override 
		public void activateRow(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateRow(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumns(arg0);
		}

		@Override 
		public void deselectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectColumnsRange(arg0, arg1);
		}

		@Override 
		public void deselectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRows(arg0);
		}

		@Override 
		public void deselectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void deselectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRowsRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumns(arg0);
		}

		@Override 
		public void extendSelectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectColumnsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRows(arg0);
		}

		@Override 
		public void extendSelectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public void extendSelectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelectRowsRange(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.TableCell getCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getCell(arg0, arg1);
		}

		@Override 
		public java.util.List<java.lang.String> getColumnHeaders() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getColumnHeaders();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.TableRow> getRows() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getRows();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void selectCell(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCell(int arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCell(arg0, arg1);
		}

		@Override 
		public void selectCellsRange(int arg0, int arg1, int arg2, int arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectCellsRange(int arg0, java.lang.String arg1, int arg2, java.lang.String arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectCellsRange(arg0, arg1, arg2, arg3);
		}

		@Override 
		public void selectColumnHeader(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0);
		}

		@Override 
		public void selectColumnHeader(int arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumnHeader(java.lang.String arg0, com.hp.lft.sdk.MouseButton arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnHeader(arg0, arg1);
		}

		@Override 
		public void selectColumns(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumns(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumns(arg0);
		}

		@Override 
		public void selectColumnsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectColumnsRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectColumnsRange(arg0, arg1);
		}

		@Override 
		public void selectRows(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRows(com.hp.lft.sdk.java.TableRow... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRows(arg0);
		}

		@Override 
		public void selectRowsRange(com.hp.lft.sdk.java.TableRow arg0, com.hp.lft.sdk.java.TableRow arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void selectRowsRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRowsRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class RadioButtonNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.RadioButton, com.hp.lft.sdk.java.RadioButtonDescription> implements com.hp.lft.sdk.java.RadioButton
	{		
		public RadioButtonNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isChecked() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isChecked();
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void set() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().set();
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class ListNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.List, com.hp.lft.sdk.java.ListDescription> implements com.hp.lft.sdk.java.List
	{		
		public ListNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void activateItem(com.hp.lft.sdk.java.ListItem arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void activateItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().activateItem(arg0);
		}

		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void deselect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselect(arg0);
		}

		@Override 
		public void deselectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().deselectRange(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public void extendSelect(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public void extendSelect(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().extendSelect(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public com.hp.lft.sdk.java.ListItem getItem(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItem(arg0);
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getItems();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.util.List<com.hp.lft.sdk.java.ListItem> getSelectedItems() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSelectedItems();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void select(int... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(com.hp.lft.sdk.java.ListItem... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void select(java.lang.String... arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().select(arg0);
		}

		@Override 
		public void selectRange(com.hp.lft.sdk.java.ListItem arg0, com.hp.lft.sdk.java.ListItem arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(int arg0, int arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void selectRange(java.lang.String arg0, java.lang.String arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().selectRange(arg0, arg1);
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
	
	public abstract class LabelNodeBase extends AppModelNodeBase<com.hp.lft.sdk.java.Label, com.hp.lft.sdk.java.LabelDescription> implements com.hp.lft.sdk.java.Label
	{		
		public LabelNodeBase(TestObject parent, AppModelBase applicationModel) throws GeneralLeanFtException
		{
			super(parent, applicationModel);
		}

		


		@Override 
		public void click() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click();
		}

		@Override 
		public void click(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public void click(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().click(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0);
		}

		@Override 
		public com.hp.lft.sdk.NativeObject createObject(java.lang.String arg0, java.lang.Object... arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().createObject(arg0, arg1);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild describe(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().describe(arg0, arg1);
		}

		@Override 
		public void doubleClick() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick();
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.ClickArgs arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public void doubleClick(com.hp.lft.sdk.MouseButton arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().doubleClick(arg0);
		}

		@Override 
		public boolean exists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists();
		}

		@Override 
		public boolean exists(java.lang.Integer arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().exists(arg0);
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> TChild[] findChildren(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().findChildren(arg0, arg1);
		}

		@Override 
		public void fireEvent(com.hp.lft.sdk.java.EventInfo arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().fireEvent(arg0);
		}

		@Override 
		public java.awt.Point getAbsoluteLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAbsoluteLocation();
		}

		@Override 
		public java.lang.String getAttachedText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getAttachedText();
		}

		@Override 
		public java.lang.String getBackgroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getBackgroundColor();
		}

		@Override 
		public java.lang.String getDisplayName()  
		{
			return getConcrete().getDisplayName();
		}

		@Override 
		public java.lang.String getForegroundColor() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getForegroundColor();
		}

		@Override 
		public java.lang.String getLabel() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLabel();
		}

		@Override 
		public java.awt.Point getLocation() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getLocation();
		}

		@Override 
		public java.lang.String getNativeClass() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeClass();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getNativeObject() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getNativeObject();
		}

		@Override 
		public java.lang.String getObjectName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectName();
		}

		@Override 
		public <TValue> TValue getObjectProperty(java.lang.String arg0, java.lang.Class<TValue> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getObjectProperty(arg0, arg1);
		}

		@Override 
		public java.lang.String getPath() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getPath();
		}

		@Override 
		public java.awt.Dimension getSize() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSize();
		}

		@Override 
		public java.awt.image.RenderedImage getSnapshot() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getSnapshot();
		}

		@Override 
		public com.hp.lft.sdk.NativeObject getStatics(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getStatics(arg0);
		}

		@Override 
		public java.lang.String getTagName() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTagName();
		}

		@Override 
		public java.lang.String getText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getText();
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0);
		}

		@Override 
		public java.awt.Rectangle[] getTextLocations(java.lang.String arg0, java.awt.Rectangle arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getTextLocations(arg0, arg1);
		}

		@Override 
		public java.lang.String getVisibleText() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText();
		}

		@Override 
		public java.lang.String getVisibleText(java.awt.Rectangle arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().getVisibleText(arg0);
		}

		@Override 
		public void highlight() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().highlight();
		}

		@Override 
		public <TChild extends com.hp.lft.sdk.TestObject> int highlightMatches(java.lang.Class<TChild> arg0, com.hp.lft.sdk.Description arg1) throws com.hp.lft.sdk.GeneralLeanFtException, java.lang.CloneNotSupportedException 
		{
			return getConcrete().highlightMatches(arg0, arg1);
		}

		@Override 
		public boolean isEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isEnabled();
		}

		@Override 
		public boolean isFocused() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isFocused();
		}

		@Override 
		public boolean isVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().isVisible();
		}

		@Override 
		public void sendKeys(java.lang.String arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0);
		}

		@Override 
		public void sendKeys(java.lang.String arg0, java.util.EnumSet<com.hp.lft.sdk.KeyModifier> arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			getConcrete().sendKeys(arg0, arg1);
		}

		@Override 
		public void setDisplayName(java.lang.String arg0)  
		{
			getConcrete().setDisplayName(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0);
		}

		@Override 
		public java.awt.Point verifyImageExists(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageExists(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, byte arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2);
		}

		@Override 
		public boolean verifyImageMatch(java.awt.image.RenderedImage arg0, com.hp.lft.sdk.ImageMaskArea arg1, byte arg2, byte arg3) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().verifyImageMatch(arg0, arg1, arg2, arg3);
		}

		@Override 
		public boolean waitUntilEnabled() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled();
		}

		@Override 
		public boolean waitUntilEnabled(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilEnabled(arg0);
		}

		@Override 
		public boolean waitUntilExists() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists();
		}

		@Override 
		public boolean waitUntilExists(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilExists(arg0);
		}

		@Override 
		public boolean waitUntilVisible() throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible();
		}

		@Override 
		public boolean waitUntilVisible(int arg0) throws com.hp.lft.sdk.GeneralLeanFtException 
		{
			return getConcrete().waitUntilVisible(arg0);
		}
	}
}
