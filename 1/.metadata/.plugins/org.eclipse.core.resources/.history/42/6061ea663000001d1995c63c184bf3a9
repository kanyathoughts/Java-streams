package Sample;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class StreamMethods {

	public static void main(String[] args) {
		
		List<String> list1 = Arrays.asList("bus", "car", "flight", "scooty", "bus", "car", "bike");
		
		//distinct will remove duplicate values 
		List<String> distinctList = list1.stream().distinct().collect(Collectors.toList());
		System.out.println(distinctList);
		
		//count is useful to count the elements from the stream
		System.out.println(list1.stream().distinct().count());
		List<Integer> list2 = Arrays.asList(10,20,25,30,35,40,45);
		System.out.println(list2.stream().filter(n -> n%2==0 && n%5==0).count());
		list2.stream().filter(n -> n%2==0 && n%5==0).forEach(n -> System.out.println(n));
		
		//limit: We can give the limit by giving the size
		List<String> limitedList = list1.stream().limit(3).collect(Collectors.toList());
		System.out.println(limitedList);
		
		//min: here comparator is used and return type is Optional interface
		
		Optional<Integer> min = list2.stream().min((val1, val2) -> {
																	return val1.compareTo(val2);
																	});
		System.out.println(min.get()); //10
		
		//max: here comparator is used and return type is Optional interface
		
		Optional<Integer> max = list2.stream().max((val1, val2) -> {
																	return val1.compareTo(val2);
																	});
		System.out.println(max.get());
		
		//reduce It is similar kind of map operation but the difference is map operation will perform on each element in the list 
		//but here it will take 2 elements perform operation b/w them and so on.
		System.out.println(list2.stream().reduce((val1, val2) -> {
			return val2 - val1;
		}).get());
		
		//toArray method will convert a list into array
		/*Object arr[] = list2.stream().toArray();
		for (Object val: arr) {
			System.out.println(val);
		}*/
		
		//This will also convert list into array
		Object arr[] = new Object[10];//declaring array size and this array size is the final array size on which the list elements will come.
		Object a[] = list2.toArray(arr); //If the array size is less then in the runtime new array will be created.
		for (Object val: a) {
			System.out.println(val);
		}
		
	}

}
